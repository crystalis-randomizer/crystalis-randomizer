export class Evaluator {
    constructor(env) {
        this.env = env;
        this.functions = new Map([
            ['.min', Math.min],
            ['.max', Math.max],
            ['.byteat', (addr) => this.byteAt(addr)],
            ['.wordat', (addr) => this.byteAt(addr) | this.byteAt(addr + 1) << 8],
        ]);
        this.prefix = new Map([
            ['+', x => x],
            ['-', x => -x],
            ['~', x => ~x],
            ['!', x => Number(!x)],
            ['<', x => x & 0xff],
            ['>', x => x >> 8 & 0xff],
        ]);
        this.infix = new Map([
            ['+', (a, b) => a + b],
            ['-', (a, b) => a - b],
            ['*', (a, b) => a * b],
            ['/', (a, b) => Math.floor(a / b)],
            ['.mod', (a, b) => a % b],
            ['<<', (a, b) => a << b],
            ['>>', (a, b) => a >>> b],
            ['&', (a, b) => a & b],
            ['|', (a, b) => a | b],
            ['^', (a, b) => a ^ b],
            ['&&', (a, b) => a && b],
            ['||', (a, b) => a || b],
            ['.xor', (a, b) => Number(!a && b || !b && a)],
            ['<', (a, b) => Number(a < b)],
            ['<=', (a, b) => Number(a <= b)],
            ['>', (a, b) => Number(a > b)],
            ['>=', (a, b) => Number(a >= b)],
            ['=', (a, b) => Number(a === b)],
            ['<>', (a, b) => Number(a !== b)],
        ]);
    }
    definedSymbol(name) {
        throw new Error(`unimplemented`);
    }
    referencedSymbol(name) {
        throw new Error(`unimplemented`);
    }
    evaluate(expr) {
        throw new Error(`unimplemented`);
    }
    simplify(expr) {
        var _a;
        const args = expr.args;
        if (!args)
            return expr;
        let nums = [];
        for (let i = 0; i < args.length; i++) {
            args[i] = this.simplify(args[i]);
            if (args[i].op === 'num' && nums) {
                nums[i] = args[i].num;
            }
            else {
                nums = undefined;
            }
        }
        const f = (_a = this.functions.get(expr.op)) !== null && _a !== void 0 ? _a : (args.length === 1 ?
            this.prefix.get(expr.op) :
            this.infix.get(expr.op));
        if (!f || !nums)
            return { op: expr.op, args };
        const result = f(...nums);
        return { op: 'num', num: result };
    }
    byteAt(addr) {
        throw new Error(`not implemented`);
    }
}
//# sourceMappingURL=data:application/json;base64,