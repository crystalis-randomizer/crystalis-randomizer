import { makeInput } from './backgroundattrs.js';
export class Screen {
    constructor(context, invert = false) {
        this.context = context;
        this.screen = 0;
        this.rom = context.rom;
        this.graphics = context.graphics;
        const el = this.el = document.createElement('div');
        const grid = this.grid = document.createElement('div');
        if (invert)
            el.appendChild(grid);
        el.appendChild(makeInput(context, [], {
            get: (_) => this.screen,
            set: (_, s) => {
                this.screen = s;
                this.redraw();
            },
        }));
        if (!invert)
            el.appendChild(grid);
        grid.classList.add('screen-grid');
        grid.addEventListener('drop', (ev) => this.handleDrop(ev));
        grid.addEventListener('dragstart', (ev) => this.handleDragStart(ev));
        grid.addEventListener('dragover', (ev) => ev.preventDefault());
        grid.addEventListener('click', (ev) => this.handleClick(ev));
        for (let i = 0; i < 240; i++) {
            const img = document.createElement('img');
            img.dataset['index'] = String(i);
            img.draggable = true;
            grid.appendChild(img);
        }
        (async () => {
            for await (const update of context.updates()) {
                if (update.graphics)
                    this.redraw();
            }
        })();
    }
    redraw() {
        const tiles = this.rom.screens[this.screen].tiles;
        const tileset = this.rom.tilesets[this.context.tileset];
        for (let i = 0; i < 240; i++) {
            let tile = tiles[i];
            if (tile < 0x20 && this.context.flag)
                tile = tileset.alternates[tile];
            let attr = tileset.attrs[tile];
            const pal = attr < 3 ? this.context.tilePalettes[attr] : 0x7f;
            this.grid.children[i].src =
                this.graphics.metatile(tile, this.context.tilePatterns, this.context.tileset, pal);
        }
        this.grid.style.background = this.graphics.paletteCss(this.context.tilePalettes[0]);
    }
    handleDragStart(ev) {
        const target = ev.target;
        if (!target.dataset['index'])
            return;
        const index = Number(target.dataset['index']);
        if (!ev.dataTransfer)
            throw new Error(`Expected data: ${ev}`);
        ev.dataTransfer.setData('application/json', JSON.stringify({
            'metatile': this.rom.screens[this.screen].tiles[index],
            'png': target.src,
        }));
    }
    handleClick(ev) {
        const json = this.context.selection;
        const target = ev.target;
        if (!target.dataset['index'])
            return;
        const index = Number(target.dataset['index']);
        if (ev.shiftKey) {
            this.context.selection = {
                'metatile': this.rom.screens[this.screen].tiles[index],
                'png': target.src,
            };
        }
        else if (json && json['metatile']) {
            this.rom.screens[this.screen].tiles[index] = json['metatile'];
            target.src = json['png'];
        }
    }
    handleDrop(ev) {
        const target = ev.target;
        if (!target.dataset['index'])
            return;
        const index = Number(target.dataset['index']);
        if (!ev.dataTransfer)
            throw new Error(`Expected data: ${ev}`);
        const json = JSON.parse(ev.dataTransfer.getData('application/json'));
        if ('metatile' in json) {
            this.rom.screens[this.screen].tiles[index] = json['metatile'];
            target.src = json['png'];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,