import { Entity } from './entity.js';
import { reverseBits, seq, tuple } from './util.js';
export class Pattern extends Entity {
    constructor(rom, id, pixels) {
        super(rom, id);
        this.pixels = pixels || tuple(rom.chr, id << 4, 16);
    }
    pixelAt(y, x) {
        return (this.pixels[y | 8] >> x & 1) << 1 | (this.pixels[y] >> x & 1);
    }
    flipH() {
        return new Pattern(this.rom, -1, this.pixels.map(reverseBits));
    }
    flipV() {
        return new Pattern(this.rom, -1, seq(16, y => this.pixels[y & 8 | ~y & 7]));
    }
    flip(type) {
        let p = this;
        if (type & Flip.HORIZONTAL)
            p = p.flipH();
        if (type & Flip.VERTICAL)
            p = p.flipV();
        return p;
    }
    write() {
        const a = this.id << 4;
        this.rom.chr.subarray(a, a + 16).set(this.pixels);
        return [];
    }
}
export class Patterns {
    constructor(rom) {
        this._all = [];
        this._all = seq(rom.chr.length >> 4, i => new Pattern(rom, i));
    }
    get(page, tile_idx) {
        if (!tile_idx) {
            return this._all[page];
        }
        return this._all[page | tile_idx];
    }
    set(page, tile_idx, pixels) {
        this._all[page | tile_idx].pixels = pixels;
    }
    [Symbol.iterator]() {
        return this._all[Symbol.iterator]();
    }
}
Patterns.HUD_LF = parsePattern(`
    |L     ..|
    |L.    .#|
    |L.  FF.#|
    |L.  F..#|
    |LLL FF.#|
    | ...F..#|
    |    F ..|
    |    .   |
  `, { ' ': 2, 'L': 1, 'F': 1, '#': 1, '.': 3 });
Patterns.HUD_PW = parsePattern(`
    |PPP     |
    |P..P.   |
    |PPP.    |
    |P..     |
    |P.w.w.w |
    | .w.w.w |
    |  .w.w. |
    |   . .  |
  `, { ' ': 2, 'P': 1, 'w': 1, '.': 3 });
Patterns.HUD_EY = parsePattern(`
    |EEE   ..|
    |E..   .#|
    |EE Y.Y.#|
    |E..Y.Y.#|
    |EEE.Y..#|
    |... Y..#|
    |    Y...|
    |        |
  `, { ' ': 2, 'E': 1, 'Y': 1, '#': 1, '.': 3 });
Patterns.HUD_LV = parsePattern(`
    |        |
    |L       |
    |L.      |
    |L. v. v.|
    |L. v. v.|
    |LLL vv. |
    | ... v. |
    |     .  |
  `, { ' ': 2, 'L': 1, 'v': 1, '.': 3 });
Patterns.HUD_DL = parsePattern(`
    |        |
    |DD      |
    |D.D.L   |
    |D.D.L.  |
    |D.D.L.  |
    |DD. L.  |
    | .  LLL |
    |     ...|
  `, { ' ': 2, 'D': 1, 'L': 1, '.': 3 });
Patterns.HUD_MP = parsePattern(`
    |M.  M   |
    |MM.MM.  |
    |M.M.M.  |
    |M. .PPP |
    |M. .P..P|
    |    PPP.|
    |    P.. |
    |    P.  |
  `, { ' ': 2, 'M': 1, 'P': 1, '.': 3 });
Patterns.HUD_EX = parsePattern(`
    |EEE     |
    |E...    |
    |EEE     |
    |E...    |
    |EEE x.x.|
    | ... x. |
    |    x.x.|
    |     . .|
  `, { ' ': 2, 'E': 1, 'x': 1, '.': 3 });
function parsePattern(data, key) {
    const text = data.trim().replace(/^[^|]*\||\|[^|]*$/mg, '').replace(/\n/g, '');
    if (text.length !== 64)
        throw new Error(`Bad CHR tile: ${text}`);
    const arr = new Array(16).fill(0);
    for (let i = 0, c = ''; c = text.charAt(i); ++i) {
        const off = i >>> 3;
        const lo = off;
        const hi = off | 8;
        const col = ~i & 7;
        const val = key[c] || 0;
        if (val & 1) {
            arr[lo] |= 1 << col;
        }
        if (val & 2) {
            arr[hi] |= 1 << col;
        }
    }
    return arr;
}
export var Flip;
(function (Flip) {
    Flip[Flip["HORIZONTAL"] = 64] = "HORIZONTAL";
    Flip[Flip["VERTICAL"] = 128] = "VERTICAL";
})(Flip || (Flip = {}));
//# sourceMappingURL=data:application/json;base64,