import { LocationMap } from './locationmap.js';
import { Terrain, debugLabel } from '../logic/terrain.js';
import { hex } from '../rom/util.js';
export class Area {
    constructor(rom, world) {
        this.rom = rom;
        this.world = world;
        this.element = document.createElement('div');
        this.element.addEventListener('click', (e) => this.click(e));
        this.element.addEventListener('mousemove', (e) => this.move(e));
        this.renderArea(0);
    }
    click(e) {
        const data = LocationMap.getData(e);
        if (!data)
            return;
        let tile = this.world.tiles.get(data.tile);
        if (tile == null)
            return;
        if (tile.area === this.area) {
            const exit = tile.exit != null ? this.world.tiles.get(tile.exit) : null;
            if (exit && exit.area !== this.area) {
                tile = exit;
            }
        }
        if (tile.area && tile.area !== this.area) {
            this.renderArea(tile.area.id);
        }
    }
    move(e) {
        const data = LocationMap.getData(e);
        if (!data)
            return;
        const tile = this.world.tiles.get(data.tile);
        if (tile == null)
            return;
        const exit = tile.exit != null && !this.area.tiles.has(tile.exit);
        data.target.element.style.cursor = exit ? 'pointer' : 'default';
    }
    clear() {
        while (this.element.childNodes.length) {
            this.element.childNodes[0].remove();
        }
    }
    renderArea(index) {
        var _a;
        this.clear();
        const select = document.createElement('select');
        select.appendChild(document.createElement('option'));
        select.children[0].textContent = 'Select location';
        for (const loc of this.rom.locations) {
            if (!loc.used)
                continue;
            const area = (_a = this.world.locations[loc.id]) === null || _a === void 0 ? void 0 : _a.areas[Symbol.iterator]().next().value;
            if (area == null)
                continue;
            const option = document.createElement('option');
            option.textContent = `${hex(loc.id)} ${loc.name}`;
            option.value = String(area.id);
            select.appendChild(option);
        }
        select.addEventListener('change', () => {
            this.renderArea(Number(select.value));
        });
        this.element.appendChild(select);
        this.area = this.world.areas[index];
        const info = document.createElement('pre');
        info.textContent = `Area ${index}
Locations: ${this.area.locations.size}
Tiles: ${this.area.tiles.size}
Terrain: ${Terrain.label(this.area.terrain, this.rom)}
Checks:
  ${[...new Set(this.area.checks.map(([flag, req]) => `${flag.debug}: ${debugLabel(req, this.rom)}`))]
            .join('\n  ')}
Routes:
  ${debugLabel(this.area.routes, this.rom).split(' | ').join('\n  ')
            .replace(/[()]/g, '')}`;
        this.element.appendChild(info);
        for (const l of this.area.locations) {
            const location = this.rom.locations[l];
            const title = document.createElement('h2');
            title.textContent = location.name;
            this.element.appendChild(title);
            this.element.appendChild(this.makeLocation(this.area, location));
        }
    }
    makeLocation(area, location) {
        const map = new LocationMap(this.rom, location.id);
        map.maxWidth = 574;
        map.overlayShade(0x55000000);
        for (const a of this.world.locations[location.id].areas) {
            if (a !== area)
                map.overlayArea(a.tiles, 0xffff0000);
        }
        map.overlayArea(area.tiles, 0xff00ffff, 0);
        map.render();
        return map.element;
    }
}
//# sourceMappingURL=data:application/json;base64,