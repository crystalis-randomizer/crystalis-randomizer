import { Location } from '../rom/location.js';
export function compressMapData(rom) {
    if (rom.compressedMapData)
        return;
    rom.compressedMapData = true;
    for (let i = 0; i < 3; i++) {
        rom.metascreens.renumber(0x100 | i, 0x140 | i);
        delete rom.screens[0x100 | i];
    }
}
export function moveScreensIntoExpandedRom(rom) {
    if (!rom.compressedMapData)
        throw new Error(`Must compress first`);
    const { grass, town, cave, dolphinCave, pyramid, river, sea, lime, mountain, shrine, desert, mountainRiver, swamp, house, fortress, labyrinth, iceCave, tower, } = rom.metatilesets;
    rom.moveScreens([swamp], 4);
    rom.moveScreens([house], 4);
    rom.moveScreens([town], 4);
    rom.moveScreens([lime], 4);
    rom.moveScreens([shrine], 4);
    rom.moveScreens([tower], 4);
    rom.moveScreens([mountain, mountainRiver], 4);
    rom.moveScreens([cave, pyramid, fortress, labyrinth, iceCave], 5);
    const [] = [sea, dolphinCave, grass, river, desert];
}
const [] = [Location];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHJlc3NtYXBkYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3MvY29tcHJlc3NtYXBkYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QyxNQUFNLFVBQVUsZUFBZSxDQUFDLEdBQVE7SUFDdEMsSUFBSSxHQUFHLENBQUMsaUJBQWlCO1FBQUUsT0FBTztJQUNsQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0lBWTdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFFMUIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0MsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztLQUMvQjtBQVNILENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsR0FBUTtJQUNqRCxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQjtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUNuRSxNQUFNLEVBQ0osS0FBSyxFQUNMLElBQUksRUFDSixJQUFJLEVBQUUsV0FBVyxFQUNqQixPQUFPLEVBQ1AsS0FBSyxFQUNMLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUNuQixNQUFNLEVBQ04sTUFBTSxFQUFFLGFBQWEsRUFDckIsS0FBSyxFQUFFLEtBQUssRUFDWixRQUFRLEVBQUUsU0FBUyxFQUNuQixPQUFPLEVBQ1AsS0FBSyxHQUNOLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQztJQUlyQixHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzQixHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0IsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdCLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUVELE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJy4uL3JvbS9sb2NhdGlvbi5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wcmVzc01hcERhdGEocm9tOiBSb20pIHtcbiAgaWYgKHJvbS5jb21wcmVzc2VkTWFwRGF0YSkgcmV0dXJuO1xuICByb20uY29tcHJlc3NlZE1hcERhdGEgPSB0cnVlO1xuICAvLyBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIHJvbS5sb2NhdGlvbnMpIHtcbiAgLy8gICBpZiAobG9jYXRpb24uZXh0ZW5kZWQpIGxvY2F0aW9uLmV4dGVuZGVkID0gNztcbiAgLy8gfVxuICAvLyBSZWFycmFuZ2UgdGhlIHNjcmVlbnMgLSByb20uc2NyZWVucyBpcyBub3cgYSBzcGFyc2UgYXJyYXkuXG4gIC8vIHJvbS5zY3JlZW5zWzB4YTAwXSA9IHJvbS5zY3JlZW5zWzB4MTAwXTtcbiAgLy8gcm9tLnNjcmVlbnNbMHhhMDFdID0gcm9tLnNjcmVlbnNbMHgxMDFdO1xuICAvLyByb20uc2NyZWVuc1sweGEwMl0gPSByb20uc2NyZWVuc1sweDEwMl07XG4gIC8vIGRlbGV0ZSByb20uc2NyZWVuc1sweDEwMF07XG4gIC8vIGRlbGV0ZSByb20uc2NyZWVuc1sweDEwMV07XG4gIC8vIGRlbGV0ZSByb20uc2NyZWVuc1sweDEwMl07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAvL3RoaXMuc2NyZWVuc1sweGEwMCB8IGldID0gdGhpcy5zY3JlZW5zWzB4MTAwIHwgaV07XG4gICAgcm9tLm1ldGFzY3JlZW5zLnJlbnVtYmVyKDB4MTAwIHwgaSwgMHgxNDAgfCBpKTtcbiAgICBkZWxldGUgcm9tLnNjcmVlbnNbMHgxMDAgfCBpXTtcbiAgfVxuXG4gIC8vIFRPRE8gLSBmaW5kIGFsbCByZWZzIHRvIFwiLmV4dGVuZGVkXCIgaW4gdGhlIHNvdXJjZSBjb2RlIGFuZFxuICAvLyAgICAgICAgdXBkYXRlIHdpdGggYSBtb3JlIGFjY3VyYXRlIGFwcHJvYWNoXG4gIC8vIFRPRE8gLSBmaW5kIGFsbCByZWZzIHRvIFwiLnNjcmVlbnNcIiBpbiB0aGUgc291cmNlIGNvZGUgYW5kXG4gIC8vICAgICAgICBtYWtlIHN1cmUgdGhleSBjYW4gaGFuZGxlIHNwYXJzZSBhcnJheXNcbiAgLy8gVE9ETyAtIHVwZGF0ZSBsb2NhdGlvbi53cml0ZVxuICAvLyBUT0RPIC0gdXBkYXRlIHNjcmVlbnMud3JpdGVcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZVNjcmVlbnNJbnRvRXhwYW5kZWRSb20ocm9tOiBSb20pIHtcbiAgaWYgKCFyb20uY29tcHJlc3NlZE1hcERhdGEpIHRocm93IG5ldyBFcnJvcihgTXVzdCBjb21wcmVzcyBmaXJzdGApO1xuICBjb25zdCB7XG4gICAgZ3Jhc3MsIC8vIDgwXG4gICAgdG93biwgLy8gODRcbiAgICBjYXZlLCBkb2xwaGluQ2F2ZSwgLy8gODhcbiAgICBweXJhbWlkLCAvLyA4Y1xuICAgIHJpdmVyLCAvLyA5MFxuICAgIHNlYSwgbGltZSwgbW91bnRhaW4sIC8vIDk0XG4gICAgc2hyaW5lLCAvLyA5OFxuICAgIGRlc2VydCwgbW91bnRhaW5SaXZlciwgLy8gOWNcbiAgICBzd2FtcCwgaG91c2UsIC8vIGEwXG4gICAgZm9ydHJlc3MsIGxhYnlyaW50aCwgLy8gYTRcbiAgICBpY2VDYXZlLCAvLyBhOFxuICAgIHRvd2VyLCAvLyBhY1xuICB9ID0gcm9tLm1ldGF0aWxlc2V0cztcblxuICAvLyBUT0RPIC0gc3BsaXQgdXAgdGhlIHNoYXJlZCB0b3duIHNjcmVlbnNcblxuICByb20ubW92ZVNjcmVlbnMoW3N3YW1wXSwgNCk7XG4gIHJvbS5tb3ZlU2NyZWVucyhbaG91c2VdLCA0KTtcbiAgcm9tLm1vdmVTY3JlZW5zKFt0b3duXSwgNCk7XG4gIHJvbS5tb3ZlU2NyZWVucyhbbGltZV0sIDQpO1xuICByb20ubW92ZVNjcmVlbnMoW3NocmluZV0sIDQpO1xuICByb20ubW92ZVNjcmVlbnMoW3Rvd2VyXSwgNCk7XG4gIHJvbS5tb3ZlU2NyZWVucyhbbW91bnRhaW4sIG1vdW50YWluUml2ZXJdLCA0KTtcbiAgcm9tLm1vdmVTY3JlZW5zKFtjYXZlLCBweXJhbWlkLCBmb3J0cmVzcywgbGFieXJpbnRoLCBpY2VDYXZlXSwgNSk7XG4gIGNvbnN0IFtdID0gW3NlYSwgZG9scGhpbkNhdmUsIGdyYXNzLCByaXZlciwgZGVzZXJ0XTtcbn1cblxuY29uc3QgW10gPSBbTG9jYXRpb25dO1xuIl19