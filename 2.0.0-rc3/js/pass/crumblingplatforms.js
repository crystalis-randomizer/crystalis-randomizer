export function crumblingPlatforms(rom, random) {
    const v = 0x7e;
    const cv = 0x9f;
    const h = 0x7f;
    const ch = 0x8d;
    const cvObj = rom.objects[cv];
    const hObj = rom.objects[h];
    const chObj = rom.objects[ch];
    chObj.used = true;
    chObj.name = 'Crumbling Horizontal Platform';
    chObj.sfx = cvObj.sfx;
    cvObj.data.forEach((x, i) => chObj.data[i] = x);
    chObj.data[3] = hObj.data[3];
    const hset = new Set([h - 0x50, ch - 0x50]);
    const vset = new Set([v - 0x50, cv - 0x50]);
    for (const location of rom.locations) {
        if (!location.pits.length)
            continue;
        const crumble = random.nextInt(3) < 1;
        for (const spawn of location.spawns) {
            if (!spawn.isMonster())
                continue;
            if (vset.has(spawn.id))
                spawn.id = (crumble ? cv : v) - 0x50;
            if (hset.has(spawn.id))
                spawn.id = (crumble ? ch : h) - 0x50;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1bWJsaW5ncGxhdGZvcm1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3MvY3J1bWJsaW5ncGxhdGZvcm1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxHQUFRLEVBQUUsTUFBYztJQUV6RCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDZixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDaEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ2YsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBR2hCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLEtBQUssQ0FBQyxJQUFJLEdBQUcsK0JBQStCLENBQUM7SUFDN0MsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3RCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFN0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU1QyxLQUFLLE1BQU0sUUFBUSxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7UUFFcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLFNBQVM7UUFDcEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO2dCQUFFLFNBQVM7WUFDakMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDN0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDOUQ7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JhbmRvbX0gZnJvbSAnLi4vcmFuZG9tLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3J1bWJsaW5nUGxhdGZvcm1zKHJvbTogUm9tLCByYW5kb206IFJhbmRvbSkge1xuICAvLyBUT0RPIC0gYXNzZXJ0IDhkIGlzIHVudXNlZD8gYXNrIHJvbS5vYmplY3RzIGZvciB0aGUgbmV4dCB1bnVzZWQgb25lP1xuICBjb25zdCB2ID0gMHg3ZTtcbiAgY29uc3QgY3YgPSAweDlmO1xuICBjb25zdCBoID0gMHg3ZjtcbiAgY29uc3QgY2ggPSAweDhkO1xuICBcbiAgLy8gRmlyc3Qgc3RlcDogZ2V0IGEgZnJlZSBvYmplY3QgYW5kIGNvcHkgOWYgdG8gaXQuXG4gIGNvbnN0IGN2T2JqID0gcm9tLm9iamVjdHNbY3ZdO1xuICBjb25zdCBoT2JqID0gcm9tLm9iamVjdHNbaF07XG4gIGNvbnN0IGNoT2JqID0gcm9tLm9iamVjdHNbY2hdO1xuICBjaE9iai51c2VkID0gdHJ1ZTtcbiAgY2hPYmoubmFtZSA9ICdDcnVtYmxpbmcgSG9yaXpvbnRhbCBQbGF0Zm9ybSc7XG4gIGNoT2JqLnNmeCA9IGN2T2JqLnNmeDtcbiAgY3ZPYmouZGF0YS5mb3JFYWNoKCh4LCBpKSA9PiBjaE9iai5kYXRhW2ldID0geCk7XG4gIGNoT2JqLmRhdGFbM10gPSBoT2JqLmRhdGFbM107IC8vIHNldCBkaXJlY3Rpb25cblxuICBjb25zdCBoc2V0ID0gbmV3IFNldChbaCAtIDB4NTAsIGNoIC0gMHg1MF0pO1xuICBjb25zdCB2c2V0ID0gbmV3IFNldChbdiAtIDB4NTAsIGN2IC0gMHg1MF0pO1xuXG4gIGZvciAoY29uc3QgbG9jYXRpb24gb2Ygcm9tLmxvY2F0aW9ucykge1xuICAgIC8vIE1ha2UgYWxsIHBsYXRmb3JtcyBpbiBhIGdpdmVuIGxvY2F0aW9uIGNvbnNpc3RlbnQgd2l0aCBlYWNoIG90aGVyXG4gICAgaWYgKCFsb2NhdGlvbi5waXRzLmxlbmd0aCkgY29udGludWU7XG4gICAgY29uc3QgY3J1bWJsZSA9IHJhbmRvbS5uZXh0SW50KDMpIDwgMTsgLy8gMSBpbiAzIGNoYW5jZSBvZiBjcnVtYmxpbmdcbiAgICBmb3IgKGNvbnN0IHNwYXduIG9mIGxvY2F0aW9uLnNwYXducykge1xuICAgICAgaWYgKCFzcGF3bi5pc01vbnN0ZXIoKSkgY29udGludWU7XG4gICAgICBpZiAodnNldC5oYXMoc3Bhd24uaWQpKSBzcGF3bi5pZCA9IChjcnVtYmxlID8gY3YgOiB2KSAtIDB4NTA7XG4gICAgICBpZiAoaHNldC5oYXMoc3Bhd24uaWQpKSBzcGF3bi5pZCA9IChjcnVtYmxlID8gY2ggOiBoKSAtIDB4NTA7XG4gICAgfVxuICB9XG59XG4iXX0=