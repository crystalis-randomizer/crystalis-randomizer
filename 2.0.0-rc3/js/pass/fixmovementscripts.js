import { Entrance } from '../rom/location.js';
import { seq } from '../rom/util.js';
export function fixMovementScripts(rom) {
    fixAkahanaExits(rom);
    fixDolphinSpawns(rom);
}
function fixAkahanaExits(_rom) {
}
function fixDolphinSpawns(rom) {
    const { locations: { AngrySea, }, npcs: { Dolphin, }, metascreens: { beachCabinEntrance, beachCave, beachExitN, boatChannel, }, } = rom;
    Dolphin.spawnScripts = [];
    const free = new Set(seq(16, i => i));
    for (let i = 0; i < AngrySea.entrances.length; i++) {
        let entrance = AngrySea.entrances[i];
        let meta = AngrySea.meta.get(entrance.screen);
        let spawn;
        if (meta === boatChannel) {
            if (AngrySea.meta.get(entrance.screen - 1) !== beachCabinEntrance) {
                throw new Error(`Bad boatChannel entrance ${entrance}`);
            }
            entrance = Entrance.of({ screen: entrance.screen - 1, tile: 0 });
            meta = beachCabinEntrance;
        }
        if (meta === beachCabinEntrance) {
            spawn = {
                entrance: Entrance.of({ screen: entrance.screen - 17, coord: 0xb8e8 }),
                movement: 5,
            };
        }
        else if (meta === beachCave) {
            spawn = {
                entrance: Entrance.of({ screen: entrance.screen, coord: 0xe808 }),
                movement: 8,
            };
        }
        else if (meta === beachExitN) {
            spawn = {
                entrance: Entrance.of({ screen: entrance.screen, coord: 0xd8f8 }),
                movement: 9,
            };
        }
        if (spawn) {
            free.delete(i);
            Dolphin.spawnScripts[i] = spawn;
        }
    }
    [Dolphin.channelSpawn, Dolphin.evilSpiritIslandSpawn] = free;
    Dolphin.spawnScripts[Dolphin.channelSpawn] =
        { entrance: Entrance.of({ x: 0x1a8, y: 0x078 }), movement: 6 };
    Dolphin.spawnScripts[Dolphin.evilSpiritIslandSpawn] =
        { entrance: Entrance.of({ x: 0x1a8, y: 0x078 }), movement: 7 };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4bW92ZW1lbnRzY3JpcHRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3MvZml4bW92ZW1lbnRzY3JpcHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkMsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEdBQVE7SUFDekMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFHRCxTQUFTLGVBQWUsQ0FBQyxJQUFTO0FBYWxDLENBQUM7QUFHRCxTQUFTLGdCQUFnQixDQUFDLEdBQVE7SUFDaEMsTUFBTSxFQUNKLFNBQVMsRUFBRSxFQUNULFFBQVEsR0FDVCxFQUNELElBQUksRUFBRSxFQUVKLE9BQU8sR0FFUixFQUNELFdBQVcsRUFBRSxFQUNYLGtCQUFrQixFQUNsQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsR0FDWixHQUNGLEdBQUcsR0FBRyxDQUFDO0lBRVIsT0FBTyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQVMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2xELElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLElBQUksS0FBbUMsQ0FBQztRQUN4QyxJQUFJLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDeEIsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLGtCQUFrQixFQUFFO2dCQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3pEO1lBQ0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7WUFDL0QsSUFBSSxHQUFHLGtCQUFrQixDQUFDO1NBQzNCO1FBQ0QsSUFBSSxJQUFJLEtBQUssa0JBQWtCLEVBQUU7WUFDL0IsS0FBSyxHQUFHO2dCQUNOLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQztnQkFDcEUsUUFBUSxFQUFFLENBQUM7YUFDWixDQUFDO1NBQ0g7YUFBTSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDN0IsS0FBSyxHQUFHO2dCQUNOLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxDQUFDO2dCQUMvRCxRQUFRLEVBQUUsQ0FBQzthQUNaLENBQUM7U0FDSDthQUFNLElBQUksSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUM5QixLQUFLLEdBQUc7Z0JBQ04sUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUM7Z0JBQy9ELFFBQVEsRUFBRSxDQUFDO2FBQ1osQ0FBQztTQUNIO1FBQ0QsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDakM7S0FDRjtJQUNELENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDN0QsT0FBTyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3RDLEVBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUMsQ0FBQztJQUMvRCxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztRQUMvQyxFQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtFbnRyYW5jZX0gZnJvbSAnLi4vcm9tL2xvY2F0aW9uLmpzJztcbmltcG9ydCB7RG9scGhpblNwYXduU2NyaXB0fSBmcm9tICcuLi9yb20vbnBjLmpzJztcbmltcG9ydCB7c2VxfSBmcm9tICcuLi9yb20vdXRpbC5qcyc7XG5cbi8qKiBGaXhlcyBtb3ZlbWVudCBzY3JpcHRzIHRvIHdvcmsgYmFzZWQgb24gd2hlcmUgTlBDcyBlbmRlZCB1cC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhNb3ZlbWVudFNjcmlwdHMocm9tOiBSb20pIHtcbiAgZml4QWthaGFuYUV4aXRzKHJvbSk7XG4gIGZpeERvbHBoaW5TcGF3bnMocm9tKTtcbn1cblxuXG5mdW5jdGlvbiBmaXhBa2FoYW5hRXhpdHMoX3JvbTogUm9tKSB7XG4gIC8vIGNvbnN0IHtcbiAgLy8gICBucGNzOiB7XG4gIC8vICAgICBBa2FoYW5hSW5CcnlubWFlciwgLy8gbm90IHJlYWxseSBuZWVkZWQgdW5sZXNzIHdlIG1vdmUgTlBDcy5cbiAgLy8gICAgIFN0b25lZEFrYWhhbmEsXG4gIC8vICAgfSxcbiAgLy8gfSA9IHJvbTtcblxuICAvLyBmb3IgKGNvbnN0IGxvY2F0aW9uIG9mIHJvbS5sb2NhdGlvbnMpIHtcbiAgLy8gICBmb3IgKGNvbnN0IHNwYXduIG9mIGxvY2F0aW9uLnNwYXducykge1xuICAvLyAgICAgLy8gVE9ETyAtIGNoZWNrIGZvciBha2FoYW5hLCBsb29rIGF0IGxvY2F0aW9uLm1ldGEsIGV0Yy5cbiAgLy8gICB9XG4gIC8vIH1cbn1cblxuXG5mdW5jdGlvbiBmaXhEb2xwaGluU3Bhd25zKHJvbTogUm9tKSB7XG4gIGNvbnN0IHtcbiAgICBsb2NhdGlvbnM6IHtcbiAgICAgIEFuZ3J5U2VhLFxuICAgIH0sXG4gICAgbnBjczoge1xuICAgICAgLy9Ba2FoYW5hSW5CcnlubWFlciwgLy8gbm90IHJlYWxseSBuZWVkZWQgdW5sZXNzIHdlIG1vdmUgTlBDcy5cbiAgICAgIERvbHBoaW4sXG4gICAgICAvL1N0b25lZEFrYWhhbmEsXG4gICAgfSxcbiAgICBtZXRhc2NyZWVuczoge1xuICAgICAgYmVhY2hDYWJpbkVudHJhbmNlLCAvLyBjYWJpblxuICAgICAgYmVhY2hDYXZlLCAvLyBqb2VsXG4gICAgICBiZWFjaEV4aXROLCAvLyBzd2FuXG4gICAgICBib2F0Q2hhbm5lbCwgLy8gYm9hdFxuICAgIH0sXG4gIH0gPSByb207XG5cbiAgRG9scGhpbi5zcGF3blNjcmlwdHMgPSBbXTtcbiAgY29uc3QgZnJlZSA9IG5ldyBTZXQ8bnVtYmVyPihzZXEoMTYsIGkgPT4gaSkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IEFuZ3J5U2VhLmVudHJhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBlbnRyYW5jZSA9IEFuZ3J5U2VhLmVudHJhbmNlc1tpXTtcbiAgICBsZXQgbWV0YSA9IEFuZ3J5U2VhLm1ldGEuZ2V0KGVudHJhbmNlLnNjcmVlbik7XG4gICAgbGV0IHNwYXduOiBEb2xwaGluU3Bhd25TY3JpcHR8dW5kZWZpbmVkO1xuICAgIGlmIChtZXRhID09PSBib2F0Q2hhbm5lbCkge1xuICAgICAgaWYgKEFuZ3J5U2VhLm1ldGEuZ2V0KGVudHJhbmNlLnNjcmVlbiAtIDEpICE9PSBiZWFjaENhYmluRW50cmFuY2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgYm9hdENoYW5uZWwgZW50cmFuY2UgJHtlbnRyYW5jZX1gKTtcbiAgICAgIH1cbiAgICAgIGVudHJhbmNlID0gRW50cmFuY2Uub2Yoe3NjcmVlbjogZW50cmFuY2Uuc2NyZWVuIC0gMSwgdGlsZTogMH0pO1xuICAgICAgbWV0YSA9IGJlYWNoQ2FiaW5FbnRyYW5jZTtcbiAgICB9XG4gICAgaWYgKG1ldGEgPT09IGJlYWNoQ2FiaW5FbnRyYW5jZSkge1xuICAgICAgc3Bhd24gPSB7XG4gICAgICAgIGVudHJhbmNlOiBFbnRyYW5jZS5vZih7c2NyZWVuOiBlbnRyYW5jZS5zY3JlZW4gLSAxNywgY29vcmQ6IDB4YjhlOH0pLFxuICAgICAgICBtb3ZlbWVudDogNSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChtZXRhID09PSBiZWFjaENhdmUpIHtcbiAgICAgIHNwYXduID0ge1xuICAgICAgICBlbnRyYW5jZTogRW50cmFuY2Uub2Yoe3NjcmVlbjogZW50cmFuY2Uuc2NyZWVuLCBjb29yZDogMHhlODA4fSksXG4gICAgICAgIG1vdmVtZW50OiA4LFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKG1ldGEgPT09IGJlYWNoRXhpdE4pIHtcbiAgICAgIHNwYXduID0ge1xuICAgICAgICBlbnRyYW5jZTogRW50cmFuY2Uub2Yoe3NjcmVlbjogZW50cmFuY2Uuc2NyZWVuLCBjb29yZDogMHhkOGY4fSksXG4gICAgICAgIG1vdmVtZW50OiA5LFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHNwYXduKSB7XG4gICAgICBmcmVlLmRlbGV0ZShpKTtcbiAgICAgIERvbHBoaW4uc3Bhd25TY3JpcHRzW2ldID0gc3Bhd247XG4gICAgfVxuICB9XG4gIFtEb2xwaGluLmNoYW5uZWxTcGF3biwgRG9scGhpbi5ldmlsU3Bpcml0SXNsYW5kU3Bhd25dID0gZnJlZTtcbiAgRG9scGhpbi5zcGF3blNjcmlwdHNbRG9scGhpbi5jaGFubmVsU3Bhd25dID1cbiAgICAgIHtlbnRyYW5jZTogRW50cmFuY2Uub2Yoe3g6IDB4MWE4LCB5OiAweDA3OH0pLCBtb3ZlbWVudDogNn07XG4gIERvbHBoaW4uc3Bhd25TY3JpcHRzW0RvbHBoaW4uZXZpbFNwaXJpdElzbGFuZFNwYXduXSA9XG4gICAgICB7ZW50cmFuY2U6IEVudHJhbmNlLm9mKHt4OiAweDFhOCwgeTogMHgwNzh9KSwgbW92ZW1lbnQ6IDd9O1xufVxuIl19