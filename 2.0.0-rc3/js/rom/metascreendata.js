import { seq } from './util.js';
export const featureMask = {
    'empty': 0x01,
    'pit': 0x02,
    'arena': 0x04,
    'spikes': 0x08,
    'wide': 0x10,
    'river': 0x20,
    'bridge': 0x40,
    'wall': 0x80,
    'ramp': 256,
    'overpass': 512,
    'underpass': 1024,
    'whirlpool': 2048,
    'deadend': 4096,
    'stair:up': 65536,
    'stair:down': 131072,
    'portoa1': 117440512,
    'portoa2': 184549376,
    'portoa3': 218103808,
    'lake': 234881024,
    'lighthouse': 318767104,
    'cabin': 352321536,
    'windmill': 369098752,
    'altar': 419430400,
    'pyramid': 436207616,
    'crypt': 469762048,
    'manual': 1073741824,
    'consolidate': 2147483648,
};
export function icon(arr) {
    if (arr.length != 1)
        throw new Error('Bad icon input');
    const str = arr[0];
    const lines = str.split('\n');
    const full = lines.slice(1).map(l => l.replace(/^\s*\||\|\s*$/g, ''));
    const short = /\S/.test(lines[0]) ? lines[0][0] : full[1][1];
    return { short, full: [full[0], full[1], full[2]] };
}
export function readScreen(spec, ...replacements) {
    const s = spec.split(/\s+/g);
    if (!s[0])
        s.shift();
    if (!s[s.length - 1])
        s.pop();
    if (s.length !== 240)
        throw new Error(`Bad screen definition: ${s.length}`);
    const map = new Map(replacements);
    return Uint8Array.from(s, (x, i) => {
        const repl = map.get(x);
        if (typeof repl === 'number')
            return repl;
        if (repl)
            return repl.screen.tiles[i];
        return parseInt(x, 16);
    });
}
export function upStair(tile, width = 2) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    if (width === 1) {
        const dy = y === 0xe ? 0x2800 : 0x1800;
        const entrance = ((y << 12) + dy) | ((x << 4) + 0x0008);
        return {
            type: 'stair:up',
            dir: 2,
            entrance,
            exits: [tile],
        };
    }
    const entrance = y << 12 | ((x << 4) + (width << 3));
    return {
        type: 'stair:up',
        dir: 0,
        entrance,
        exits: seq(width, i => tile - 0x10 + i),
    };
}
export function downStair(tile, width = 2) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    if (width === 1) {
        const entrance = ((y << 12) - 0x0800) | ((x << 4) + 0x0008);
        return {
            type: 'stair:down',
            dir: 2,
            entrance,
            exits: [tile],
            allowedExits: [tile + 16, tile - 16],
        };
    }
    const entrance = y << 12 | 0x0f00 | ((x << 4) + (width << 3));
    return {
        type: 'stair:down',
        dir: 2,
        entrance,
        exits: seq(width, i => tile + 0x10 + i),
        allowedExits: [...seq(width, i => tile + 0x20 + i),
            ...seq(width, i => tile + i)],
    };
}
export function cave(tile, type = 'cave') {
    return { ...upStair(tile + 16), type };
}
export function door(tile, type = 'door') {
    return { ...upStair(tile, 1), type };
}
export function waterfallCave(tile) {
    const y = tile >>> 4;
    const x = tile & 0xf;
    return {
        type: 'cave',
        dir: 0,
        entrance: y << 12 | x << 4 | 0xf,
        exits: [tile - 0xf, tile + 1],
    };
}
export function topEdge({ left = 7, width = 2, top = 2, manual = false } = {}) {
    return {
        type: 'edge:top',
        manual,
        dir: 0,
        entrance: ((top + 1) << 12) | ((left << 4) + (width << 3)),
        exits: seq(width, i => (top << 4) | (i + left)),
    };
}
export function bottomEdge({ left = 7, width = 2, shift = 0, type = 'edge:bottom', manual = false } = {}) {
    return {
        type, manual,
        dir: 2,
        entrance: 57088 | ((left << 4) + (width << 3) + 16 * shift),
        exits: seq(width, i => 0xe0 | (i + left)),
    };
}
export function bottomEdgeHouse({ left = 7, width = 2, shift = 0 } = {}) {
    return {
        type: 'edge:bottom',
        dir: 2,
        entrance: 44800 | ((left << 4) + (width << 3) + 16 * shift),
        exits: seq(width, i => 0xb0 | (i + left)),
    };
}
export function leftEdge({ top = 7, height = 2, shift = 0 } = {}) {
    return {
        type: 'edge:left',
        dir: 1,
        entrance: ((top << 12) + ((16 * shift) << 8) + (height << 11)) | 0x10,
        exits: seq(height, i => (i + top) << 4),
    };
}
export function rightEdge({ top = 7, height = 2, shift = 0 } = {}) {
    return {
        type: 'edge:right',
        dir: 3,
        entrance: ((top << 12) + ((16 * shift) << 8) + (height << 11)) | 0xef,
        exits: seq(height, i => (i + top) << 4 | 0xf),
    };
}
export function seamlessUp(tile, width = 2) {
    return {
        type: 'seamless:up',
        dir: 0,
        get entrance() { throw new Error('does not make sense'); },
        exits: seq(width, i => (tile + i)),
    };
}
export function seamlessDown(tile, width = 2) {
    return {
        type: 'seamless:down',
        dir: 2,
        get entrance() { throw new Error('does not make sense'); },
        exits: seq(width, i => (tile + i)),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXNjcmVlbmRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcm9tL21ldGFzY3JlZW5kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxXQUFXLENBQUM7QUF1TTlCLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUV6QixPQUFPLEVBQUUsSUFBSTtJQUNiLEtBQUssRUFBRSxJQUFJO0lBQ1gsT0FBTyxFQUFFLElBQUk7SUFDYixRQUFRLEVBQUUsSUFBSTtJQUNkLE1BQU0sRUFBRSxJQUFJO0lBQ1osT0FBTyxFQUFFLElBQUk7SUFDYixRQUFRLEVBQUUsSUFBSTtJQUNkLE1BQU0sRUFBRSxJQUFJO0lBQ1osTUFBTSxFQUFFLEdBQU87SUFDZixVQUFVLEVBQUUsR0FBTztJQUNuQixXQUFXLEVBQUUsSUFBTztJQUNwQixXQUFXLEVBQUUsSUFBTztJQUNwQixTQUFTLEVBQUUsSUFBTztJQUlsQixVQUFVLEVBQUUsS0FBVTtJQUN0QixZQUFZLEVBQUUsTUFBVTtJQUt4QixTQUFTLEVBQUUsU0FBYTtJQUN4QixTQUFTLEVBQUUsU0FBYTtJQUN4QixTQUFTLEVBQUUsU0FBYTtJQUN4QixNQUFNLEVBQUUsU0FBYTtJQUNyQixZQUFZLEVBQUUsU0FBYTtJQUMzQixPQUFPLEVBQUUsU0FBYTtJQUN0QixVQUFVLEVBQUUsU0FBYTtJQUN6QixPQUFPLEVBQUUsU0FBYTtJQUN0QixTQUFTLEVBQUUsU0FBYTtJQUN4QixPQUFPLEVBQUUsU0FBYTtJQUd0QixRQUFRLEVBQUUsVUFBYTtJQUV2QixhQUFhLEVBQUUsVUFBYTtDQUNwQixDQUFDO0FBY1gsTUFBTSxVQUFVLElBQUksQ0FBQyxHQUF5QjtJQUM1QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQztRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2RCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0RSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQ1osR0FBRyxZQUEyQztJQUN2RSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDOUIsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLEdBQUc7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM1RSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDMUMsSUFBSSxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBeUJELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBWSxFQUFFLEtBQUssR0FBRyxDQUFDO0lBRzdDLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNyQixJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFHZixNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN2QyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDeEQsT0FBTztZQUNMLElBQUksRUFBRSxVQUFVO1lBQ2hCLEdBQUcsRUFBRSxDQUFDO1lBQ04sUUFBUTtZQUNSLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQztTQUVkLENBQUM7S0FDSDtJQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMs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LEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSTtRQUNyRSxLQUFLLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDOUMsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLFVBQVUsVUFBVSxDQUFDLElBQVksRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNoRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLGFBQWE7UUFDbkIsR0FBRyxFQUFFLENBQUM7UUFDTixJQUFJLFFBQVEsS0FBYSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbkMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVksRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNsRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLGVBQWU7UUFDckIsR0FBRyxFQUFFLENBQUM7UUFDTixJQUFJLFFBQVEsS0FBYSxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDbkMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01ldGFzY3JlZW59IGZyb20gJy4vbWV0YXNjcmVlbi5qcyc7XG5pbXBvcnQge1NjcmVlbkZpeH0gZnJvbSAnLi9zY3JlZW5maXguanMnO1xuaW1wb3J0IHtNZXRhdGlsZXNldHN9IGZyb20gJy4vbWV0YXRpbGVzZXQuanMnO1xuaW1wb3J0IHtzZXF9IGZyb20gJy4vdXRpbC5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcblxuLyoqXG4gKiBNZXRhZGF0YSBhYm91dCB0aGUgbWV0YXNjcmVlbi4gIEJlY2F1c2UgdGhlc2UgYXJlIGNyZWF0ZWQgcGVyIE1ldGFzY3JlZW5zXG4gKiBpbnN0YW5jZSwgdGhleSBjYW4gYWN0dWFsbHkgYmUgbXV0YXRlZCBhcyBuZWVkZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YXNjcmVlbkRhdGEge1xuICAvKipcbiAgICogSWYgdGhlIHNjcmVlbiBleGlzdHMgb3IgaXMgc2hhcmVkIHdpdGggYSBzY3JlZW4gaW4gdGhlIHZhbmlsbGEgcm9tLCB0aGVuXG4gICAqIHRoaXMgaXMgdGhlIHNjcmVlbiBJRCAoMC4uMTAyKS4gIE90aGVyd2lzZSwgaXQgaXMgYSBzcGFyc2UgbmVnYXRpdmUgbnVtYmVyXG4gICAqIHNoYXJlZCBieSBhbGwgdGhlIHNjcmVlbnMgdGhhdCB3aWxsIHVsdGltYXRlbHkgaGF2ZSB0aGUgc2FtZSBJRC5cbiAgICovXG4gIHJlYWRvbmx5IGlkOiBudW1iZXI7XG4gIC8qKiBSZXByZXNlbnRhdGl2ZSBpY29uIGZvciBkZWJ1ZyBwdXJwb3Nlcy4gKi9cbiAgaWNvbj86IEljb247XG4gIC8qKiBMaXN0IG9mIHRpbGVzZXRzIHRoaXMgc2NyZWVuIGFwcGVhcnMgaW4uICovXG4gIHRpbGVzZXRzOiB7W25hbWUgaW4ga2V5b2YgTWV0YXRpbGVzZXRzXT86IHtcbiAgICAvKiogRml4ZXMgbmVlZGVkIGJlZm9yZSBzY3JlZW4gaXMgdXNhYmxlIGluIHRoZSB0aWxlc2V0LiAqL1xuICAgIHJlcXVpcmVzPzogU2NyZWVuRml4W10sXG4gICAgLyoqID8/PyAqL1xuICAgIHR5cGU/OiBzdHJpbmcsIC8vIGZvciB0b3duP1xuICAgIC8qKiBMYWJ5cmludGggZGF0YS4gKi9cbiAgICBhZGRXYWxsPzogbnVtYmVyW10sXG4gICAgcmVtb3ZlV2FsbD86IG51bWJlcixcbiAgfX07XG4gIC8qKiBMaXN0IG9mIGZlYXR1cmVzIHByZXNlbnQuICovXG4gIGZlYXR1cmU/OiBGZWF0dXJlW107XG4gIC8qKiBMaXN0IG9mIGV4aXQgc3BlY3MuICovXG4gIGV4aXRzPzogcmVhZG9ubHkgQ29ubmVjdGlvbltdO1xuICAvKipcbiAgICogU3RyaW5nIChsZW5ndGggNCkgb2YgZWRnZSB0eXBlcyBmb3IgbWF0Y2hpbmc6IHVwLCBsZWZ0LCBkb3duLCByaWdodC5cbiAgICogVGhlIGZvbGxvd2luZyBjaGFyYWN0ZXJzIGFyZSB1c2VkIGluIHZhcmlvdXMgdGlsZXNldHM6XG4gICAqIEdlbmVyYWw6XG4gICAqICAgKiBibGFuayA9IGJsb2NrZWRcbiAgICogICAqIHN0YXIgPSBzcGVjaWFsIGNhc2VcbiAgICogT3ZlcndvcmxkOlxuICAgKiAgICogJ28nID0gb3BlblxuICAgKiAgICogJzwnLCAnPicsICdeJywgJ3YnID0gb3BlbiBvbiB0aGUgKGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSkuXG4gICAqICAgKiAnbCcgPSBsb25nIGdyYXNzXG4gICAqICAgKiAncycgPSBzaG9ydCBncmFzc1xuICAgKiAgICogJ3InID0gcml2ZXJcbiAgICogICAqICduJyA9IG5hcnJvdyBlZGdlIGV4aXQsIGNlbnRlcmVkXG4gICAqICAgKiAnYicgPSBib2F0XG4gICAqICAgKiAnMScsICcyJywgJzMnID0gb25lLW9mZiBzcGVjaWFsIGNhc2VzIGFyb3VuZCBwb3J0b2Evb2FzaXNcbiAgICogVG93ZXI6XG4gICAqICAgKiAncycgPSBzdGFpcnNcbiAgICogICAqICd0JyA9IGNvcnJpZG9yXG4gICAqIENhdmU6XG4gICAqICAgKiAnYycgPSBjb3JyaWRvclxuICAgKiAgICogJ3cnID0gd2lkZVxuICAgKiAgICogJ24nID0gbmFycm93XG4gICAqICAgKiAncicgPSByaXZlclxuICAgKiAgICogJ2InID0gd3Jvbmcgc2lkZSBvZiBicmlkZ2VcbiAgICogICAqICdzJyA9IHNwaWtlc1xuICAgKiBTd2FtcDpcbiAgICogICAqICdzJyA9IHBhc3NhZ2VcbiAgICogTW91bnRhaW46XG4gICAqICAgKiAncCcgPSBwYXRoXG4gICAqICAgKiAncycgPSBzbG9wZVxuICAgKiAgICogJ3cnID0gd2F0ZXJmYWxsXG4gICAqICAgKiAnbCcgPSBsYWRkZXJcbiAgICovXG4gIGVkZ2VzPzogc3RyaW5nO1xuICAvKipcbiAgICogU2ltaWxhciB0byBlZGdlcyAobWF5IHN1cGVyY2VkZT8pLCBidXQgOSBpbnN0ZWFkIG9mIDRcbiAgICogc2luY2UgaXQgaW5jbHVkZXMgY29ybmVycyBhbmQgY2VudGVyLCB3aGljaCBlYWNoIGhhdmVcbiAgICogdGhlaXIgb3duIHRoaW5nLlxuICAgKiBDYXZlOlxuICAgKiAgIGMgPSBjb3JyaWRvciwgb3JkaW5hcnkgY2VudGVyXG4gICAqICAgdyA9IHdpZGUgZWRnZSwgd2lkZSBjZW50ZXJcbiAgICogICBuID0gbmFycm93IGVkZ2VcbiAgICogICByID0gcml2ZXIgKGNlbnRlciBvZiByaXZlciB0aWxlcywgYW5kIGVkZ2VzKVxuICAgKiAgICMgPSBibG9ja2FnZSAod2FsbCwgbm9uLWJyaWRnZWQgcml2ZXIsIGV4dHJhIGJsb2NrKVxuICAgKiAgICAgICBOT1RFOiB3ZSBhZGQgd2FsbHMgYnV0IF9yZW1vdmVfIGJyaWRnZXMuLi5cbiAgICogICAgICAgTk9URTogbm8gbG9uZ2VyIHVzZWQgLSBqdXN0IGZpbGwgaW4gbm9ybWFsIG5vdy4uLlxuICAgKiAgIGIgPSBicmlkZ2UgKHdyb25nIHNpZGU/Pz8gcHJvYmFibHkgbm90Li4uKVxuICAgKiAgIHMgPSBzcGlrZXNcbiAgICogICBwID0gcGl0XG4gICAqICAgLyA9IHJhbXBcbiAgICogICBcbiAgICogT3ZlcndvcmxkOlxuICAgKiAgIG8gPSBvcGVuXG4gICAqICAgPCA9IGNhdmUgb3Igb3RoZXIgdXAgZXhpdFxuICAgKiAgID4gPSBkb3duIGV4aXQgKGkuZS4gY3J5cHQpXG4gICAqICAgeCA9IGVkZ2UgZXhpdCAobmV2ZXIgdXNlZCBpbnRlcmlvcilcbiAgICogICBsID0gbG9uZyBncmFzcy9mb3Jlc3RcbiAgICogICBnID0gc2hvcnQgZ3Jhc3NcbiAgICogICByID0gcml2ZXIgKG9yIGJyaWRnZSBpZiBpbiBjZW50ZXIgYW5kIHRoZXJlJ3MgYW4gdW5icmlkZ2VkIG9wdGlvbilcbiAgICogICAgICAgYWxzbyB1c2VkIGZvciBvYXNpcyBsYWtlXG4gICAqICAgIyA9IGJsb2NrYWdlIGluIGNlbnRlciAoZS5nLiB1bmJyaWRnZWQgcml2ZXIsIHdoaXJscG9vbClcbiAgICogICBiID0gYmVhY2ggKG9uIHNlYSlcbiAgICogICDihpMgPSBzbG9wZVxuICAgKiAgIFswLTlBLUZdID0gb2ZmLWNlbnRlciBlZGdlIGV4aXRzICh0b3A6Ni03IG9yIGxlZnQ6Ni03IGlzIGNlbnRlcmVkKVxuICAgKiAgICAgMSA9IGJyaWRnZSB0byBwb3J0b2EgMTIsIDUgPSBsZWFmL21lemFtZSBlbnRyYW5jZSAyZCxcbiAgICogICAgIDggPSBicnlubWFlciBleGl0IDFjLCBib2F0IGNoYW5uZWwgNjAsIEIgPSBsb3dlci1sZWZ0IGV4aXQgMWFcbiAgICogICAgID0+IFRPRE8gLSBjb25zaWRlciBlaXRoZXIgZGVsZXRpbmcgdGhlc2Ugb3Igc3dhcHBpbmcgZm9yIGp1c3QgJ3gnXG4gICAqICAgVyA9IHdpbmRtaWxsIChhbHNvIGEgPCBleGl0KVxuICAgKiAgIEEgPSBhbHRhclxuICAgKiAgIEwgPSBsaWdodGhvdXNlXG4gICAqICAgSCA9IGhvdXNlXG4gICAqICAgRiA9IGZvcnRyZXNzXG4gICAqICAgQyA9IGNhYmluXG4gICAqICAgUCA9IHB5cmFtaWRcbiAgICogICBZID0gY3J5cHRcbiAgICovXG4gIHRpbGU/OiBzdHJpbmd8c3RyaW5nW107XG4gIC8qKlxuICAgKiBTdHJpbmcgb2YgY29ubmVjdGVkIGFjY2VzcyBwb2ludHMgZm9yIHJvdXRpbmcsIGdyb3VwZWQgYnkgY29ubmVjdGlvbiB0eXBlLlxuICAgKiBQb2ludHMgYXJlIGhleCBkaWdpdHMgWzEyM10gZm9yIHRvcCBlZGdlLCBbNTY3XSBmb3IgbGVmdCwgWzlhYl0gZm9yIGJvdHRvbSxcbiAgICogb3IgW2RlZl0gZm9yIHJpZ2h0IGVkZ2UuICBTZXBhcmF0b3JzIGFyZSAnfCcgZm9yIGltcGFzc2libGUsICc9JyBmb3Igd2FsbCxcbiAgICogJzonIGZvciB3YXRlciAoaS5lLiBmbGlnaHQgcmVxdWlyZWQpLCBhbmQgJy0nIGZvciBicmlkZ2UuICBHZW5lcmFsbHkgb25seVxuICAgKiB0aGUgbWlkZGxlIG51bWJlciBpcyB1c2VkIGZvciBlYWNoIGVkZ2UgKDI2YWUpIGJ1dCBmb3Igcml2ZXJzIGFuZCBsYWJ5cmludGhcbiAgICogdGlsZXNldHMsIHRoZSBvdGhlciBudW1iZXJzIGFyZSB1c2VkIGFzIHdlbGwsIGNvdmVyaW5nIHRoZSBlZGdlcyBsaWtlIHNvXG4gICAqIGBgYFxuICAgKiAgICAgLjEyMy5cbiAgICogICAgIDUgICBkXG4gICAqICAgICA2ICAgZVxuICAgKiAgICAgNyAgIGZcbiAgICogICAgIC45YWIuXG4gICAqIGBgYFxuICAgKiBUaHVzIHRoZSA0IGJpdCBpbmRpY2F0ZXMgYSB2ZXJ0aWNhbCBlZGdlIGFuZCB0aGUgOCBiaXQgaW5kaWNhdGVzIHRoYXQgaXQnc1xuICAgKiB0aGUgY29ycmVzcG9uZGluZyBlZGdlIG9uIHRoZSBuZXh0IHRpbGUuXG4gICAqL1xuICBjb25uZWN0Pzogc3RyaW5nO1xuICAvKiogVGlsZSAoeXgpIHRvIHBsYWNlIHRoZSB3YWxsL2JyaWRnZSBoaXRib3gsIGlmIHByZXNlbnQuICovXG4gIHdhbGw/OiBudW1iZXI7XG4gIC8qKiBJbmZvcm1hdGlvbiBhYm91dCBhbnkgbW92aW5nIHBsYXRmb3JtIHBsYXRmb3JtLiAqL1xuICBwbGF0Zm9ybT86IHtcbiAgICAvKiogVHlwZSBvZiBwbGF0Zm9ybS4gKi9cbiAgICB0eXBlOiAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnLFxuICAgIC8qKiAxNi1iaXQgc2NyZWVuIGNvb3JkaW5hdGVzICh5eXh4KSBvZiBwbGF0Zm9ybSBzcGF3biBwb3NpdGlvbi4gKi9cbiAgICBjb29yZDogbnVtYmVyLFxuICB9O1xuICAvKipcbiAgICogUG9pbnRzIG9mIGludGVyZXN0IG9uIHRoaXMgc2NyZWVuLiAgRWFjaCBlbnRyeSBpcyBhIHByaW9yaXR5ICgxIGlzIG1vc3RcbiAgICogcmVsZXZhbnQsIDUgaXMgbGVhc3QpLCBmb2xsb3dlZCBieSBhIGRlbHRhLXkgYW5kIGEgZGVsdGEteCBpbiBwaXhlbHNcbiAgICogbWVhc3VyZWQgZnJvbSB0aGUgdG9wLWxlZnQgY29ybmVyIG9mIHRoZSBzY3JlZW4uICBUaGUgZGVsdGFzIG1heSBiZVxuICAgKiBuZWdhdGl2ZSBvciBncmVhdGVyIHRoYW4gMHhmZiwgaW5kaWNhdGluZyB0aGF0IHRoZSBQT0kgaXMgYWN0dWFsbHkgb24gYVxuICAgKiBuZWlnaGJvcmluZyBzY3JlZW4uICBEZWZhdWx0IGR5PTcwIGFuZCBkeD03OC5cbiAgICovXG4gIHBvaT86IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgW251bWJlciwgbnVtYmVyPywgbnVtYmVyP10+LFxuXG4gIC8qKiBVcGRhdGVzIHRvIGFwcGx5IHdoZW4gYXBwbHlpbmcgdGhlIGdpdmVuIGZpeC4gKi9cbiAgdXBkYXRlPzogUmVhZG9ubHlBcnJheTxyZWFkb25seSBbU2NyZWVuRml4LCBTY3JlZW5VcGRhdGVdPjtcblxuICAvKiogV2hldGhlciBhIHNwZWNpYWwgZmxhZyBpcyBuZWVkZWQgZm9yIHRoaXMgc2NyZWVuLiAqL1xuICBmbGFnPzogJ2Fsd2F5cycgfCAnY2FsbScgfCAnY3VzdG9tOmZhbHNlJyB8ICdjdXN0b206dHJ1ZSc7IC8vIHwgJ2Jvc3MnO1xuXG4gIC8qKiBDb25kaXRpb25zIGZvciBtYXRjaGluZyB0aGlzIHRpbGUuICovXG4gIG1hdGNoPzogKHJlYWNoYWJsZTogKGR5OiBudW1iZXIsIGR4OiBudW1iZXIpID0+IGJvb2xlYW4sXG4gICAgICAgICAgIGZsYWc6IGJvb2xlYW4pID0+IGJvb2xlYW47XG5cbiAgLyoqIFdoZXRoZXIgdGhpcyBzY3JlZW4gaXMgX25vdCBhbGxvd2VkXyB0byBiZSBwbGFjZWQgYXV0b21hdGljYWxseS4gKi9cbiAgcGxhY2VtZW50PzogJ21hbnVhbCcgfCAnbW9kJztcbiAgLyoqXG4gICAqIFR5cGUgb2YgbW9kaWZpY2F0aW9uIHRoaXMgc2NyZWVuIGlzIGZyb20gYSBzYW1lLWxheW91dCB0aWxlLlxuICAgKiBNb2QgdGlsZXMgd2lsbCBub3QgYmUgaW5mZXJyZWQgbm9ybWFsbHksIGFuZCBtdXN0IGJlIGFkZGVkIGFmdGVyd2FyZHMuXG4gICAqIEluZmVycmVkIHRpbGVzIHdpbGwgYmUgbWF4aW1hbGx5IG9wZW4uICBNb2RzIHdpbGwgY2xvc2UgcGF0aHMuICBXZVxuICAgKiBtYXkgbmVlZCB0byBhZGQgYSBmaXhlZCBudW1iZXIgb2Ygd2FsbHMsIGFuZC9vciByZW1vdmUgYSBmaXhlZCBudWJtZXJcbiAgICogb2YgYnJpZGdlcy4gIFdlIGFkZCBhcyBtYW55IG5vbi1mbGFnIGJsb2NrcyBhcyBwb3NzaWJsZS5cbiAgICovXG4gIG1vZD86ICdibG9jaycgfCAnd2FsbCcgfCAnYnJpZGdlJzsgLy8gfCAnbWFudWFsJztcblxuICAvKipcbiAgICogWS1jb29yZGluYXRlIG9mIHN0YXR1ZXMgb24gdGhpcyBtYXAgc2NyZWVuLiAgVGhlc2UgbWF5IGJlIHBvcHVsYXRlZFxuICAgKiB3aXRoICQzZiBtb25zdGVyIHNwYXducyBhdCB4PTUgYW5kIHg9YSAocHJvdmlkZWQgdGhlIG5lY2Vzc2FyeSBwYXR0ZXJuXG4gICAqIHRhYmxlcyBhcmUgbG9hZGVkKS4gIFRoaXMgaXMgb25seSByZWxldmFudCBvbiB0aGUgZm9ydHJlc3MgdGlsZXNldC5cbiAgICovXG4gIHN0YXR1ZXM/OiByZWFkb25seSBudW1iZXJbXTtcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgc2NyZWVuIG1heSBiZSBkZWxldGVkIGVudGlyZWx5IGZyb20gYSBtYXAgKGkuZS4gd2hlbiB0cmltbWluZ1xuICAgKiB1bnVzZWQgcm93cy9jb2x1bW5zKS4gIFRoaXMgaXMgYSBzdWJzZXQgb2YgZW1wdHkgc2NyZWVucywgc2luY2Ugc29tZSBlbXB0eVxuICAgKiBzY3JlZW5zIGFyZSBpbXBvcnRhbnQgdG8gcmV0YWluIChlLmcuIGRlYWQgZW5kcykuXG4gICAqL1xuICBkZWxldGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIHRoZSBzY3JlZW4sIGluIHRlcm1zIG9mIG1ldGF0aWxlIElEcyBhdCB0aGUgdGltZSB0aGUgc2NyZWVuXG4gICAqIGlzIGFsbG9jYXRlZC4gIFRoaXMgaXMgb25seSB1c2VkIGZvciBzY3JlZW5zIHdpdGggYSBuZWdhdGl2ZSBzaWQgKCdpZCcgaW5cbiAgICogdGhpcyBzdHJ1Y3R1cmUpLCBhbmQgb25seSBvbmUgc2NyZWVuIGluIGEgZ3JvdXAgb2Ygc2FtZS1zaWQgc2NyZWVucyBzaG91bGRcbiAgICogc3BlY2lmeSBpdC4gIEl0IG11c3QgYmUgMjQwIGJ5dGVzIGxvbmcuXG4gICAqL1xuICBkZWZpbml0aW9uPzogKHJvbTogUm9tKSA9PiBVaW50OEFycmF5O1xuXG4gIC8qKiBBcmVuYSB0eXBlLiAgVGhpcyBzaG91bGQgYmUgcHJlc2VydmVkIHdoZW4gaW5mZXJyaW5nIHNjcmVlbnMuICovXG4gIGFyZW5hPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTY3JlZW4gY29vcmRpbmF0ZXMgb2YgXCJ0YWxsXCIgaG91c2VzLCB3aGljaCBkbyBub3Qgd2FudCBhIHNoYWRvdyAodGlsZSAkMDYpXG4gICAqIGltbWVkaWF0ZWx5IG92ZXIgdGhlIGRvb3IgaWYgd2UgcmVtb3ZlIGEgc2hvcCBpY29uLCBidXQgcmF0aGVyIGEgc29saWRcbiAgICogKHRpbGUgJDIxKS5cbiAgICovXG4gIHRhbGxIb3VzZXM/OiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IHR5cGUgU2NyZWVuVXBkYXRlID0gKHM6IE1ldGFzY3JlZW4sIHNlZWQ6IG51bWJlciwgcm9tOiBSb20pID0+IGJvb2xlYW47XG5cbmV4cG9ydCBjb25zdCBmZWF0dXJlTWFzayA9IHtcbiAgLy8gVE9ETyAtIGNhdmU/IGZvcnRyZXNzPyBlZGdlPyAgd2UgYWxyZWFkeSBoYXZlIGNvbm5lY3Rpb25zIHRvIHRlbGwgdXMuLi5cbiAgJ2VtcHR5JzogMHgwMSxcbiAgJ3BpdCc6IDB4MDIsXG4gICdhcmVuYSc6IDB4MDQsXG4gICdzcGlrZXMnOiAweDA4LFxuICAnd2lkZSc6IDB4MTAsXG4gICdyaXZlcic6IDB4MjAsXG4gICdicmlkZ2UnOiAweDQwLFxuICAnd2FsbCc6IDB4ODAsXG4gICdyYW1wJzogMHgwMV8wMCxcbiAgJ292ZXJwYXNzJzogMHgwMl8wMCxcbiAgJ3VuZGVycGFzcyc6IDB4MDRfMDAsXG4gICd3aGlybHBvb2wnOiAweDA4XzAwLFxuICAnZGVhZGVuZCc6IDB4MTBfMDAsXG5cbiAgLy8gTm90IGFjdHVhbGx5IGxpc3RlZCBhcyBmZWF0dXJlcywgYnV0IGFkZGVkIHNlcGFyYXRlbHkgLSB3ZSBjb3VsZCBhZGQgb3RoZXJzXG4gIC8vICh0b3RhbCBvZiA4IGF2YWlsYWJsZS4uLj8pXG4gICdzdGFpcjp1cCc6IDB4MDFfMDBfMDAsXG4gICdzdGFpcjpkb3duJzogMHgwMl8wMF8wMCxcblxuICAvLyBVbmlxdWUgZmVhdHVyZXM6IHVwcGVyIGJpdHMgaGF2ZSB2YXJpb3VzIGNvbWJpbmF0aW9ucyBvZiAzIG9mIDYgYml0c1xuICAvLyAgIDcsYixkLGUsMTMsMTUsMTYsMTksMWEsMWMsMjMsMjUsMjYsMjksMmEsMmMsMzEsMzIsMzQsMzhcbiAgLy8gU2luY2UgdGhleSBhcmUgbmV2ZXIgc2hhcmVkLCB3ZSBjYW4gcGFjayBhIGxvdCBtb3JlIGludG8gdGhlIHNhbWUgc3BhY2UuXG4gICdwb3J0b2ExJzogMHgwN18wMF8wMF8wMCxcbiAgJ3BvcnRvYTInOiAweDBiXzAwXzAwXzAwLFxuICAncG9ydG9hMyc6IDB4MGRfMDBfMDBfMDAsXG4gICdsYWtlJzogMHgwZV8wMF8wMF8wMCxcbiAgJ2xpZ2h0aG91c2UnOiAweDEzXzAwXzAwXzAwLFxuICAnY2FiaW4nOiAweDE1XzAwXzAwXzAwLFxuICAnd2luZG1pbGwnOiAweDE2XzAwXzAwXzAwLFxuICAnYWx0YXInOiAweDE5XzAwXzAwXzAwLFxuICAncHlyYW1pZCc6IDB4MWFfMDBfMDBfMDAsXG4gICdjcnlwdCc6IDB4MWNfMDBfMDBfMDAsXG5cbiAgLy8gUHJldmVudHMgcGxhY2luZyB0aGlzIGJ5IGhhbmQuXG4gICdtYW51YWwnOiAweDQwXzAwXzAwXzAwLFxuICAvLyBJbmRpY2F0ZXMgd2UgbWF5IHdhbnQgdG8gY29uc29saWRhdGUgdGhpcyBzY3JlZW4uXG4gICdjb25zb2xpZGF0ZSc6IDB4ODBfMDBfMDBfMDAsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBGZWF0dXJlID0ga2V5b2YgdHlwZW9mIGZlYXR1cmVNYXNrO1xuICAvLyAncGl0JyB8ICdhcmVuYScgfCAnc3Bpa2VzJyB8ICdicmlkZ2UnIHwgJ3dhbGwnIHwgJ3JhbXAnIHwgJ2VtcHR5JyB8XG4gIC8vICdwb3J0b2ExJyB8ICdwb3J0b2EyJyB8ICdwb3J0b2EzJyB8IC8vIHBhdGggZnJvbSBzYWJyZSB0byBwb3J0b2FcbiAgLy8gJ2xha2UnIHwgJ292ZXJwYXNzJyB8ICd1bmRlcnBhc3MnIHwgJ3doaXJscG9vbCcgfFxuICAvLyAnbGlnaHRob3VzZScgfCAnY2FiaW4nIHwgJ3dpbmRtaWxsJyB8ICdhbHRhcicgfCAncHlyYW1pZCcgfCAnY3J5cHQnIHxcbiAgLy8gJ2NvbnNvbGlkYXRlJztcblxuZXhwb3J0IGludGVyZmFjZSBJY29uIHtcbiAgc2hvcnQ6IHN0cmluZzsgLy8gc2luZ2xlIGNoYXJhY3RlclxuICBmdWxsOiByZWFkb25seSBbc3RyaW5nLCBzdHJpbmcsIHN0cmluZ107IC8vIDN4MyBncmlkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpY29uKGFycjogVGVtcGxhdGVTdHJpbmdzQXJyYXkpOiBJY29uIHtcbiAgaWYgKGFyci5sZW5ndGggIT0gMSkgdGhyb3cgbmV3IEVycm9yKCdCYWQgaWNvbiBpbnB1dCcpO1xuICBjb25zdCBzdHIgPSBhcnJbMF07XG4gIC8vIHBhcnNlIHRoZSBzdHJpbmcuXG4gIGNvbnN0IGxpbmVzID0gc3RyLnNwbGl0KCdcXG4nKTtcbiAgLy8gbGluZXMgMS4uMyBhcmUgdGhlIGZ1bGwgaWNvbi5cbiAgY29uc3QgZnVsbCA9IGxpbmVzLnNsaWNlKDEpLm1hcChsID0+IGwucmVwbGFjZSgvXlxccypcXHx8XFx8XFxzKiQvZywgJycpKTtcbiAgY29uc3Qgc2hvcnQgPSAvXFxTLy50ZXN0KGxpbmVzWzBdKSA/IGxpbmVzWzBdWzBdIDogZnVsbFsxXVsxXTtcbiAgcmV0dXJuIHtzaG9ydCwgZnVsbDogW2Z1bGxbMF0sIGZ1bGxbMV0sIGZ1bGxbMl1dfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRTY3JlZW4oc3BlYzogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVwbGFjZW1lbnRzOiBbc3RyaW5nLCBudW1iZXJ8TWV0YXNjcmVlbl1bXSk6IFVpbnQ4QXJyYXkge1xuICBjb25zdCBzID0gc3BlYy5zcGxpdCgvXFxzKy9nKTtcbiAgaWYgKCFzWzBdKSBzLnNoaWZ0KCk7XG4gIGlmICghc1tzLmxlbmd0aCAtIDFdKSBzLnBvcCgpO1xuICBpZiAocy5sZW5ndGggIT09IDI0MCkgdGhyb3cgbmV3IEVycm9yKGBCYWQgc2NyZWVuIGRlZmluaXRpb246ICR7cy5sZW5ndGh9YCk7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAocmVwbGFjZW1lbnRzKTtcbiAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShzLCAoeCwgaSkgPT4ge1xuICAgIGNvbnN0IHJlcGwgPSBtYXAuZ2V0KHgpO1xuICAgIGlmICh0eXBlb2YgcmVwbCA9PT0gJ251bWJlcicpIHJldHVybiByZXBsO1xuICAgIGlmIChyZXBsKSByZXR1cm4gcmVwbC5zY3JlZW4udGlsZXNbaV07XG4gICAgcmV0dXJuIHBhcnNlSW50KHgsIDE2KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB0eXBlIFN0YWlyVHlwZSA9ICdzdGFpcjp1cCcgfCAnc3RhaXI6ZG93bic7XG5leHBvcnQgdHlwZSBFZGdlVHlwZSA9ICdlZGdlOnRvcCcgfCAnZWRnZTpib3R0b20nIHwgJ2VkZ2U6bGVmdCcgfCAnZWRnZTpyaWdodCc7XG5leHBvcnQgdHlwZSBTZWFtbGVzc1R5cGUgPSAnc2VhbWxlc3M6dXAnIHwgJ3NlYW1sZXNzOmRvd24nO1xuZXhwb3J0IHR5cGUgQ29ubmVjdGlvblR5cGUgPVxuICAgIFN0YWlyVHlwZSB8IEVkZ2VUeXBlIHwgU2VhbWxlc3NUeXBlIHxcbiAgICAnY2F2ZScgfCAnY3J5cHQnIHwgJ2Rvb3InIHwgJ2Rvb3IyJyB8ICdkb29yMycgfCAnZm9ydHJlc3MnIHxcbiAgICAnZ2F0ZScgfCAnc3dhbXAnIHwgJ3RlbGVwb3J0ZXInIHwgJ3dpbmRtaWxsJztcbi8vIFRPRE8gLSBpcyB3aW5kbWlsbCBqdXN0IGRvb3IyP1xuXG4vLyBOT1RFOiBzd2FtcCBjb25uZWN0cyB0byBlZGdlOmJvdHRvbSBmb3IgY2F2ZSBvciB0b3duP1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbm5lY3Rpb24ge1xuICByZWFkb25seSB0eXBlOiBDb25uZWN0aW9uVHlwZTtcbiAgcmVhZG9ubHkgbWFudWFsPzogYm9vbGVhbjsgICAgICAgICAvLyBzaG91bGQgb25seSBiZSBwbGFjZWQgbWFudWFsbHlcbiAgcmVhZG9ubHkgZGlyOiBudW1iZXI7ICAgICAgICAgICAgICAvLyAwPXVwLCAxPWxlZnQsIDI9ZG93biwgMz1yaWdodFxuICByZWFkb25seSBlbnRyYW5jZTogbnVtYmVyOyAgICAgICAgIC8vIHBvcyBZeVh4XG4gIHJlYWRvbmx5IGV4aXRzOiByZWFkb25seSBudW1iZXJbXTsgLy8gdGlsZSBZWFxuICByZWFkb25seSBhbGxvd2VkRXhpdHM/OiByZWFkb25seSBudW1iZXJbXTsgLy8gZXh0cmEgZXhpdHMgdG8gbWF0Y2hcbiAgLy8gVE9ETyAtIHNpbmdsZUhlaWdodEVudHJhbmNlIC0gZm9yIGRpcj0yIGp1c3Qgc3VidHJhY3QgMHgyMCA/P1xuICAvLyBUT0RPIC0gb3Bwb3NpdGUgZGlyZWN0aW9uPyB3YXRlcmVyZmFsbCBjYXZlIGlzIGEgcmlnaHQvZG93biBtYXRjaHVwLi4uXG59XG5cbi8qKiBAcGFyYW0gdGlsZSBwb3NpdGlvbiBvZiBsb3dlci1sZWZ0IG1ldGF0aWxlIChlLmcuIDB4NDIgZm9yIDQwXzMwKS4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cFN0YWlyKHRpbGU6IG51bWJlciwgd2lkdGggPSAyKTogQ29ubmVjdGlvbiB7XG4gIC8vIGZyb20gbWFwIDA0OiBlbnRyYW5jZSA0MF8zMCAgPT4gZXhpdHMgMzIsMzNcbiAgLy8gZnJvbSBtYXAgMTkgKHNpbmdsZS13aWR0aCk6IHRpbGUgNjggPT4gZW50cmFuY2UgNzhfODgsIGV4aXQgNjhcbiAgY29uc3QgeSA9IHRpbGUgPj4+IDQ7XG4gIGNvbnN0IHggPSB0aWxlICYgMHhmO1xuICBpZiAod2lkdGggPT09IDEpIHtcbiAgICAvLyBUT0RPIC0gd2hhdCBkb2VzIGl0IG1lYW4gZm9yIGVudHJhbmNlIHRvIGJlID4gMHhmZmZmLi4uP1xuICAgIC8vICAgICAgLSBzY3JlZW4gNmMgKG9hayBOVykgaGFzIHRoaXNcbiAgICBjb25zdCBkeSA9IHkgPT09IDB4ZSA/IDB4MjgwMCA6IDB4MTgwMDtcbiAgICBjb25zdCBlbnRyYW5jZSA9ICgoeSA8PCAxMikgKyBkeSkgfCAoKHggPDwgNCkgKyAweDAwMDgpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnc3RhaXI6dXAnLFxuICAgICAgZGlyOiAyLFxuICAgICAgZW50cmFuY2UsXG4gICAgICBleGl0czogW3RpbGVdLFxuICAgICAgLy9hbGxvd2VkRXhpdHM6IFt0aWxlIC0gMTYsIHRpbGUgKyAxNl0sXG4gICAgfTtcbiAgfVxuICAvLyBUT0RPIC0gaWYgeSBpcyAweGUgdGhlbiB3ZSBtYXkgbmVlZCB0byBhZGp1c3QgZm9yIHNjcmVlbiBlZGdlP1xuICBjb25zdCBlbnRyYW5jZSA9IHkgPDwgMTIgfCAoKHggPDwgNCkgKyAod2lkdGggPDwgMykpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdzdGFpcjp1cCcsXG4gICAgZGlyOiAwLFxuICAgIGVudHJhbmNlLFxuICAgIGV4aXRzOiBzZXEod2lkdGgsIGkgPT4gdGlsZSAtIDB4MTAgKyBpKSxcbiAgICAvLyBUT0RPIC0gaWYgd2Ugc2V0IHRoaXMgdGhlbiB3ZSBjb3VsZCBwb3NzaWJseSBzYXZlIHNvbWUgb2YgdGhlXG4gICAgLy8gICAgICAgIHByZXBhcnNlIG5vcm1hbGl6YXRpb24gdGhhdCdzIGN1cnJlbnRseSByZXF1aXJlZC5cbiAgICAvL2FsbG93ZWRFeGl0czogWy4uLnNlcSh3aWR0aCwgaSA9PiB0aWxlIC0gMHgyMCArIGkpLFxuICAgIC8vICAgICAgICAgICAgICAgLi4uc2VxKHdpZHRoLCBpID0+IHRpbGUgKyBpKV0sXG4gIH07XG59XG5cbi8qKiBAcGFyYW0gdGlsZSBwb3NpdGlvbiBvZiB1cHBlci1sZWZ0IG1ldGF0aWxlIChlLmcuIDB4YTIgZm9yIGFmXzMwKS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3duU3RhaXIodGlsZTogbnVtYmVyLCB3aWR0aCA9IDIpOiBDb25uZWN0aW9uIHtcbiAgLy8gZnJvbSBtYXAgMDU6IGVudHJhbmNlIGFmXzMwICA9PiBleGl0cyBiMixiM1xuICAvLyBmcm9tIG1hcCBkNCAoc2luZ2xlLXdpZHRoKTogdGlsZSA0YyA9PiBlbnRyYW5jZSAzOF9jOCwgZXhpdCA0Y1xuICBjb25zdCB5ID0gdGlsZSA+Pj4gNDtcbiAgY29uc3QgeCA9IHRpbGUgJiAweGY7XG4gIGlmICh3aWR0aCA9PT0gMSkge1xuICAgIGNvbnN0IGVudHJhbmNlID0gKCh5IDw8IDEyKSAtIDB4MDgwMCkgfCAoKHggPDwgNCkgKyAweDAwMDgpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnc3RhaXI6ZG93bicsXG4gICAgICBkaXI6IDIsXG4gICAgICBlbnRyYW5jZSxcbiAgICAgIGV4aXRzOiBbdGlsZV0sXG4gICAgICBhbGxvd2VkRXhpdHM6IFt0aWxlICsgMTYsIHRpbGUgLSAxNl0sXG4gICAgfTtcbiAgfVxuICBjb25zdCBlbnRyYW5jZSA9IHkgPDwgMTIgfCAweDBmMDAgfCAoKHggPDwgNCkgKyAod2lkdGggPDwgMykpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdzdGFpcjpkb3duJyxcbiAgICBkaXI6IDIsXG4gICAgZW50cmFuY2UsXG4gICAgZXhpdHM6IHNlcSh3aWR0aCwgaSA9PiB0aWxlICsgMHgxMCArIGkpLFxuICAgIGFsbG93ZWRFeGl0czogWy4uLnNlcSh3aWR0aCwgaSA9PiB0aWxlICsgMHgyMCArIGkpLFxuICAgICAgICAgICAgICAgICAgIC4uLnNlcSh3aWR0aCwgaSA9PiB0aWxlICsgaSldLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2F2ZSh0aWxlOiBudW1iZXIsIHR5cGU6IENvbm5lY3Rpb25UeXBlID0gJ2NhdmUnKTogQ29ubmVjdGlvbiB7XG4gIHJldHVybiB7Li4udXBTdGFpcih0aWxlICsgMTYpLCB0eXBlfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRvb3IodGlsZTogbnVtYmVyLCB0eXBlOiBDb25uZWN0aW9uVHlwZSA9ICdkb29yJyk6IENvbm5lY3Rpb24ge1xuICByZXR1cm4gey4uLnVwU3RhaXIodGlsZSwgMSksIHR5cGV9O1xufVxuXG4vKiogQHBhcmFtIHRpbGUgYm90dG9tLWxlZnQgbWV0YXRpbGUgKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXRlcmZhbGxDYXZlKHRpbGU6IG51bWJlcik6IENvbm5lY3Rpb24ge1xuICBjb25zdCB5ID0gdGlsZSA+Pj4gNDtcbiAgY29uc3QgeCA9IHRpbGUgJiAweGY7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2NhdmUnLFxuICAgIGRpcjogMCxcbiAgICBlbnRyYW5jZTogeSA8PCAxMiB8IHggPDwgNCB8IDB4ZixcbiAgICBleGl0czogW3RpbGUgLSAweGYsIHRpbGUgKyAxXSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvcEVkZ2Uoe2xlZnQgPSA3LCB3aWR0aCA9IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gMiwgbWFudWFsID0gZmFsc2V9ID0ge30pOiBDb25uZWN0aW9uIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnZWRnZTp0b3AnLFxuICAgIG1hbnVhbCxcbiAgICBkaXI6IDAsXG4gICAgZW50cmFuY2U6ICgodG9wICsgMSkgPDwgMTIpIHwgKChsZWZ0IDw8IDQpICsgKHdpZHRoIDw8IDMpKSxcbiAgICBleGl0czogc2VxKHdpZHRoLCBpID0+ICh0b3AgPDwgNCkgfCAoaSArIGxlZnQpKSxcbiAgfTtcbn1cblxuLy8gVE9ETyAtIGNvbnNpZGVyIHNlcGFyYXRpbmcgd2lkZSB2cyBuYXJyb3cgZWRnZXMgaW50byBzZXBhcmF0ZSB0eXBlcz8/P1xuXG5leHBvcnQgZnVuY3Rpb24gYm90dG9tRWRnZSh7bGVmdCA9IDcsIHdpZHRoID0gMiwgc2hpZnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnZWRnZTpib3R0b20nIGFzIENvbm5lY3Rpb25UeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbnVhbCA9IGZhbHNlfSA9IHt9KTogQ29ubmVjdGlvbiB7XG4gIC8vIE5PVEU6IHNvbWUgc2NyZWVucyBjYW4gYmUgdXNlZCBib3RoIGluIG5vcm1hbCBtYXBzIGFuZCBpbiBzaW5nbGUtaGVpZ2h0XG4gIC8vIG1hcHMuICBXaGVuIHVzZWQgaW4gc2luZ2xlLWhlaWdodCwgd2UgbmVlZCB0byBzdWJ0cmFjdCAyIGZyb20gdGhlIFkgdGlsZVxuICAvLyBjb29yZGluYXRlcyBvZiB0aGUgZW50cmFuY2UvZXhpdCwgY2xhbXBpbmcgdG8gYmYgKGVudHJhbmNlKSBhbmQgYyAoZXhpdCkuXG4gIHJldHVybiB7XG4gICAgdHlwZSwgbWFudWFsLFxuICAgIGRpcjogMixcbiAgICBlbnRyYW5jZTogMHhkZl8wMCB8ICgobGVmdCA8PCA0KSArICh3aWR0aCA8PCAzKSArIDE2ICogc2hpZnQpLFxuICAgIGV4aXRzOiBzZXEod2lkdGgsIGkgPT4gMHhlMCB8IChpICsgbGVmdCkpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYm90dG9tRWRnZUhvdXNlKHtsZWZ0ID0gNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoaWZ0ID0gMH0gPSB7fSk6IENvbm5lY3Rpb24ge1xuICAvLyBVbmxpa2UgXCJkdWFsLW1vZGVcIiBzY3JlZW5zLCBpbmRvb3JzLW9ubHkgc2NyZWVucyBoYXZlIHRoZWlyIGVudHJhbmNlIGFuXG4gIC8vIGFkZGl0aW9uYWwgdGlsZSB1cCwgYXQgYWYvYi4gIFRoaXMgaGFyZC1jb2RlcyB0aGF0LlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdlZGdlOmJvdHRvbScsXG4gICAgZGlyOiAyLFxuICAgIGVudHJhbmNlOiAweGFmXzAwIHwgKChsZWZ0IDw8IDQpICsgKHdpZHRoIDw8IDMpICsgMTYgKiBzaGlmdCksXG4gICAgZXhpdHM6IHNlcSh3aWR0aCwgaSA9PiAweGIwIHwgKGkgKyBsZWZ0KSksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZWZ0RWRnZSh7dG9wID0gNywgaGVpZ2h0ID0gMiwgc2hpZnQgPSAwfSA9IHt9KTogQ29ubmVjdGlvbiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2VkZ2U6bGVmdCcsXG4gICAgZGlyOiAxLFxuICAgIGVudHJhbmNlOiAoKHRvcCA8PCAxMikgKyAoKDE2ICogc2hpZnQpIDw8IDgpICsgKGhlaWdodCA8PCAxMSkpIHwgMHgxMCxcbiAgICBleGl0czogc2VxKGhlaWdodCwgaSA9PiAoaSArIHRvcCkgPDwgNCksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByaWdodEVkZ2Uoe3RvcCA9IDcsIGhlaWdodCA9IDIsIHNoaWZ0ID0gMH0gPSB7fSk6IENvbm5lY3Rpb24ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdlZGdlOnJpZ2h0JyxcbiAgICBkaXI6IDMsXG4gICAgZW50cmFuY2U6ICgodG9wIDw8IDEyKSArICgoMTYgKiBzaGlmdCkgPDwgOCkgKyAoaGVpZ2h0IDw8IDExKSkgfCAweGVmLFxuICAgIGV4aXRzOiBzZXEoaGVpZ2h0LCBpID0+IChpICsgdG9wKSA8PCA0IHwgMHhmKSxcbiAgfTtcbn1cblxuLyoqIEBwYXJhbSB0aWxlIFRvcC1sZWZ0IHRpbGUgb2YgdHJhbnNpdGlvbiAoaGVpZ2h0IDIpICovXG5leHBvcnQgZnVuY3Rpb24gc2VhbWxlc3NVcCh0aWxlOiBudW1iZXIsIHdpZHRoID0gMik6IENvbm5lY3Rpb24ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdzZWFtbGVzczp1cCcsXG4gICAgZGlyOiAwLFxuICAgIGdldCBlbnRyYW5jZSgpOiBudW1iZXIgeyB0aHJvdyBuZXcgRXJyb3IoJ2RvZXMgbm90IG1ha2Ugc2Vuc2UnKTsgfSxcbiAgICBleGl0czogc2VxKHdpZHRoLCBpID0+ICh0aWxlICsgaSkpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VhbWxlc3NEb3duKHRpbGU6IG51bWJlciwgd2lkdGggPSAyKTogQ29ubmVjdGlvbiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ3NlYW1sZXNzOmRvd24nLFxuICAgIGRpcjogMixcbiAgICBnZXQgZW50cmFuY2UoKTogbnVtYmVyIHsgdGhyb3cgbmV3IEVycm9yKCdkb2VzIG5vdCBtYWtlIHNlbnNlJyk7IH0sXG4gICAgZXhpdHM6IHNlcSh3aWR0aCwgaSA9PiAodGlsZSArIGkpKSxcbiAgfTtcbn1cbiJdfQ==