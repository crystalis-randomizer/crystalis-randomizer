import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.used = true;
        const base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, base, 0xf0);
    }
    clone(newId) {
        const clone = new Screen(this.rom, newId);
        clone.used = this.used;
        clone.tiles = [...this.tiles];
        return clone;
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    set2d(start, data) {
        const x0 = start & 0xf;
        const y0 = start >>> 4;
        for (let y = 0; y < data.length; y++) {
            const row = data[y];
            for (let x = 0; x < row.length; x++) {
                const tile = row[x];
                if (tile != null)
                    this.tiles[(y0 + y) << 4 | (x0 + x)] = tile;
            }
        }
    }
    assemble(a) {
        const id = this.id.toString(16).padStart(2, '0');
        let tiles = this.tiles;
        if (this.rom.compressedMapData || this.id < 0x100) {
            const seg = (this.id >> 5).toString(16).padStart(2, '0');
            a.segment(seg);
            if (seg === '0a')
                tiles = tiles.slice(0xc0);
        }
        else {
            a.segment('0a');
            tiles = tiles.slice(0, 0xc0);
        }
        a.org(0x8000 | (this.id & 0x3f) << 8, `Screen_${id}`);
        a.byte(...tiles);
    }
}
export class Screens extends Array {
    constructor(rom) {
        super(0x103);
        this.rom = rom;
        this.unallocated = [];
        for (let i = 0; i < 0x103; i++) {
            this[i] = new Screen(rom, i);
        }
    }
    getScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        return arr[i] || (arr[i] = new Screen(this.rom, id));
    }
    setScreen(id, screen) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        arr[i] = screen;
    }
    deleteScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        delete arr[i];
    }
    write() {
        const a = this.rom.assembler();
        for (const screen of this) {
            if (screen === null || screen === void 0 ? void 0 : screen.used)
                screen.assemble(a);
        }
        return [a.module()];
    }
}
//# sourceMappingURL=data:application/json;base64,