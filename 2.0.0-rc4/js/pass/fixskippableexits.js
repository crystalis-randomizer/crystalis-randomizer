import { UnionFind } from '../unionfind.js';
import { Exit } from '../rom/location.js';
export function fixSkippableExits(rom) {
    var _a;
    const targets = new Set();
    for (const location of rom.locations) {
        for (const pit of (_a = location.pits) !== null && _a !== void 0 ? _a : []) {
            targets.add(pit.dest << 8 | pit.toScreen);
        }
    }
    for (const target of targets) {
        const location = rom.locations[target >> 8];
        const scr = target & 0xff;
        const exitList = location.exits.filter(e => e.screen === scr);
        const entranceList = location.entrances.filter(e => e.screen === scr);
        const exits = new Map(exitList.map(e => [e.tile, e]));
        const uf = new UnionFind();
        for (const exit of exits.keys()) {
            for (const dir of DIRS) {
                if (exits.has(exit + dir))
                    uf.union([exit, exit + dir]);
            }
        }
        const map = uf.map();
        for (const entrance of entranceList) {
            for (const dir of DIRS) {
                const found = map.get(entrance.tile + dir);
                for (const tile of found !== null && found !== void 0 ? found : []) {
                    const orig = exits.get(tile);
                    const exit = Exit.of({ screen: target & 0xff, tile: tile + dir,
                        dest: orig.dest, entrance: orig.entrance });
                    location.exits.push(exit);
                }
            }
        }
    }
}
const DIRS = [1, -1, 16, -16];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4c2tpcHBhYmxlZXhpdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcGFzcy9maXhza2lwcGFibGVleGl0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBWTFDLE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxHQUFROztJQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBQ2xDLEtBQUssTUFBTSxRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUNwQyxLQUFLLE1BQU0sR0FBRyxVQUFJLFFBQVEsQ0FBQyxJQUFJLG1DQUFJLEVBQUUsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMzQztLQUNGO0lBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDNUIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDOUQsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFlLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sRUFBRSxHQUFHLElBQUksU0FBUyxFQUFVLENBQUM7UUFDbkMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDL0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3RCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO29CQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDekQ7U0FDRjtRQUNELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNyQixLQUFLLE1BQU0sUUFBUSxJQUFJLFlBQVksRUFBRTtZQUNuQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDdEIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssYUFBTCxLQUFLLGNBQUwsS0FBSyxHQUFJLEVBQUUsRUFBRTtvQkFDOUIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQztvQkFDOUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEdBQUcsR0FBRzt3QkFDdkMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDO29CQUNqRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDM0I7YUFDRjtTQUNGO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7IFVuaW9uRmluZCB9IGZyb20gJy4uL3VuaW9uZmluZC5qcyc7XG5pbXBvcnQgeyBFeGl0IH0gZnJvbSAnLi4vcm9tL2xvY2F0aW9uLmpzJztcblxuLy8gVGhlcmUncyBhbiBvZGRpdHkgd2hlcmUgbWFwIHNjcmVlbnMgdGhhdCBjYW4gYmUgZmFsbGVuIGludG8gKGkuZS5cbi8vIHZpYSBhIHBpdCkgY2FuIGhhdmUgdGhlaXIgZXhpdHMgc2tpcHBlZCBvdmVyIHdoaWxlIHRoZSBzY3JlZW4gaXNcbi8vIHNoYWtpbmcgb24gaW1wYWN0ICh0aGUgZ2FtZSBzdG9wcyBjaGVja2luZyBleGl0cyBkdXJpbmcgdGhhdCB0aW1lLFxuLy8gY2YuIGZmOmU4ZjYsIHdoZXJlIDdkNyBzdG9yZXMgdGhlIHBvc2l0aXZlIHNjcmVlbi1zaGFrZSB0aW1lci5cblxuLy8gUmF0aGVyIHRoYW4gbW92ZSB2YXJpb3VzIGV4aXRzLCB0aGUgbW9zdCBlbGVnYW50IGZpeCBpcyB0byBleHRlbmRcbi8vIGFueSBleGl0cyBieSBhbiBleHRyYSB0aWxlLCBidXQgb25seSBvbiBzY3JlZW5zIHRoYXQgY2FuIGJlIGZhbGxlblxuLy8gaW50by4gIChUaGUgdmFuaWxsYSBnYW1lIHNvbHZlcyB0aGlzIGJ5IG1vdmluZyB0aGUgU2FiZXJhIEZvcnRyZXNzXG4vLyBlbnRyYW5jZSBkb3duIGEgdGlsZSwgYnV0IHRoaXMgaXMgdWdseSBhbmQgaW5jb25zaXN0ZW50KS5cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeFNraXBwYWJsZUV4aXRzKHJvbTogUm9tKSB7XG4gIGNvbnN0IHRhcmdldHMgPSBuZXcgU2V0PG51bWJlcj4oKTsgLy8gc3RvcmVzIGxvY2F0aW9uIDw8IDggfCBzY3JlZW5cbiAgZm9yIChjb25zdCBsb2NhdGlvbiBvZiByb20ubG9jYXRpb25zKSB7XG4gICAgZm9yIChjb25zdCBwaXQgb2YgbG9jYXRpb24ucGl0cyA/PyBbXSkge1xuICAgICAgdGFyZ2V0cy5hZGQocGl0LmRlc3QgPDwgOCB8IHBpdC50b1NjcmVlbik7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCB0YXJnZXQgb2YgdGFyZ2V0cykge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gcm9tLmxvY2F0aW9uc1t0YXJnZXQgPj4gOF07XG4gICAgY29uc3Qgc2NyID0gdGFyZ2V0ICYgMHhmZjtcbiAgICBjb25zdCBleGl0TGlzdCA9IGxvY2F0aW9uLmV4aXRzLmZpbHRlcihlID0+IGUuc2NyZWVuID09PSBzY3IpO1xuICAgIGNvbnN0IGVudHJhbmNlTGlzdCA9IGxvY2F0aW9uLmVudHJhbmNlcy5maWx0ZXIoZSA9PiBlLnNjcmVlbiA9PT0gc2NyKTtcbiAgICBjb25zdCBleGl0cyA9IG5ldyBNYXA8bnVtYmVyLCBFeGl0PihleGl0TGlzdC5tYXAoZSA9PiBbZS50aWxlLCBlXSkpO1xuICAgIGNvbnN0IHVmID0gbmV3IFVuaW9uRmluZDxudW1iZXI+KCk7XG4gICAgZm9yIChjb25zdCBleGl0IG9mIGV4aXRzLmtleXMoKSkge1xuICAgICAgZm9yIChjb25zdCBkaXIgb2YgRElSUykge1xuICAgICAgICBpZiAoZXhpdHMuaGFzKGV4aXQgKyBkaXIpKSB1Zi51bmlvbihbZXhpdCwgZXhpdCArIGRpcl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBtYXAgPSB1Zi5tYXAoKTtcbiAgICBmb3IgKGNvbnN0IGVudHJhbmNlIG9mIGVudHJhbmNlTGlzdCkge1xuICAgICAgZm9yIChjb25zdCBkaXIgb2YgRElSUykge1xuICAgICAgICBjb25zdCBmb3VuZCA9IG1hcC5nZXQoZW50cmFuY2UudGlsZSArIGRpcik7XG4gICAgICAgIGZvciAoY29uc3QgdGlsZSBvZiBmb3VuZCA/PyBbXSkge1xuICAgICAgICAgIGNvbnN0IG9yaWcgPSBleGl0cy5nZXQodGlsZSkhO1xuICAgICAgICAgIGNvbnN0IGV4aXQgPSBFeGl0Lm9mKHtzY3JlZW46IHRhcmdldCAmIDB4ZmYsIHRpbGU6IHRpbGUgKyBkaXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3Q6IG9yaWcuZGVzdCwgZW50cmFuY2U6IG9yaWcuZW50cmFuY2V9KTtcbiAgICAgICAgICBsb2NhdGlvbi5leGl0cy5wdXNoKGV4aXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IERJUlMgPSBbMSwgLTEsIDE2LCAtMTZdO1xuIl19