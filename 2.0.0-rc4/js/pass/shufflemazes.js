import { CaveShuffle, CryptEntranceShuffle, WideCaveShuffle } from '../maze/cave.js';
import { Random } from '../random.js';
import { bridgeCaveShuffle } from '../maze/doublecave.js';
import { CycleCaveShuffle, TightCycleCaveShuffle } from '../maze/cyclecave.js';
import { RiverCaveShuffle, StyxRiverCaveShuffle, WaterfallRiverCaveShuffle, OasisCaveShuffle, OasisEntranceCaveShuffle } from '../maze/rivercave.js';
import { SwampShuffle, addSwampDoors } from '../maze/swamp.js';
import { SaberaPalaceShuffle } from '../maze/twostage.js';
import { LabyrinthShuffle, fixLabyrinthScreens } from '../maze/goa.js';
import { PyramidShuffle } from '../maze/pyramid.js';
import { wideArenaExits } from '../rom/screenfix.js';
import { KarmineBasementShuffle, karmine } from '../maze/karmine.js';
import { MazeShuffles } from '../maze/maze.js';
export function shuffleMazes(rom, flags, random) {
    const $ = rom.locations;
    prepareScreens(rom, random);
    const shuffles = new MazeShuffles(rom, random);
    shuffles.add();
    if (!shuffles.shuffles.length)
        shuffles.add(new CaveShuffle($.EastCave1), new CaveShuffle($.EastCave2), new CaveShuffle($.EastCave3), ...bridgeCaveShuffle($.SealedCave1, $.SealedCave2), new CaveShuffle($.SealedCave3), new CaveShuffle($.SealedCave4), new CaveShuffle($.SealedCave5), new CaveShuffle($.SealedCave6), new CaveShuffle($.SealedCave7), new CaveShuffle($.SealedCave8), new CaveShuffle($.WindmillCave), new CaveShuffle($.ZebuCave), new SwampShuffle($.Swamp), new CaveShuffle($.MtSabreWest_Cave1), new CaveShuffle($.MtSabreWest_Cave2), new CaveShuffle($.MtSabreWest_Cave3), new CaveShuffle($.MtSabreWest_Cave4), new CaveShuffle($.MtSabreWest_Cave5), new CaveShuffle($.MtSabreWest_Cave6), new CycleCaveShuffle($.MtSabreWest_Cave7), new CaveShuffle($.MtSabreNorth_Cave1), new CaveShuffle($.MtSabreNorth_Cave2), new CaveShuffle($.MtSabreNorth_Cave3), new CaveShuffle($.MtSabreNorth_Cave4), new CaveShuffle($.MtSabreNorth_Cave5), new CaveShuffle($.MtSabreNorth_Cave6), new CaveShuffle($.MtSabreNorth_Cave7), new CaveShuffle($.MtSabreNorth_Cave8), new CaveShuffle($.MtSabreNorth_Cave9), new CaveShuffle($.MtSabreNorth_LeftCell2), new CaveShuffle($.MtSabreNorth_SummitCave), new CaveShuffle($.KirisaPlantCave1), new CaveShuffle($.KirisaPlantCave2), new CaveShuffle($.KirisaPlantCave3), new CaveShuffle($.FogLampCave1), new CaveShuffle($.FogLampCave2), new CaveShuffle($.FogLampCave3), new TightCycleCaveShuffle($.FogLampCaveDeadEnd), ...bridgeCaveShuffle($.FogLampCave5, $.FogLampCave4, true), ...bridgeCaveShuffle($.FogLampCave7, $.FogLampCave6), new CycleCaveShuffle($.WaterfallCave1), new CaveShuffle($.WaterfallCave2), new WideCaveShuffle($.WaterfallCave3), new WaterfallRiverCaveShuffle($.WaterfallCave4), new RiverCaveShuffle($.EvilSpiritIsland2).requirePitDestination(), new CycleCaveShuffle($.EvilSpiritIsland3), new RiverCaveShuffle($.EvilSpiritIsland4), new SaberaPalaceShuffle($.SaberaPalace1).requirePitDestination(), new CaveShuffle($.SaberaPalace2), new CaveShuffle($.SaberaPalace2_West), new CaveShuffle($.JoelSecretPassage), new CaveShuffle($.MtHydra_Cave1), new CaveShuffle($.MtHydra_Cave2), new CaveShuffle($.MtHydra_Cave3), new CaveShuffle($.MtHydra_Cave4), new CaveShuffle($.MtHydra_Cave5), new CaveShuffle($.MtHydra_Cave6), new WideCaveShuffle($.MtHydra_Cave7), new CaveShuffle($.MtHydra_Cave8), new CaveShuffle($.MtHydra_Cave9), new CaveShuffle($.MtHydra_Cave10), new WideCaveShuffle($.Styx1).setUpEdgeType('c'), new StyxRiverCaveShuffle($.Styx2).requirePitDestination(), new CaveShuffle($.Styx3), new OasisCaveShuffle($.OasisCaveMain), new CaveShuffle($.DesertCave1), new CaveShuffle($.DesertCave2), new CaveShuffle($.Pyramid_Branch), new PyramidShuffle($.Pyramid_Main), new CryptEntranceShuffle($.Crypt_Entrance), new WideCaveShuffle($.Crypt_Hall1).setUpEdgeType('c'), new CaveShuffle($.Crypt_DeadEndLeft), new CaveShuffle($.Crypt_DeadEndRight), new CaveShuffle($.Crypt_Branch), new CaveShuffle($.Crypt_Hall2), new LabyrinthShuffle($.GoaFortress_Kelbesque), new RiverCaveShuffle($.GoaFortress_Sabera), new CaveShuffle($.GoaFortress_Mado1).requirePitDestination(), new CaveShuffle($.GoaFortress_Mado2), new CaveShuffle($.GoaFortress_Mado3), new CaveShuffle($.GoaFortress_Karmine1), new CaveShuffle($.GoaFortress_Karmine2), new CaveShuffle($.GoaFortress_Karmine4), new KarmineBasementShuffle($.GoaFortress_Karmine6), ...karmine($.GoaFortress_Karmine3, $.GoaFortress_Karmine5, $.GoaFortress_Kensu), new OasisEntranceCaveShuffle($.OasisCave_Entrance));
    shuffles.shuffleAll();
    console.log(String(shuffles));
}
export function prepareScreens(rom, random = new Random(1)) {
    wideArenaExits(rom);
    addSwampDoors(rom);
    fixLabyrinthScreens(rom, random);
}
//# sourceMappingURL=data:application/json;base64,