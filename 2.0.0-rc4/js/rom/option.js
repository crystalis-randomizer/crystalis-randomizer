export var RomOption;
(function (RomOption) {
    RomOption.bit = (addr, bitNum) => new RomOptionBit(addr, bitNum);
    RomOption.byte = (addr) => new RomOptionByte(addr);
    RomOption.address = (addr) => new RomOptionAddress(addr);
})(RomOption || (RomOption = {}));
class RomOptionBit {
    constructor(address, bit) {
        this.address = address;
        this.bit = bit;
    }
    get(rom) {
        return !!(rom[this.address] & (1 << this.bit));
    }
    set(rom, value) {
        const bit = 1 << this.bit;
        if (value) {
            rom[this.address] |= bit;
        }
        else {
            rom[this.address] &= ~bit;
        }
    }
}
class RomOptionByte {
    constructor(address) {
        this.address = address;
    }
    get(rom) {
        return rom[this.address];
    }
    set(rom, value) {
        rom[this.address] = value & 0xff;
    }
}
class RomOptionAddress {
    constructor(address) {
        this.address = address;
    }
    get(rom) {
        return rom[this.address] << 16 |
            rom[this.address + 1] << 8 |
            rom[this.address + 2];
    }
    set(rom, value) {
        rom[this.address] = (value >>> 16) & 0xff;
        rom[this.address + 1] = (value >>> 8) & 0xff;
        rom[this.address + 2] = value & 0xff;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9vcHRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxLQUFXLFNBQVMsQ0FPekI7QUFQRCxXQUFpQixTQUFTO0lBQ1gsYUFBRyxHQUNaLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBc0IsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1RSxjQUFJLEdBQ2IsQ0FBQyxJQUFZLEVBQXFCLEVBQUUsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwRCxpQkFBTyxHQUNoQixDQUFDLElBQVksRUFBcUIsRUFBRSxDQUFDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdEUsQ0FBQyxFQVBnQixTQUFTLEtBQVQsU0FBUyxRQU96QjtBQUVELE1BQU0sWUFBWTtJQUNoQixZQUE2QixPQUFlLEVBQW1CLEdBQVc7UUFBN0MsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFtQixRQUFHLEdBQUgsR0FBRyxDQUFRO0lBQUcsQ0FBQztJQUU5RSxHQUFHLENBQUMsR0FBZTtRQUNqQixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNELEdBQUcsQ0FBQyxHQUFlLEVBQUUsS0FBYztRQUNqQyxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUMxQixJQUFJLEtBQUssRUFBRTtZQUNULEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDO1NBQzFCO2FBQU07WUFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxhQUFhO0lBQ2pCLFlBQTZCLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO0lBQUcsQ0FBQztJQUVoRCxHQUFHLENBQUMsR0FBZTtRQUNqQixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELEdBQUcsQ0FBQyxHQUFlLEVBQUUsS0FBYTtRQUNoQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxnQkFBZ0I7SUFDcEIsWUFBNkIsT0FBZTtRQUFmLFlBQU8sR0FBUCxPQUFPLENBQVE7SUFBRyxDQUFDO0lBRWhELEdBQUcsQ0FBQyxHQUFlO1FBQ2pCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQzFCLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDMUIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNELEdBQUcsQ0FBQyxHQUFlLEVBQUUsS0FBYTtRQUdoQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN2QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFJvbU9wdGlvbjxUPiB7XG4gIGdldChyb206IFVpbnQ4QXJyYXkpOiBUO1xuICBzZXQocm9tOiBVaW50OEFycmF5LCB2YWx1ZTogVCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUm9tT3B0aW9uIHtcbiAgZXhwb3J0IGNvbnN0IGJpdCA9XG4gICAgICAoYWRkcjogbnVtYmVyLCBiaXROdW06IG51bWJlcik6IFJvbU9wdGlvbjxib29sZWFuPiA9PiBuZXcgUm9tT3B0aW9uQml0KGFkZHIsIGJpdE51bSk7XG4gIGV4cG9ydCBjb25zdCBieXRlID1cbiAgICAgIChhZGRyOiBudW1iZXIpOiBSb21PcHRpb248bnVtYmVyPiA9PiBuZXcgUm9tT3B0aW9uQnl0ZShhZGRyKTtcbiAgZXhwb3J0IGNvbnN0IGFkZHJlc3MgPVxuICAgICAgKGFkZHI6IG51bWJlcik6IFJvbU9wdGlvbjxudW1iZXI+ID0+IG5ldyBSb21PcHRpb25BZGRyZXNzKGFkZHIpO1xufVxuXG5jbGFzcyBSb21PcHRpb25CaXQgaW1wbGVtZW50cyBSb21PcHRpb248Ym9vbGVhbj4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFkZHJlc3M6IG51bWJlciwgcHJpdmF0ZSByZWFkb25seSBiaXQ6IG51bWJlcikge31cblxuICBnZXQocm9tOiBVaW50OEFycmF5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHJvbVt0aGlzLmFkZHJlc3NdICYgKDEgPDwgdGhpcy5iaXQpKTtcbiAgfVxuICBzZXQocm9tOiBVaW50OEFycmF5LCB2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIGNvbnN0IGJpdCA9IDEgPDwgdGhpcy5iaXQ7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByb21bdGhpcy5hZGRyZXNzXSB8PSBiaXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvbVt0aGlzLmFkZHJlc3NdICY9IH5iaXQ7XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIFJvbU9wdGlvbkJ5dGUgaW1wbGVtZW50cyBSb21PcHRpb248bnVtYmVyPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYWRkcmVzczogbnVtYmVyKSB7fVxuXG4gIGdldChyb206IFVpbnQ4QXJyYXkpOiBudW1iZXIge1xuICAgIHJldHVybiByb21bdGhpcy5hZGRyZXNzXTtcbiAgfVxuICBzZXQocm9tOiBVaW50OEFycmF5LCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgcm9tW3RoaXMuYWRkcmVzc10gPSB2YWx1ZSAmIDB4ZmY7XG4gIH1cbn1cblxuY2xhc3MgUm9tT3B0aW9uQWRkcmVzcyBpbXBsZW1lbnRzIFJvbU9wdGlvbjxudW1iZXI+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhZGRyZXNzOiBudW1iZXIpIHt9XG5cbiAgZ2V0KHJvbTogVWludDhBcnJheSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHJvbVt0aGlzLmFkZHJlc3NdIDw8IDE2IHxcbiAgICAgICAgcm9tW3RoaXMuYWRkcmVzcyArIDFdIDw8IDggfFxuICAgICAgICByb21bdGhpcy5hZGRyZXNzICsgMl07XG4gIH1cbiAgc2V0KHJvbTogVWludDhBcnJheSwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIC8vIE5PVEU6IHRoZSBoaWdoIGJ5dGUgaXMgY29tcHJlc3NpYmxlIGRvd24gdG8gMi0zIGJpdHNcbiAgICAvLyBpZiB3ZSBmaW5kIG91cnNlbHZlcyBydW5uaW5nIHNob3J0IG9uIHNwYWNlLlxuICAgIHJvbVt0aGlzLmFkZHJlc3NdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICAgIHJvbVt0aGlzLmFkZHJlc3MgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICAgIHJvbVt0aGlzLmFkZHJlc3MgKyAyXSA9IHZhbHVlICYgMHhmZjtcbiAgfVxufVxuIl19