import { Entity } from './entity.js';
import { Metatile } from './metatile.js';
import { seq, tuple } from './util.js';
export class Tilesets {
    constructor(rom) {
        this.rom = rom;
        this.tilesets = [];
        for (let i = 0x80; i < 0xb0; i += 4) {
            this.tilesets.push((this[i] = new Tileset(rom, i)));
        }
    }
    [Symbol.iterator]() {
        return this.tilesets[Symbol.iterator]();
    }
}
export class Tileset extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.tiles = seq(4, q => tuple(rom.prg, this.tileBase | q << 8, 256));
        this.attrs = seq(256, i => rom.prg[this.attrBase | i >> 2] >> ((i & 3) << 1) & 3);
        this.alternates = tuple(rom.prg, this.alternatesBase, 32);
    }
    get map() {
        return this.id & 0x3f;
    }
    get tileBase() {
        return 0x10000 | this.map << 8;
    }
    get attrBase() {
        return 0x13000 | this.map << 4;
    }
    get alternatesBase() {
        return 0x13e00 | this.map << 3;
    }
    getTile(id) {
        return new Metatile(this, id);
    }
    write() {
        const attr = seq(0x40, i => {
            const j = i << 2;
            return (this.attrs[j] & 3) | (this.attrs[j + 1] & 3) << 2 |
                (this.attrs[j + 2] & 3) << 4 | (this.attrs[j + 3] & 3) << 6;
        });
        const a = this.rom.assembler();
        const name = `Tileset_${this.id.toString(16).padStart(2, '0')}`;
        a.segment('08', '09');
        a.org(0x8000 | this.map << 8, `${name}_Tiles`);
        a.byte(...[].concat(...this.tiles));
        a.org(0xb000 | this.map << 4, `${name}_Attrs`);
        a.byte(...attr);
        a.org(0xbe00 | this.map << 3, `${name}_Alternates`);
        a.byte(...this.alternates);
        return [a.module()];
    }
    effects() {
        let index = (this.id >>> 2) & 0xf;
        if (this.id === 0xa8)
            index = 2;
        if (this.id === 0xac)
            index--;
        return this.rom.tileEffects[index];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZXNldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9yb20vdGlsZXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFdkMsT0FBTyxFQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFckMsTUFBTSxPQUFPLFFBQVE7SUFNbkIsWUFBcUIsR0FBUTtRQUFSLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFKckIsYUFBUSxHQUFjLEVBQUUsQ0FBQztRQUsvQixLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBRSxJQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLE9BQVEsU0FBUSxNQUFNO0lBV2pDLFlBQVksR0FBUSxFQUFFLEVBQVU7UUFFOUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRyxHQUFHLENBQUMsQ0FBQyxD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QUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTztRQUVMLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDbEMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLElBQUk7WUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxJQUFJO1lBQUUsS0FBSyxFQUFFLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZHVsZX0gZnJvbSAnLi4vYXNtL21vZHVsZS5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7RW50aXR5fSBmcm9tICcuL2VudGl0eS5qcyc7XG5pbXBvcnQge01ldGF0aWxlfSBmcm9tICcuL21ldGF0aWxlLmpzJztcbmltcG9ydCB7VGlsZUVmZmVjdHN9IGZyb20gJy4vdGlsZWVmZmVjdHMuanMnO1xuaW1wb3J0IHtzZXEsIHR1cGxlfSBmcm9tICcuL3V0aWwuanMnO1xuXG5leHBvcnQgY2xhc3MgVGlsZXNldHMgaW1wbGVtZW50cyBJdGVyYWJsZTxUaWxlc2V0PiB7XG5cbiAgcHJpdmF0ZSB0aWxlc2V0czogVGlsZXNldFtdID0gW107XG5cbiAgcmVhZG9ubHkgW2lkOiBudW1iZXJdOiBUaWxlc2V0O1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJvbTogUm9tKSB7XG4gICAgZm9yIChsZXQgaSA9IDB4ODA7IGkgPCAweGIwOyBpICs9IDQpIHtcbiAgICAgIHRoaXMudGlsZXNldHMucHVzaCgoKHRoaXMgYXMgYW55KVtpXSA9IG5ldyBUaWxlc2V0KHJvbSwgaSkpKTtcbiAgICB9XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFRpbGVzZXQ+IHtcbiAgICByZXR1cm4gdGhpcy50aWxlc2V0c1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuLy8gTWFwcHBpbmcgZnJvbSBtZXRhdGlsZSBJRCB0byB0aWxlIHF1YWRzIGFuZCBwYWxldHRlIG51bWJlci5cbmV4cG9ydCBjbGFzcyBUaWxlc2V0IGV4dGVuZHMgRW50aXR5IHtcblxuICAvLyBUT0RPIC0gcGVybWFuZW50bHkgYXR0YWNoIGJlaGF2aW9yXG4gIC8vIFN0b3JlIG1vcmUgaW5mb3JtYXRpb24sIHN1Y2ggYXMgc2NyZWVuIHR5cGVzLCBlZGdlIHR5cGVzLCBldGMuXG4gIC8vIE5hbWVzLi4uXG4gIC8vIERvZXMgcGFsZXR0ZSBpbmZvIGJlbG9uZyBoZXJlPyAgTWF5YmUuLi5cblxuICB0aWxlczogbnVtYmVyW11bXTsgICAgLy8gdGlsZSBpbmZvLCBvdXRlciBpcyA0IHF1YWRyYW50cyAoVEwsIFRSLCBCTCwgQlIpXG4gIGF0dHJzOiBudW1iZXJbXTsgICAgICAvLyBwYWxldHRlIGluZm9cbiAgYWx0ZXJuYXRlczogbnVtYmVyW107IC8vIDMyLWVsZW1lbnQgbWFwcGluZyBmb3IgZmxhZy1iYXNlZCBhbHRlcm5hdGVzXG5cbiAgY29uc3RydWN0b3Iocm9tOiBSb20sIGlkOiBudW1iZXIpIHtcbiAgICAvLyBgaWRgIGlzIE1hcERhdGFbMV1bM10sIHJhbmdlcyBmcm9tICQ4MC4uJGJjIGluIGluY3JlbWVudHMgb2YgNC5cbiAgICBzdXBlcihyb20sIGlkKTtcbiAgICB0aGlzLnRpbGVzID0gc2VxKDQsIHEgPT4gdHVwbGUocm9tLnByZywgdGhpcy50aWxlQmFzZSB8IHEgPDwgOCAsIDI1NikpO1xuICAgIHRoaXMuYXR0cnMgPSBzZXEoMjU2LCBpID0+IHJvbS5wcmdbdGhpcy5hdHRyQmFzZSB8IGkgPj4gMl0gPj4gKChpICYgMykgPDwgMSkgJiAzKTtcbiAgICB0aGlzLmFsdGVybmF0ZXMgPSB0dXBsZShyb20ucHJnLCB0aGlzLmFsdGVybmF0ZXNCYXNlLCAzMik7XG4gIH1cblxuICBwcml2YXRlIGdldCBtYXAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pZCAmIDB4M2Y7XG4gIH1cblxuICBnZXQgdGlsZUJhc2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMHgxMDAwMCB8IHRoaXMubWFwIDw8IDg7XG4gIH1cblxuICBnZXQgYXR0ckJhc2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMHgxMzAwMCB8IHRoaXMubWFwIDw8IDQ7XG4gIH1cblxuICBnZXQgYWx0ZXJuYXRlc0Jhc2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMHgxM2UwMCB8IHRoaXMubWFwIDw8IDM7XG4gIH1cblxuICBnZXRUaWxlKGlkOiBudW1iZXIpOiBNZXRhdGlsZSB7XG4gICAgLy8gVE9ETyAtIGRvZXMgdGhpcyByYXRoZXIgYmVsb25nIGluIHRpbGVzZXQudHM/XG4gICAgcmV0dXJuIG5ldyBNZXRhdGlsZSh0aGlzLCBpZCk7XG4gIH1cblxuICB3cml0ZSgpOiBNb2R1bGVbXSB7XG4gICAgY29uc3QgYXR0ciA9IHNlcSgweDQwLCBpID0+IHtcbiAgICAgIGNvbnN0IGogPSBpIDw8IDI7XG4gICAgICByZXR1cm4gKHRoaXMuYXR0cnNbal0gJiAzKSB8ICh0aGlzLmF0dHJzW2ogKyAxXSAmIDMpIDw8IDIgfFxuICAgICAgICAgICAgICh0aGlzLmF0dHJzW2ogKyAyXSAmIDMpIDw8IDQgfCAodGhpcy5hdHRyc1tqICsgM10gJiAzKSA8PCA2O1xuICAgIH0pO1xuICAgIGNvbnN0IGEgPSB0aGlzLnJvbS5hc3NlbWJsZXIoKTtcbiAgICBjb25zdCBuYW1lID0gYFRpbGVzZXRfJHt0aGlzLmlkLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpfWA7XG4gICAgYS5zZWdtZW50KCcwOCcsICcwOScpO1xuICAgIGEub3JnKDB4ODAwMCB8IHRoaXMubWFwIDw8IDgsIGAke25hbWV9X1RpbGVzYCk7XG4gICAgYS5ieXRlKC4uLihbXSBhcyBudW1iZXJbXSkuY29uY2F0KC4uLnRoaXMudGlsZXMpKTtcbiAgICBhLm9yZygweGIwMDAgfCB0aGlzLm1hcCA8PCA0LCBgJHtuYW1lfV9BdHRyc2ApO1xuICAgIGEuYnl0ZSguLi5hdHRyKTtcbiAgICBhLm9yZygweGJlMDAgfCB0aGlzLm1hcCA8PCAzLCBgJHtuYW1lfV9BbHRlcm5hdGVzYCk7XG4gICAgYS5ieXRlKC4uLnRoaXMuYWx0ZXJuYXRlcyk7XG4gICAgcmV0dXJuIFthLm1vZHVsZSgpXTtcbiAgfVxuXG4gIGVmZmVjdHMoKTogVGlsZUVmZmVjdHMge1xuICAgIC8vIE5PVEU6IGl0J3MgcG9zc2libGUgdGhpcyBjb3VsZCBnZXQgb3V0IG9mIHN5bmMuLi5cbiAgICBsZXQgaW5kZXggPSAodGhpcy5pZCA+Pj4gMikgJiAweGY7XG4gICAgaWYgKHRoaXMuaWQgPT09IDB4YTgpIGluZGV4ID0gMjtcbiAgICBpZiAodGhpcy5pZCA9PT0gMHhhYykgaW5kZXgtLTtcbiAgICByZXR1cm4gdGhpcy5yb20udGlsZUVmZmVjdHNbaW5kZXhdO1xuICB9XG59XG4iXX0=