export function binarySearch(n, f) {
    if (!n)
        return ~0;
    const fa = f(0);
    const fb = f(n - 1);
    if (fa < 0)
        return ~0;
    if (fa === 0)
        return 0;
    if (fb > 0)
        return ~n;
    if (fb === 0)
        return n - 1;
    let a = 0;
    let b = n - 1;
    while (b - a > 1) {
        const m = (a + b) >> 1;
        const fm = f(m);
        if (fm > 0) {
            a = m;
        }
        else if (fm < 0) {
            b = m;
        }
        else {
            return m;
        }
    }
    return ~b;
}
export function binaryInsert(arr, f, t) {
    const x = f(t);
    const index = binarySearch(arr.length, i => x < f(arr[i]) ? -1 : 1);
    arr.splice(~index, 0, t);
}
export class SparseArray {
    constructor() {
        this._chunks = [];
        this._length = 0;
    }
    get length() { return this._length; }
    _find(target) {
        return binarySearch(this._chunks.length, (i) => {
            const [start, data] = this._chunks[i];
            if (target < start)
                return -1;
            if (target >= start + data.length)
                return 1;
            return 0;
        });
    }
    apply(target) {
        if (target.length < this._length)
            throw new Error(`Target too small.`);
        for (const [start, chunk] of this._chunks) {
            for (let i = 0; i < chunk.length; i++) {
                target[start + i] = chunk[i];
            }
        }
    }
    chunks() {
        return this._chunks;
    }
    get(index) {
        let i = this._find(index);
        if (i < 0)
            return undefined;
        const [start, data] = this._chunks[i];
        return data[index - start];
    }
    set(start, ...values) {
        this.setInternal(start, values);
    }
    setInternal(start, values) {
        var _a;
        if (!values.length)
            return;
        const end = start + values.length;
        this._length = Math.max(this._length, end);
        let i0 = this._find(start);
        let i1 = this._find(end);
        if (i0 >= 0 && i0 === i1) {
            const [s0, a0] = this._chunks[i0];
            for (let i = 0; i < values.length; i++) {
                a0[start + i - s0] = values[i];
            }
            return;
        }
        const e0 = this._chunks[~i0 - 1];
        if (e0 && (e0[0] + e0[1].length === start))
            i0 = ~i0 - 1;
        if (((_a = this._chunks[~i1]) === null || _a === void 0 ? void 0 : _a[0]) === end)
            i1 = ~i1;
        if (i0 >= 0) {
            const [s0, a0] = this._chunks[i0];
            if (i1 !== i0 || !Array.isArray(values)) {
                values = spliceHead(a0, start - s0, values);
            }
            else {
                values.unshift(...a0.slice(0, start - s0));
            }
            start = s0;
        }
        if (i1 >= 0) {
            const [s1, a1] = this._chunks[i1];
            values = spliceTail(values, end - s1, a1);
        }
        let s = i0 < 0 ? ~i0 : i0;
        let e = i1 < 0 ? ~i1 : i1;
        if (i1 >= 0)
            e++;
        if (!Array.isArray(values))
            values = Array.from(values);
        this._chunks.splice(s, e - s, [start, values]);
    }
    splice(start, length = 1) {
        const end = start + length;
        let i0 = this._find(start);
        let i1 = this._find(end);
        let e0 = i0 >= 0 ? this._chunks[i0] : undefined;
        let e1 = i1 >= 0 ? this._chunks[i1] : undefined;
        if (e0) {
            const l0 = start - e0[0];
            if (l0) {
                e0 = [e0[0], e0 === e1 ? e0[1].slice(0, l0) : arrayHead(e0[1], l0)];
            }
            else {
                e0 = undefined;
                i0 = ~i0;
            }
        }
        if (e1) {
            e1 = [end, arrayTail(e1[1], end - e1[0])];
            if (!e1[1].length) {
                e1 = undefined;
                i1 = ~i1;
            }
        }
        const entries = [];
        if (e0)
            entries.push(e0);
        if (e1)
            entries.push(e1);
        let s = i0 < 0 ? ~i0 : i0;
        let e = i1 < 0 ? ~i1 : i1;
        if (i1 >= 0)
            e++;
        this._chunks.splice(s, e - s, ...entries);
    }
    slice(start, end) {
        if (end <= start)
            return [];
        const i = this._find(start);
        if (i < 0)
            throw new Error(`Absent: ${start}`);
        const [s, a] = this._chunks[i];
        if (s + a.length < end)
            throw new Error(`Absent: ${s + a.length}`);
        return a.slice(start - s, end - s);
    }
}
export class SparseByteArray extends SparseArray {
    set(start, ...args) {
        this.setInternal(start, args[0] instanceof Uint8Array ?
            args[0] : Uint8Array.from(args));
    }
    search(needle, start, end) {
        return this.pattern(needle).search(start, end);
    }
    pattern(needle) {
        if (!needle.length)
            return { search: (start = 0) => start };
        const len = needle.length;
        const charTable = new Array(256).fill(len);
        for (let i = 0; i < needle.length; i++) {
            charTable[needle[i]] = len - 1 - i;
        }
        const offsetTable = [];
        let lastPrefixPos = len;
        for (let i = len; i > 0; --i) {
            if (isPrefix(i)) {
                lastPrefixPos = i;
            }
            offsetTable[len - i] = lastPrefixPos - i + len;
            for (let i = 0; i < len - 1; ++i) {
                const slen = suffixLength(i);
                offsetTable[slen] = len - 1 - i + slen;
            }
        }
        return { search: (start = 0, end = this._length) => {
                if (!this._chunks.length || end < start)
                    return -1;
                let k = this._find(start);
                let i0 = 0;
                if (k >= 0) {
                    i0 = start - this._chunks[k][0];
                }
                else {
                    k = ~k;
                }
                while (k < this._chunks.length) {
                    const [offset, haystack] = this._chunks[k++];
                    const i1 = Math.min(end - offset, haystack.length);
                    if (i1 < 0)
                        break;
                    for (let i = len - 1 + i0, j; i < i1;) {
                        for (j = len - 1; needle[j] === haystack[i]; --i, --j) {
                            if (j === 0)
                                return i + offset;
                        }
                        i += Math.max(offsetTable[len - 1 - j], charTable[haystack[i]]);
                    }
                    i0 = 0;
                }
                return -1;
            } };
        function isPrefix(p) {
            for (let i = p, j = 0; i < len; ++i, ++j) {
                if (needle[i] !== needle[j])
                    return false;
            }
            return true;
        }
        function suffixLength(p) {
            let out = 0;
            for (let i = p, j = len - 1; i >= 0 && needle[i] === needle[j]; --i, --j) {
                ++out;
            }
            return out;
        }
    }
    addOffset(offset) {
        const out = new SparseByteArray();
        for (const [start, data] of this._chunks) {
            out._chunks.push([start + offset, data]);
        }
        return out;
    }
    toIpsPatch() {
        let size = 8;
        for (const [, chunk] of this._chunks) {
            size += 5 + chunk.length;
        }
        const buffer = new Uint8Array(size);
        let i = 5;
        buffer[0] = 0x50;
        buffer[1] = 0x41;
        buffer[2] = 0x54;
        buffer[3] = 0x43;
        buffer[4] = 0x48;
        for (const [start, chunk] of this._chunks) {
            if (chunk.length > 0xffff)
                throw new Error(`Oops!`);
            buffer[i++] = start >>> 16;
            buffer[i++] = (start >>> 8) & 0xff;
            buffer[i++] = start & 0xff;
            buffer[i++] = chunk.length >>> 8;
            buffer[i++] = chunk.length & 0xff;
            buffer.subarray(i, i + chunk.length).set(chunk);
            i += chunk.length;
        }
        buffer[i] = 0x45;
        buffer[i + 1] = 0x4f;
        buffer[i + 2] = 0x46;
        return buffer;
    }
    toIpsHexString() {
        const bytes = [...this.toIpsPatch()];
        const lines = [];
        for (let i = 0; i < bytes.length; i += 16) {
            lines.push([i.toString(16).padStart(8, '0') + ':',
                ...bytes.slice(i, i + 16)
                    .map(x => x.toString(16).padStart(2, '0'))].join(' '));
        }
        return lines.join('\n');
    }
}
function spliceHead(a0, i, a1) {
    const l0 = a0.length;
    if (a1.length < l0 || !Array.isArray(a1)) {
        a0.splice(i, l0 - i, ...a1);
        return a0;
    }
    a1.unshift(...arrayHead(a0, i));
    return a1;
}
function spliceTail(a0, i, a1) {
    const l1 = a1.length;
    if (a0.length < l1 || !Array.isArray(a0)) {
        a1.splice(0, i, ...a0);
        return a1;
    }
    a0.push(...arrayTail(a1, i));
    return a0;
}
function arrayHead(arr, i) {
    const l = arr.length;
    if ((i << 1) < l) {
        return arr.slice(0, i);
    }
    arr.splice(i, l - i);
    return arr;
}
function arrayTail(arr, i) {
    const l = arr.length;
    if ((i << 1) < l) {
        arr.splice(0, i);
        return arr;
    }
    return arr.slice(i);
}
export class BitSet {
    constructor() {
        this.data = new Uint8Array(16);
    }
    add(i) {
        const byte = i >>> 3;
        if (byte >= this.data.length) {
            let newSize = this.data.length;
            while (newSize <= byte)
                newSize <<= 1;
            const newData = new Uint8Array(newSize);
            newData.subarray(0, this.data.length).set(this.data);
            this.data = newData;
        }
        this.data[byte] |= (1 << (i & 7));
    }
    delete(i) {
        const byte = i >>> 3;
        if (byte < this.data.length)
            this.data[byte] &= ~(1 << (i & 7));
    }
    has(i) {
        return Boolean((this.data[i >>> 3] || 0) & (1 << (i & 7)));
    }
}
export class IntervalSet {
    constructor() {
        this.data = [];
    }
    [Symbol.iterator]() {
        return this.data[Symbol.iterator]();
    }
    _find(v) {
        return binarySearch(this.data.length, (i) => {
            const entry = this.data[i];
            if (v < entry[0])
                return -1;
            if (v >= entry[1])
                return 1;
            return 0;
        });
    }
    has(x) {
        return this._find(x) >= 0;
    }
    add(start, end) {
        var _a, _b;
        let i0 = this._find(start);
        let i1 = this._find(end);
        if (((_a = this.data[~i0 - 1]) === null || _a === void 0 ? void 0 : _a[1]) === start)
            i0 = ~i0 - 1;
        if (((_b = this.data[~i1]) === null || _b === void 0 ? void 0 : _b[0]) === end)
            i1 = ~i1;
        const entry = [start, end];
        if (i0 >= 0)
            entry[0] = this.data[i0][0];
        if (i1 >= 0)
            entry[1] = this.data[i1][1];
        let s = i0 < 0 ? ~i0 : i0;
        let e = i1 < 0 ? ~i1 : i1;
        if (i1 >= 0)
            e++;
        this.data.splice(s, e - s, entry);
    }
    delete(start, end) {
        let i0 = this._find(start);
        let i1 = this._find(end);
        let e0 = i0 >= 0 ? this.data[i0] : undefined;
        let e1 = i1 >= 0 ? this.data[i1] : undefined;
        if (e0) {
            e0 = [e0[0], Math.min(e0[1], start)];
            if (e0[0] === e0[1]) {
                e0 = undefined;
                i0 = ~i0;
            }
        }
        if (e1) {
            e1 = [Math.max(e1[0], end), e1[1]];
            if (e1[0] === e1[1]) {
                e1 = undefined;
                i1 = ~i1;
            }
        }
        const entries = [];
        if (e0)
            entries.push(e0);
        if (e1)
            entries.push(e1);
        let s = i0 < 0 ? ~i0 : i0;
        let e = i1 < 0 ? ~i1 : i1;
        if (i1 >= 0)
            e++;
        this.data.splice(s, e - s, ...entries);
    }
    tail(x) {
        let index = this._find(x);
        if (index < 0)
            index = ~index;
        const data = this.data;
        return {
            [Symbol.iterator]() { return this; },
            next() {
                if (index >= data.length)
                    return { value: undefined, done: true };
                const e = data[index++];
                return { value: [Math.max(x, e[0]), e[1]], done: false };
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,