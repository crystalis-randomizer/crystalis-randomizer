import { Grid } from './grid.js';
import { hex } from '../rom/util.js';
const [] = [hex];
export const OK = { ok: true, value: undefined };
export class MazeShuffles {
    constructor(rom, random) {
        this.rom = rom;
        this.random = random;
        this.shuffles = [];
    }
    add(...shuffles) {
        this.shuffles.push(...shuffles);
    }
    shuffleAll() {
        for (const shuffle of this.shuffles) {
            shuffle.shuffle(this.random);
        }
        for (const shuffle of this.shuffles) {
            if (shuffle.meta)
                shuffle.finish();
        }
        for (const loc of this.rom.locations) {
            loc.meta.shufflePits(this.random);
        }
    }
    toString() {
        return [...this.shuffles].sort((a, b) => ((a.badness || 0) - (b.badness || 0))).join('\n');
    }
}
export class AbstractMazeShuffle {
    constructor(loc, params) {
        this.maxAttempts = 250;
        this.attempt = 0;
        this.meta = undefined;
        this.grid = new Grid(1, 1);
        this.fixed = new Set();
        this.w = 0;
        this.h = 0;
        this.size = 0;
        this.count = 0;
        this.exitMap = [];
        this.loc = loc;
        this.orig = loc.meta;
        this.params = params !== null && params !== void 0 ? params : this.survey(this.orig);
    }
    toString() {
        return `${this.constructor.name}(${this.loc}): ${this.attempt}/${this.maxAttempts}`;
    }
    get badness() {
        return this.attempt / this.maxAttempts;
    }
    reset() {
        this.meta = undefined;
        const h = this.pickHeight();
        const w = this.pickWidth();
        const size = this.pickSize();
        const grid = new Grid(h, w);
        grid.data.fill('');
        Object.assign(this, { h, w, size, grid, fixed: new Set(),
            count: 0, exitMap: [] });
    }
    shuffle(random) {
        if (!this.loc.used || this.meta || this.attempt > this.maxAttempts)
            return;
        Object.assign(this, { random });
        while (++this.attempt <= this.maxAttempts) {
            this.reset();
            const result = this.build();
            if (result.ok)
                return;
            console.log(`Shuffle failed ${this.loc}: ${result.fail}`);
        }
        console.error(`Completely failed to map shuffle ${this.loc}`);
    }
    finish() {
        if (!this.meta || this.meta === this.loc.meta)
            return;
        this.finishInternal();
    }
    finishInternal() {
        if (!this.meta)
            throw new Error(`impossible`);
        this.meta.transferFlags(this.loc.meta, this.random);
        const mappedExits = [];
        for (const [pred, pos, type] of this.exitMap) {
            for (const [opos, otype, spec] of mappedExits) {
                if (pred(opos, otype)) {
                    mappedExits.push([pos, type, spec]);
                    break;
                }
            }
        }
        this.meta.transferExits(this.loc.meta, this.random);
        for (const [srcPos, srcType, spec] of mappedExits) {
            const dest = this.meta.rom.locations[spec[0] >>> 8].meta;
            const destPos = spec[0] & 0xff;
            const destType = spec[1];
            this.meta.attach(srcPos, dest, destPos, srcType, destType);
        }
        this.meta.transferSpawns(this.loc.meta, this.random);
        this.meta.transferPits(this.loc.meta);
        this.loc.meta = this.meta;
    }
    pickHeight() {
        return Math.max(1, Math.min(16, this.orig.height +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickWidth() {
        return Math.max(1, Math.min(8, this.orig.width +
            Math.floor((this.random.nextInt(6) - 1) / 3)));
    }
    pickSize() {
        return this.params.size + (this.random.nextInt(5) < 2 ? 1 : 0);
    }
    insertTile(pos, tile) {
        const s = this.posToGrid(pos);
        for (let r = 0; r < 3; r++) {
            for (let c = 0; c < 3; c++) {
                const g = s + r * 0x800 + c * 8;
                if (this.fixed.has(g))
                    return false;
                const v = this.grid.get(g);
                if (v && v !== tile[r * 3 + c])
                    return false;
            }
        }
        for (let r = 0; r < 3; r++) {
            for (let c = 0; c < 3; c++) {
                const g = s + r * 0x800 + c * 8;
                this.grid.set(g, tile[r * 3 + c]);
            }
        }
        return true;
    }
    posToGrid(pos, offset = 0) {
        const y = pos >>> 4;
        const x = pos & 0xf;
        return (y << 12 | x << 4) + offset;
    }
    insertPattern(pattern, { top = 0, bottom = 0, left = 0, right = 0 } = {}) {
        const ph = (pattern.length - 1) >>> 1;
        const pw = (pattern[0].length - 1) >>> 1;
        const dh = top + bottom;
        const dw = left + right;
        if (this.h < ph + dh)
            return { ok: false, fail: `too short` };
        if (this.w < pw + dw)
            return { ok: false, fail: `too narrow` };
        const y0 = this.random.nextInt(this.h - ph - 1 - dh) + top;
        const x0 = this.random.nextInt(this.w - pw - 1 - dh) + left;
        const c0 = (y0 + 1) << 12 | (x0 + 1) << 4;
        Grid.writeGrid2d(this.grid, c0, pattern);
        for (let y = 0x3000; y <= 0x5000; y += 0x800) {
            for (let x = 0x30; x <= 0x40; x += 0x8) {
                this.fixed.add(c0 + (y | x));
            }
        }
        return { ok: true, value: undefined };
    }
    extract(g, c, { h = 3, w = 3, replace = undefined, } = {}) {
        const index = g.index(c);
        let out = '';
        const end = index + h * g.row;
        const { row } = g;
        for (let r = index; r < end; r += row) {
            for (let i = r; i < r + w; i++) {
                if (replace) {
                    const s = replace.get(g.coord(i));
                    if (s != null) {
                        out += (s || ' ');
                        continue;
                    }
                }
                out += (g.data[i] || ' ');
            }
        }
        return out;
    }
    canSet(c, v) {
        return this.canSetAll(new Map([[c, v]]));
    }
    canSetAll(replace) {
        const screens = new Set();
        for (const c of replace.keys()) {
            if (this.fixed.has(c))
                return false;
            const s = (c & ~0x808);
            const y = s >>> 12;
            const x = (s >>> 4) & 0xf;
            if (x < this.w && y < this.h)
                screens.add(s);
            if (!(c & 8) && y < this.h && x)
                screens.add(s - 0x10);
            if (!(c & 0x800) && x < this.w && y)
                screens.add(s - 0x1000);
            if (!(c & 0x808) && x && y)
                screens.add(s - 0x1010);
        }
        for (const s of screens) {
            const tile = this.extract(this.grid, s, { replace });
            if (!this.orig.tileset.getMetascreensFromTileString(tile).length) {
                return false;
            }
        }
        return true;
    }
    addAllFixed() {
        for (let i = 0; i < this.grid.data.length; i++) {
            if (this.grid.data[i])
                this.fixed.add(this.grid.coord(i));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,