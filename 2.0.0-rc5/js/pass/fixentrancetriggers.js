import { Spawn } from '../rom/location.js';
export function fixEntranceTriggers(rom) {
    const { locations: { Portoa, PortoaPalace_ThroneRoom, Portoa_PalaceEntrance, UndergroundChannel, WaterfallCave2, WaterfallCave3, }, } = rom;
    fixTrigger(Portoa_PalaceEntrance, 'edge:bottom', 0xb7, Portoa);
    fixTrigger(PortoaPalace_ThroneRoom, 'door', 0x92, UndergroundChannel);
    fixTrigger(WaterfallCave2, 'stair:up', 0xbf, WaterfallCave3);
    fixClosedCaveExits(rom);
}
function fixTrigger(exitLocation, exitType, trigger, originalEntrance) {
    const [exit, ...rest] = [...exitLocation.meta.exits()].filter(([, type]) => type === exitType);
    if (!exit)
        throw new Error(`Could not find ${exitType} in ${exitLocation}`);
    if (rest.length)
        throw new Error(`Ambiguous ${exitType} in ${exitLocation}`);
    const [entranceLocPos, entranceType] = exit[2];
    const entranceLoc = entranceLocPos >>> 8;
    if (entranceLoc === originalEntrance.id)
        return;
    const entrancePos = entranceLocPos & 0xff;
    const entranceLocation = exitLocation.rom.locations[entranceLoc];
    const scr = entranceLocation.meta.get(entrancePos);
    const entrance = scr.data.exits.find(e => e.type === entranceType);
    if (!entrance)
        throw new Error(`Bad entrance in ${entranceLocation}`);
    const triggerCoord = ((entrance.entrance & 0xf000) >>> 8 | (entrance.entrance & 0xf0) >>> 4) +
        triggerDirectionAdjustments[entrance.dir];
    if (entranceLocation.spawns.length > 17)
        entranceLocation.spawns.pop();
    const triggerSpawnIndex = originalEntrance.spawns.findIndex(s => s.isTrigger() && s.id === trigger);
    const triggerSpawn = triggerSpawnIndex >= 0 ?
        originalEntrance.spawns.splice(triggerSpawnIndex, 1)[0] :
        Spawn.of({ type: 2, id: trigger });
    triggerSpawn.xt = (entrancePos & 0xf) << 4 | (triggerCoord & 0xf);
    triggerSpawn.yt = (entrancePos & 0xf0) | triggerCoord >>> 4;
    entranceLocation.spawns.push(triggerSpawn);
}
const triggerDirectionAdjustments = [0x10, 0, 0, 0];
function fixClosedCaveExits(rom) {
    const { locations: { MtSabreNorth_Main, ValleyOfWind } } = rom;
    for (const locPos of findClosedCaveExits(ValleyOfWind, 0x11)) {
        const loc = rom.locations[locPos >>> 8];
        const pos = locPos & 0xff;
        setCustomFlag(loc, pos, rom.flags.OpenedSealedCave);
    }
    for (const locPos of findClosedCaveExits(MtSabreNorth_Main, 0x04)) {
        const loc = rom.locations[locPos >>> 8];
        if (loc.data.fixed)
            continue;
        if (loc.spawns.length > 15)
            continue;
        const pos = locPos & 0xff;
        setCustomFlag(loc, pos, rom.flags.OpenedPrison);
        const coord = loc.meta.get(pos).findExitByType('cave').entrance;
        const keyTrigger = Spawn.of({ screen: pos, coord: coord, type: 2, id: 0xad });
        loc.spawns.push(keyTrigger);
        if (loc.spawns.length > 15)
            continue;
        const explosion = Spawn.of({ screen: pos, coord: coord - 0x1010,
            type: 4, id: 0x2c });
        loc.spawns.splice(1, 0, explosion);
    }
}
function findClosedCaveExits(loc, pos) {
    const seen = new Set([loc, loc.id << 8 | pos]);
    const queue = new Set();
    for (const exit of loc.meta.exits()) {
        if (exit[0] === pos && (exit[1] === 'cave' || exit[1] === 'gate')) {
            queue.add(exit[2]);
        }
    }
    const out = [];
    for (const exit of queue) {
        if (seen.has(exit[0]))
            continue;
        const exitLoc = loc.rom.locations[exit[0] >>> 8];
        const exitPos = exit[0] & 0xff;
        if (exitLoc.meta.customFlags.has(exitPos))
            continue;
        if (exit[1] === 'cave' || exit[1] === 'gate') {
            const scr = exitLoc.meta.get(exitPos);
            if (scr.flag === 'custom:true') {
                out.push(exit[0]);
            }
            else {
                console.error(`No flag for ${scr.name}`);
            }
            continue;
        }
        if (seen.has(exitLoc))
            continue;
        seen.add(exitLoc);
        for (const entrance of exitLoc.meta.exits()) {
            if (entrance[1] === 'cave' || entrance[1] === 'gate')
                continue;
            queue.add(entrance[2]);
        }
    }
    console.log(`From ${loc}: ${out.map(x => x.toString(16))}`);
    ;
    return out;
}
function setCustomFlag(loc, pos, val, noMirror) {
    if (val) {
        loc.meta.customFlags.set(pos, val);
    }
    else {
        loc.meta.customFlags.delete(pos);
    }
    if (noMirror)
        return;
    if (loc === loc.rom.locations.CordelPlainEast) {
        setCustomFlag(loc.rom.locations.CordelPlainWest, pos, val, true);
    }
    else if (loc === loc.rom.locations.CordelPlainWest) {
        setCustomFlag(loc.rom.locations.CordelPlainEast, pos, val, true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4ZW50cmFuY2V0cmlnZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL2ZpeGVudHJhbmNldHJpZ2dlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFZLEtBQUssRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBWXJELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFRO0lBQzFDLE1BQU0sRUFDSixTQUFTLEVBQUUsRUFDVCxNQUFNLEVBQ04sdUJBQXVCLEVBQ3ZCLHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIsY0FBYyxFQUNkLGNBQWMsR0FDZixHQUNGLEdBQUcsR0FBRyxDQUFDO0lBRVIsVUFBVSxDQUFDLHFCQUFxQixFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0QsVUFBVSxDQUFDLHVCQUF1QixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN0RSxVQUFVLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDN0Qsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQVFELFNBQVMsVUFBVSxDQUFDLFlBQXNCLEVBQUUsUUFBd0IsRUFDaEQsT0FBZSxFQUFFLGdCQUEwQjtJQUM3RCxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQ2pCLENBQUMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUM7SUFDM0UsSUFBSSxDQUFDLElBQUk7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixRQUFRLE9BQU8sWUFBWSxFQUFFLENBQUMsQ0FBQztJQUM1RSxJQUFJLElBQUksQ0FBQyxNQUFNO1FBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLFFBQVEsT0FBTyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sV0FBVyxHQUFHLGNBQWMsS0FBSyxDQUFDLENBQUM7SUFDekMsSUFBSSxXQUFXLEtBQUssZ0JBQWdCLENBQUMsRUFBRTtRQUFFLE9BQU87SUFDaEQsTUFBTSxXQUFXLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQztJQUMxQyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sR0FBRyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkQsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQztJQUNwRSxJQUFJLENBQUMsUUFBUTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUN0RSxNQUFNLFlBQVksR0FDZCxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSwyQkFBMkIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUU7UUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdkUsTUFBTSxpQkFBaUIsR0FDbkIsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDO0lBQzlFLE1BQU0sWUFBWSxHQUNkLGlCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztJQUNyQyxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsRSxZQUFZLENBQUMsRUFBRSxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUM7SUFDNUQsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSwyQkFBMkIsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBU3BELFNBQVMsa0JBQWtCLENBQUMsR0FBUTtJQUNsQyxNQUFNLEVBQUMsU0FBUyxFQUFFLEVBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFDLEVBQUMsR0FBRyxHQUFHLENBQUM7SUFDM0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDNUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDeEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztRQUMxQixhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDckQ7SUFDRCxLQUFLLE1BQU0sTUFBTSxJQUFJLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ2pFLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQUUsU0FBUztRQUM3QixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUU7WUFBRSxTQUFTO1FBQ3JDLE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDMUIsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoRCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQ2hFLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM1RSxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLEVBQUU7WUFBRSxTQUFTO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBTTtZQUNsQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO1FBQ2hELEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDcEM7QUFDSCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxHQUFhLEVBQUUsR0FBUTtJQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNoRSxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsRUFBWSxDQUFDO0lBQ2xDLEtBQUssTUFBTSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNuQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsRUFBRTtZQUNqRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO0tBQ0Y7SUFDRCxNQUFNLEdBQUcsR0FBYSxFQUFFLENBQUM7SUFXekIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFFLFNBQVM7UUFDaEMsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQUUsU0FBUztRQUNwRCxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sRUFBRTtZQUM1QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO2dCQUM5QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUMxQztZQUNELFNBQVM7U0FDVjtRQUNELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFBRSxTQUFTO1FBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEIsS0FBSyxNQUFNLFFBQVEsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBRTNDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTTtnQkFBRSxTQUFTO1lBQy9ELEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEI7S0FDRjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsRUFBRSxDQUFBLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFBQSxDQUFDO0lBQzNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQWEsRUFBRSxHQUFRLEVBQUUsR0FBYyxFQUN2QyxRQUFrQjtJQUN2QyxJQUFJLEdBQUcsRUFBRTtRQUNQLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEM7U0FBTTtRQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNsQztJQUNELElBQUksUUFBUTtRQUFFLE9BQU87SUFDckIsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFO1FBQzdDLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNsRTtTQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRTtRQUNwRCxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDbEU7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm9tIH0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7IENvbm5lY3Rpb25UeXBlIH0gZnJvbSAnLi4vcm9tL21ldGFzY3JlZW5kYXRhLmpzJztcbmltcG9ydCB7IExvY2F0aW9uLCBTcGF3biB9IGZyb20gJy4uL3JvbS9sb2NhdGlvbi5qcyc7XG5pbXBvcnQgeyBQb3MsIEV4aXRTcGVjIH0gZnJvbSAnLi4vcm9tL21ldGFsb2NhdGlvbi5qcyc7XG5pbXBvcnQgeyBGbGFnIH0gZnJvbSAnLi4vcm9tL2ZsYWdzLmpzJztcblxuLyoqXG4gKiBNb3ZlcyBlbnRyYW5jZS1iYXNlZCB0cmlnZ2VycyB0aGF0IHNob3VsZCBiZSBhdHRhY2hlZCB0b1xuICogdGhlIG9wcG9zaXRlIHNpZGUgb2Ygc3BlY2lmaWMgZXhpdHMuICBUaGlzIHNob3VsZCBpZGVhbGx5XG4gKiBydW4gYWZ0ZXIgc2h1ZmZsaW5nIGFueSBsb2NhdGlvbi10by1sb2NhdGlvbiBjb25uZWN0aW9uc1xuICogKGkuZS4gc2h1ZmZsZSBob3VzZXMpIGJ1dCBfYmVmb3JlXyByYW5kb21pemluZyB0aGUgbWFwcyxcbiAqIGluIGNhc2Ugd2UgbmVlZCB0byBkaXNhbWJpZ3VhdGUgbXVsdGlwbGUgc2FtZS10eXBlIGV4aXRzXG4gKiBhdCBzb21lIHBvaW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZml4RW50cmFuY2VUcmlnZ2Vycyhyb206IFJvbSkge1xuICBjb25zdCB7XG4gICAgbG9jYXRpb25zOiB7XG4gICAgICBQb3J0b2EsXG4gICAgICBQb3J0b2FQYWxhY2VfVGhyb25lUm9vbSxcbiAgICAgIFBvcnRvYV9QYWxhY2VFbnRyYW5jZSxcbiAgICAgIFVuZGVyZ3JvdW5kQ2hhbm5lbCxcbiAgICAgIFdhdGVyZmFsbENhdmUyLFxuICAgICAgV2F0ZXJmYWxsQ2F2ZTMsXG4gICAgfSxcbiAgfSA9IHJvbTtcblxuICBmaXhUcmlnZ2VyKFBvcnRvYV9QYWxhY2VFbnRyYW5jZSwgJ2VkZ2U6Ym90dG9tJywgMHhiNywgUG9ydG9hKTtcbiAgZml4VHJpZ2dlcihQb3J0b2FQYWxhY2VfVGhyb25lUm9vbSwgJ2Rvb3InLCAweDkyLCBVbmRlcmdyb3VuZENoYW5uZWwpO1xuICBmaXhUcmlnZ2VyKFdhdGVyZmFsbENhdmUyLCAnc3RhaXI6dXAnLCAweGJmLCBXYXRlcmZhbGxDYXZlMyk7XG4gIGZpeENsb3NlZENhdmVFeGl0cyhyb20pO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBgdHlwZWAgb2YgZXhpdCBmcm9tIGBleGl0TG9jYXRpb25gIGNvbm5lY3RzIHRvXG4gKiB0aGUgYG9yaWdpbmFsRW50cmFuY2VgIGxvY2F0aW9uLiAgSWYgbm90LCByZW1vdmUgYHRyaWdnZXJgIGZyb21cbiAqIHRoZSBvcmlnaW5hbCBsb2NhdGlvbiBhbmQgYWRkIGl0IHRvIHRoZSBhY3R1YWwgb3RoZXIgc2lkZSBvZiB0aGVcbiAqIGdpdmVuIGV4aXQuXG4gKi9cbmZ1bmN0aW9uIGZpeFRyaWdnZXIoZXhpdExvY2F0aW9uOiBMb2NhdGlvbiwgZXhpdFR5cGU6IENvbm5lY3Rpb25UeXBlLFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBudW1iZXIsIG9yaWdpbmFsRW50cmFuY2U6IExvY2F0aW9uKSB7XG4gIGNvbnN0IFtleGl0LCAuLi5yZXN0XSA9XG4gICAgICBbLi4uZXhpdExvY2F0aW9uLm1ldGEuZXhpdHMoKV0uZmlsdGVyKChbLCB0eXBlXSkgPT4gdHlwZSA9PT0gZXhpdFR5cGUpO1xuICBpZiAoIWV4aXQpIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgJHtleGl0VHlwZX0gaW4gJHtleGl0TG9jYXRpb259YCk7XG4gIGlmIChyZXN0Lmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKGBBbWJpZ3VvdXMgJHtleGl0VHlwZX0gaW4gJHtleGl0TG9jYXRpb259YCk7XG4gIGNvbnN0IFtlbnRyYW5jZUxvY1BvcywgZW50cmFuY2VUeXBlXSA9IGV4aXRbMl07XG4gIGNvbnN0IGVudHJhbmNlTG9jID0gZW50cmFuY2VMb2NQb3MgPj4+IDg7XG4gIGlmIChlbnRyYW5jZUxvYyA9PT0gb3JpZ2luYWxFbnRyYW5jZS5pZCkgcmV0dXJuOyAvLyBub3RoaW5nIHRvIGRvXG4gIGNvbnN0IGVudHJhbmNlUG9zID0gZW50cmFuY2VMb2NQb3MgJiAweGZmO1xuICBjb25zdCBlbnRyYW5jZUxvY2F0aW9uID0gZXhpdExvY2F0aW9uLnJvbS5sb2NhdGlvbnNbZW50cmFuY2VMb2NdO1xuICBjb25zdCBzY3IgPSBlbnRyYW5jZUxvY2F0aW9uLm1ldGEuZ2V0KGVudHJhbmNlUG9zKTtcbiAgY29uc3QgZW50cmFuY2UgPSBzY3IuZGF0YS5leGl0cyEuZmluZChlID0+IGUudHlwZSA9PT0gZW50cmFuY2VUeXBlKTtcbiAgaWYgKCFlbnRyYW5jZSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgZW50cmFuY2UgaW4gJHtlbnRyYW5jZUxvY2F0aW9ufWApO1xuICBjb25zdCB0cmlnZ2VyQ29vcmQgPVxuICAgICAgKChlbnRyYW5jZS5lbnRyYW5jZSAmIDB4ZjAwMCkgPj4+IDggfCAoZW50cmFuY2UuZW50cmFuY2UgJiAweGYwKSA+Pj4gNCkgK1xuICAgICAgdHJpZ2dlckRpcmVjdGlvbkFkanVzdG1lbnRzW2VudHJhbmNlLmRpcl07XG4gIGlmIChlbnRyYW5jZUxvY2F0aW9uLnNwYXducy5sZW5ndGggPiAxNykgZW50cmFuY2VMb2NhdGlvbi5zcGF3bnMucG9wKCk7XG4gIGNvbnN0IHRyaWdnZXJTcGF3bkluZGV4ID1cbiAgICAgIG9yaWdpbmFsRW50cmFuY2Uuc3Bhd25zLmZpbmRJbmRleChzID0+IHMuaXNUcmlnZ2VyKCkgJiYgcy5pZCA9PT0gdHJpZ2dlcik7XG4gIGNvbnN0IHRyaWdnZXJTcGF3biA9XG4gICAgICB0cmlnZ2VyU3Bhd25JbmRleCA+PSAwID9cbiAgICAgIG9yaWdpbmFsRW50cmFuY2Uuc3Bhd25zLnNwbGljZSh0cmlnZ2VyU3Bhd25JbmRleCwgMSlbMF0gOlxuICAgICAgU3Bhd24ub2Yoe3R5cGU6IDIsIGlkOiB0cmlnZ2VyfSk7XG4gIHRyaWdnZXJTcGF3bi54dCA9IChlbnRyYW5jZVBvcyAmIDB4ZikgPDwgNCB8ICh0cmlnZ2VyQ29vcmQgJiAweGYpO1xuICB0cmlnZ2VyU3Bhd24ueXQgPSAoZW50cmFuY2VQb3MgJiAweGYwKSB8IHRyaWdnZXJDb29yZCA+Pj4gNDtcbiAgZW50cmFuY2VMb2NhdGlvbi5zcGF3bnMucHVzaCh0cmlnZ2VyU3Bhd24pO1xufVxuXG5jb25zdCB0cmlnZ2VyRGlyZWN0aW9uQWRqdXN0bWVudHMgPSBbMHgxMCwgMCwgMCwgMF07XG5cbi8qKlxuICogTW92ZXMgXCJjbG9zZWRcIiBjYXZlcy4gIE5vcm1hbGx5IFNjcmVlbkZpeCBtYXJrcyB0aGUgc2VhbGVkIGNhdmUgZXhpdFxuICogb24gQ29yZGVsIGFuZCB0aGUgTXQgU2FicmUgc3VtbWl0IGNhdmUgZXhpdCBvbiBXYXRlcmZhbGwgVmFsbGV5IGFzXG4gKiBjbG9zZWQgYnkgc2V0dGluZyBhIGN1c3RvbSBmbGFnLiAgSW5zdGVhZCwgd2FsayB0aHJvdWdoIHRoZSBjYXZlcyB0b1xuICogZGV0ZXJtaW5lIGFueSBjYXZlIGV4aXRzIHRoZXkgY29ubmVjdCB0by4gIFRoaXMgaXMgXCJiZXN0IGVmZm9ydFwiOiBpZlxuICogd2UgcnVuIGludG8gcHJvYmxlbXMsIGp1c3QgbGVhdmUgaXQgb3Blbi5cbiAqL1xuZnVuY3Rpb24gZml4Q2xvc2VkQ2F2ZUV4aXRzKHJvbTogUm9tKSB7XG4gIGNvbnN0IHtsb2NhdGlvbnM6IHtNdFNhYnJlTm9ydGhfTWFpbiwgVmFsbGV5T2ZXaW5kfX0gPSByb207XG4gIGZvciAoY29uc3QgbG9jUG9zIG9mIGZpbmRDbG9zZWRDYXZlRXhpdHMoVmFsbGV5T2ZXaW5kLCAweDExKSkge1xuICAgIGNvbnN0IGxvYyA9IHJvbS5sb2NhdGlvbnNbbG9jUG9zID4+PiA4XTtcbiAgICBjb25zdCBwb3MgPSBsb2NQb3MgJiAweGZmO1xuICAgIHNldEN1c3RvbUZsYWcobG9jLCBwb3MsIHJvbS5mbGFncy5PcGVuZWRTZWFsZWRDYXZlKTtcbiAgfVxuICBmb3IgKGNvbnN0IGxvY1BvcyBvZiBmaW5kQ2xvc2VkQ2F2ZUV4aXRzKE10U2FicmVOb3J0aF9NYWluLCAweDA0KSkge1xuICAgIGNvbnN0IGxvYyA9IHJvbS5sb2NhdGlvbnNbbG9jUG9zID4+PiA4XTtcbiAgICBpZiAobG9jLmRhdGEuZml4ZWQpIGNvbnRpbnVlOyAvLyBkb24ndCBhZGQgaWYgdGhlcmUncyBhIGZpeGVkIHNsb3RcbiAgICBpZiAobG9jLnNwYXducy5sZW5ndGggPiAxNSkgY29udGludWU7IC8vIG5vdCBlbm91Z2ggcm9vbSB0byBhZGQgc3Bhd25zXG4gICAgY29uc3QgcG9zID0gbG9jUG9zICYgMHhmZjtcbiAgICBzZXRDdXN0b21GbGFnKGxvYywgcG9zLCByb20uZmxhZ3MuT3BlbmVkUHJpc29uKTtcbiAgICBjb25zdCBjb29yZCA9IGxvYy5tZXRhLmdldChwb3MpLmZpbmRFeGl0QnlUeXBlKCdjYXZlJykuZW50cmFuY2U7XG4gICAgY29uc3Qga2V5VHJpZ2dlciA9IFNwYXduLm9mKHtzY3JlZW46IHBvcywgY29vcmQ6IGNvb3JkLCB0eXBlOiAyLCBpZDogMHhhZH0pO1xuICAgIGxvYy5zcGF3bnMucHVzaChrZXlUcmlnZ2VyKTtcbiAgICBpZiAobG9jLnNwYXducy5sZW5ndGggPiAxNSkgY29udGludWU7IC8vIGlzIHRoaXMgYSBwcm9ibGVtPyBjb3VsZCB3ZSBhZC1ob2M/XG4gICAgY29uc3QgZXhwbG9zaW9uID0gU3Bhd24ub2Yoe3NjcmVlbjogcG9zLCBjb29yZDogY29vcmQgLSAweDEwMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDQsIGlkOiAweDJjfSk7XG4gICAgbG9jLnNwYXducy5zcGxpY2UoMSwgMCwgZXhwbG9zaW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2VkQ2F2ZUV4aXRzKGxvYzogTG9jYXRpb24sIHBvczogUG9zKTogbnVtYmVyW10ge1xuICBjb25zdCBzZWVuID0gbmV3IFNldDxMb2NhdGlvbnxudW1iZXI+KFtsb2MsIGxvYy5pZCA8PCA4IHwgcG9zXSk7XG4gIGNvbnN0IHF1ZXVlID0gbmV3IFNldDxFeGl0U3BlYz4oKTtcbiAgZm9yIChjb25zdCBleGl0IG9mIGxvYy5tZXRhLmV4aXRzKCkpIHtcbiAgICBpZiAoZXhpdFswXSA9PT0gcG9zICYmIChleGl0WzFdID09PSAnY2F2ZScgfHwgZXhpdFsxXSA9PT0gJ2dhdGUnKSkge1xuICAgICAgcXVldWUuYWRkKGV4aXRbMl0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBvdXQ6IG51bWJlcltdID0gW107XG5cbiAgLy8gLy8gVEVTVCBDQVZFU1xuICAvLyBpZiAocG9zID09PSAweDExKSB7XG4gIC8vICAgZm9yIChjb25zdCBzY3Igb2YgWzB4N2MsIDB4N2VdKSB7XG4gIC8vICAgICBmb3IgKGNvbnN0IGUgb2YgbG9jLnJvbS5sb2NhdGlvbnNbc2NyXS5tZXRhLmV4aXRzKCkpIHtcbiAgLy8gICAgICAgaWYgKGVbMV0gPT09ICdjYXZlJyB8fCBlWzFdID09PSAnZ2F0ZScpIG91dC5wdXNoKHNjciA8PCA4IHwgZVswXSk7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyB9XG5cbiAgZm9yIChjb25zdCBleGl0IG9mIHF1ZXVlKSB7XG4gICAgaWYgKHNlZW4uaGFzKGV4aXRbMF0pKSBjb250aW51ZTtcbiAgICBjb25zdCBleGl0TG9jID0gbG9jLnJvbS5sb2NhdGlvbnNbZXhpdFswXSA+Pj4gOF07XG4gICAgY29uc3QgZXhpdFBvcyA9IGV4aXRbMF0gJiAweGZmO1xuICAgIGlmIChleGl0TG9jLm1ldGEuY3VzdG9tRmxhZ3MuaGFzKGV4aXRQb3MpKSBjb250aW51ZTsgLy8gYWxyZWFkeSBibG9ja2VkXG4gICAgaWYgKGV4aXRbMV0gPT09ICdjYXZlJyB8fCBleGl0WzFdID09PSAnZ2F0ZScpIHsgLy8gRm91bmQgYSBjYXZlXG4gICAgICBjb25zdCBzY3IgPSBleGl0TG9jLm1ldGEuZ2V0KGV4aXRQb3MpO1xuICAgICAgaWYgKHNjci5mbGFnID09PSAnY3VzdG9tOnRydWUnKSB7XG4gICAgICAgIG91dC5wdXNoKGV4aXRbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTm8gZmxhZyBmb3IgJHtzY3IubmFtZX1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoc2Vlbi5oYXMoZXhpdExvYykpIGNvbnRpbnVlO1xuICAgIHNlZW4uYWRkKGV4aXRMb2MpO1xuICAgIGZvciAoY29uc3QgZW50cmFuY2Ugb2YgZXhpdExvYy5tZXRhLmV4aXRzKCkpIHtcbiAgICAgIC8vIERvbid0IHJlY3Vyc2UgaW50byBhIGRpZmZlcmVudCBjYXZlXG4gICAgICBpZiAoZW50cmFuY2VbMV0gPT09ICdjYXZlJyB8fCBlbnRyYW5jZVsxXSA9PT0gJ2dhdGUnKSBjb250aW51ZTtcbiAgICAgIHF1ZXVlLmFkZChlbnRyYW5jZVsyXSk7XG4gICAgfVxuICB9XG4gIGNvbnNvbGUubG9nKGBGcm9tICR7bG9jfTogJHtvdXQubWFwKHg9PngudG9TdHJpbmcoMTYpKX1gKTs7XG4gIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIHNldEN1c3RvbUZsYWcobG9jOiBMb2NhdGlvbiwgcG9zOiBQb3MsIHZhbDogRmxhZ3xudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICBub01pcnJvcj86IGJvb2xlYW4pIHtcbiAgaWYgKHZhbCkge1xuICAgIGxvYy5tZXRhLmN1c3RvbUZsYWdzLnNldChwb3MsIHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgbG9jLm1ldGEuY3VzdG9tRmxhZ3MuZGVsZXRlKHBvcyk7XG4gIH1cbiAgaWYgKG5vTWlycm9yKSByZXR1cm47XG4gIGlmIChsb2MgPT09IGxvYy5yb20ubG9jYXRpb25zLkNvcmRlbFBsYWluRWFzdCkge1xuICAgIHNldEN1c3RvbUZsYWcobG9jLnJvbS5sb2NhdGlvbnMuQ29yZGVsUGxhaW5XZXN0LCBwb3MsIHZhbCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAobG9jID09PSBsb2Mucm9tLmxvY2F0aW9ucy5Db3JkZWxQbGFpbldlc3QpIHtcbiAgICBzZXRDdXN0b21GbGFnKGxvYy5yb20ubG9jYXRpb25zLkNvcmRlbFBsYWluRWFzdCwgcG9zLCB2YWwsIHRydWUpO1xuICB9XG59XG4iXX0=