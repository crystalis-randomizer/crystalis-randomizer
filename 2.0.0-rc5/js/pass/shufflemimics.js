import { iters } from '../util.js';
export function shuffleMimics(rom, flags, random) {
    const chests = [];
    const mimics = [];
    for (const location of rom.locations) {
        if (INELIGIBLE_LOCATIONS.has(location.id))
            continue;
        for (const spawn of location.spawns) {
            if (spawn.isChest()) {
                const slot = rom.slots[spawn.id];
                if (slot >= 0x70)
                    mimics.push(spawn.id);
                if (flags.preserveUniqueChecks()) {
                    const itemget = rom.itemGets[slot];
                    const item = rom.items[itemget === null || itemget === void 0 ? void 0 : itemget.itemId];
                    if (item === null || item === void 0 ? void 0 : item.unique)
                        continue;
                }
                if (spawn.isInvisible())
                    continue;
                chests.push(spawn.id);
            }
        }
    }
    random.shuffle(chests);
    [...iters.zip(mimics, chests, (i, j) => rom.slots.swap(i, j))];
}
const INELIGIBLE_LOCATIONS = new Set([
    0xb6,
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZW1pbWljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3NodWZmbGVtaW1pY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVqQyxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVEsRUFBRSxLQUFjLEVBQUUsTUFBYztJQUdwRSxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLEtBQUssTUFBTSxRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUNwQyxJQUFJLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQUUsU0FBUztRQUNwRCxLQUFLLE1BQU0sS0FBSyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBRW5CLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLElBQUksSUFBSSxJQUFJO29CQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFO29CQUNoQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUMsQ0FBQztvQkFDeEMsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsTUFBTTt3QkFBRSxTQUFTO2lCQUM1QjtnQkFDRCxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7b0JBQUUsU0FBUztnQkFFbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdkI7U0FDRjtLQUNGO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUd2QixDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBRUQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUNuQyxJQUFJO0NBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGbGFnU2V0fSBmcm9tICcuLi9mbGFnc2V0LmpzJztcbmltcG9ydCB7UmFuZG9tfSBmcm9tICcuLi9yYW5kb20uanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge2l0ZXJzfSBmcm9tICcuLi91dGlsLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVNaW1pY3Mocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0LCByYW5kb206IFJhbmRvbSkge1xuICAvLyBOT1RFOiBpZiBmbGFncy5wcmVzZXJ2ZVVuaXF1ZUNoZWNrcygpIHRoZW4gb25seSBkbyBub251bmlxdWUgY2hlc3RzXG4gIC8vIDEuIGdhdGhlciBhbGwgdGhlIGNoZXN0c1xuICBjb25zdCBjaGVzdHM6IG51bWJlcltdID0gW107XG4gIGNvbnN0IG1pbWljczogbnVtYmVyW10gPSBbXTtcbiAgZm9yIChjb25zdCBsb2NhdGlvbiBvZiByb20ubG9jYXRpb25zKSB7XG4gICAgaWYgKElORUxJR0lCTEVfTE9DQVRJT05TLmhhcyhsb2NhdGlvbi5pZCkpIGNvbnRpbnVlO1xuICAgIGZvciAoY29uc3Qgc3Bhd24gb2YgbG9jYXRpb24uc3Bhd25zKSB7XG4gICAgICBpZiAoc3Bhd24uaXNDaGVzdCgpKSB7XG4gICAgICAgIC8vIElzIHRoaXMgYW4gZWxpZ2libGUgY2hlc3Q/XG4gICAgICAgIGNvbnN0IHNsb3QgPSByb20uc2xvdHNbc3Bhd24uaWRdO1xuICAgICAgICBpZiAoc2xvdCA+PSAweDcwKSBtaW1pY3MucHVzaChzcGF3bi5pZCk7XG4gICAgICAgIGlmIChmbGFncy5wcmVzZXJ2ZVVuaXF1ZUNoZWNrcygpKSB7XG4gICAgICAgICAgY29uc3QgaXRlbWdldCA9IHJvbS5pdGVtR2V0c1tzbG90XTtcbiAgICAgICAgICBjb25zdCBpdGVtID0gcm9tLml0ZW1zW2l0ZW1nZXQ/Lml0ZW1JZF07XG4gICAgICAgICAgaWYgKGl0ZW0/LnVuaXF1ZSkgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwYXduLmlzSW52aXNpYmxlKCkpIGNvbnRpbnVlO1xuICAgICAgICAvLyBBZGQgZWxpZ2libGUgY2hlc3RzXG4gICAgICAgIGNoZXN0cy5wdXNoKHNwYXduLmlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gMi4gc2h1ZmZsZSB0aGUgY2hlc3RzLlxuICByYW5kb20uc2h1ZmZsZShjaGVzdHMpO1xuICAvLyAzLiB6aXAgdGhlIGNoZXN0cyBhbmQgbWltaWNzIHRvZ2V0aGVyIGFuZCBzd2FwLlxuICAvLyBOT1RFOiBzcHJlYWQgdGhlIHJlc3VsdCBzaW5jZSBvdGhlcndpc2UgemlwIGlzIGxhenkuXG4gIFsuLi5pdGVycy56aXAobWltaWNzLCBjaGVzdHMsIChpLCBqKSA9PiByb20uc2xvdHMuc3dhcChpLCBqKSldO1xufVxuXG5jb25zdCBJTkVMSUdJQkxFX0xPQ0FUSU9OUyA9IG5ldyBTZXQoW1xuICAweGI2LCAvLyBDaGVzdCBiZWhpbmQgS2FybWluZSAtIGdyYXBoaWNzIGFyZSBpbmNvbXBhdGlibGUuXG5dKTtcbiJdfQ==