import { Entity, EntityArray } from './entity.js';
export class ObjectAction extends Entity {
    constructor(parent, id, type, data = {}) {
        super(parent.rom, id);
        this.type = type;
        this.data = data;
        parent[id] = this;
    }
}
export class ObjectActions extends EntityArray {
    constructor(rom) {
        super();
        this.rom = rom;
        this.straightShotOptionalBounce = new ObjectAction(this, 0x10, 'projectile');
        this.straightShotNoBounce = new ObjectAction(this, 0x11, 'projectile');
        this.madoShuriken = new ObjectAction(this, 0x16, 'projectile');
        this.demonWallFire = new ObjectAction(this, 0x17, 'projectile');
        this.popcorn = new ObjectAction(this, 0x1b, 'projectile');
        this.harpoonSource = new ObjectAction(this, 0x1d, 'source');
        this.lasers = new ObjectAction(this, 0x1e, 'projectile');
        this.paralysisPowder = new ObjectAction(this, 0x1f, 'projectile');
        this.randomMovement = new ObjectAction(this, 0x20, 'monster', {
            movement: 1,
        });
        this.randomLargeStoner = new ObjectAction(this, 0x21, 'monster', {
            hasChild: true,
            large: true,
            movement: 2,
        });
        this.slowHoming = new ObjectAction(this, 0x22, 'monster', {
            hasChild: true,
            movement: 3,
        });
        this.smallHoming1 = new ObjectAction(this, 0x24, 'monster', {
            movement: 3,
        });
        this.smallHoming2 = new ObjectAction(this, 0x25, 'monster', {
            movement: 3,
        });
        this.homingShooter1 = new ObjectAction(this, 0x26, 'monster', {
            hasChild: true,
            projectile: 1,
            movement: 3,
        });
        this.homingShooter2 = new ObjectAction(this, 0x27, 'monster', {
            hasChild: true,
            projectile: 1,
            movement: 3,
        });
        this.headShooter = new ObjectAction(this, 0x28, 'monster', {
            hasChild: true,
            projectile: 2,
            movement: 3,
            metasprites: () => [0x65, 0x91],
        });
        this.puddle = new ObjectAction(this, 0x29, 'monster', {
            hasChild: true,
            movement: 5,
            metasprites: () => [0x6b, 0x68],
        });
        this.soldier = new ObjectAction(this, 0x2a, 'monster', {
            hasChild: true,
            projectile: 1,
            movement: 4,
            metasprites: (o) => [0, 1, 2, 3].map(x => x + o.data[31]),
        });
        this.mimic = new ObjectAction(this, 0x2b, 'monster', {
            movement: 4,
        });
        this.mothResidueSource = new ObjectAction(this, 0x2c, 'source', {
            hasChild: true,
        });
        this.flailGuy = new ObjectAction(this, 0x2e, 'monster', {
            hasChild: true,
            large: true,
            projectile: 2,
            movement: 3,
        });
        this.dynaLaser = new ObjectAction(this, 0x2f, 'projectile');
        this.guardianStatue = new ObjectAction(this, 0x34, 'source', {
            hasChild: true,
        });
        this.movingPlatform = new ObjectAction(this, 0x38, 'other');
        this.crumblingMovingPlatform = new ObjectAction(this, 0x3c, 'other');
        this.erraticFlyer = new ObjectAction(this, 0x40, 'monster', {
            hasChild: true,
            moth: true,
            movement: 4,
            placement: 'moth',
        });
        this.skeleton = new ObjectAction(this, 0x41, 'monster', {
            hasChild: true,
            movement: 3,
        });
        this.swampTomato = new ObjectAction(this, 0x44, 'monster', {
            movement: 3,
        });
        this.shootingFlyer = new ObjectAction(this, 0x45, 'monster', {
            hasChild: true,
            bird: true,
            projectile: 2,
            movement: 5,
            placement: 'bird',
        });
        this.swampPlant = new ObjectAction(this, 0x4c, 'monster', {
            hasChild: true,
            stationary: true,
            projectile: 3,
            placement: 'plant',
        });
        this.kraken = new ObjectAction(this, 0x4d, 'monster', {
            hasChild: true,
            stationary: true,
            projectile: 3,
        });
        this.burt = new ObjectAction(this, 0x4e, 'monster', {
            hasChild: true,
            stationary: true,
        });
        this.dynaShot = new ObjectAction(this, 0x57, 'projectile', {});
        this.popcorn2 = new ObjectAction(this, 0x58, 'projectile');
        this.towerSentinel = new ObjectAction(this, 0x5c, 'monster', {
            hasChild: true,
            projectile: 3,
            movement: 1,
        });
        this.helicopter = new ObjectAction(this, 0x5d, 'monster', {
            bird: true,
            movement: 6,
            placement: 'bird',
        });
        this.whiteRobot = new ObjectAction(this, 0x5e, 'monster', {
            hasChild: true,
            projectile: 1,
            movement: 4,
            metasprites: (o) => [0, 1, 2, 3].map(x => x + o.data[31]),
        });
        this.vampire = new ObjectAction(this, 0x60, 'boss');
        this.vampireBat = new ObjectAction(this, 0x61, 'monster');
        this.kelbesque = new ObjectAction(this, 0x63, 'boss');
        this.kelbesqueRock = new ObjectAction(this, 0x64, 'projectile');
        this.sabera = new ObjectAction(this, 0x66, 'boss');
        this.mado = new ObjectAction(this, 0x67, 'boss');
        this.karmine = new ObjectAction(this, 0x68, 'boss');
        this.draygon1 = new ObjectAction(this, 0x6a, 'boss');
        this.draygon2 = new ObjectAction(this, 0x6b, 'boss');
        this.dyna = new ObjectAction(this, 0x70, 'boss');
        this.giantBug = new ObjectAction(this, 0x7f, 'boss');
    }
}
//# sourceMappingURL=data:application/json;base64,