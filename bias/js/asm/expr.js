import { Token } from './token.js';
export var Expr;
(function (Expr) {
    function jsSource(e) {
        return e.source ?
            { source: { parent: e.source, file: 'js', line: 0, column: 0 } } : {};
    }
    function loByte(e) {
        return { op: '<', args: [e], ...jsSource(e) };
    }
    Expr.loByte = loByte;
    function hiByte(e) {
        return { op: '>', args: [e], ...jsSource(e) };
    }
    Expr.hiByte = hiByte;
    function traverse(expr, f) {
        function rec(e) {
            if (!e.args)
                return e;
            return { ...e, args: e.args.map(c => t(c, e)) };
        }
        ;
        function t(e, p) {
            const source = e.source;
            e = f(e, rec, p);
            if (source && !e.source)
                e.source = source;
            return e;
        }
        return t(expr);
    }
    Expr.traverse = traverse;
    function traversePost(expr, f) {
        return traverse(expr, (expr, rec) => f(rec(expr)));
    }
    Expr.traversePost = traversePost;
    function evaluate(expr) {
        var _a, _b, _c, _d;
        switch (expr.op) {
            case '.move':
            case 'im':
            case 'sym':
                return expr;
            case 'num':
                if (((_a = expr.meta) === null || _a === void 0 ? void 0 : _a.rel) && expr.meta.org != null) {
                    const { rel, ...meta } = expr.meta;
                    return { op: 'num', num: expr.num + meta.org, meta };
                }
                return expr;
            case '.max': return sameChunk(expr, Math.max);
            case '.min': return sameChunk(expr, Math.min);
            default:
        }
        if (((_b = expr.args) === null || _b === void 0 ? void 0 : _b.length) === 1) {
            switch (expr.op) {
                case '+': return expr.args[0];
                case '-': return unary(expr, x => -x);
                case '~': return unary(expr, x => ~x);
                case '!': return unary(expr, x => +!x);
                case '<': return unary(expr, x => x & 0xff);
                case '>': return unary(expr, x => (x >> 8) & 0xff);
                case '^': return (_d = num((_c = expr.args[0].meta) === null || _c === void 0 ? void 0 : _c.bank)) !== null && _d !== void 0 ? _d : expr;
                default: throw new Error(`Unknown unary operator: ${expr.op}`);
            }
        }
        switch (expr.op) {
            case '+': return plus(expr);
            case '-': return minus(expr);
            case '*': return binary(expr, (a, b) => a * b);
            case '/': return binary(expr, (a, b) => Math.floor(a / b));
            case '.mod': return binary(expr, (a, b) => a % b);
            case '&': return binary(expr, (a, b) => a & b);
            case '|': return binary(expr, (a, b) => a | b);
            case '^': return binary(expr, (a, b) => a ^ b);
            case '<<': return binary(expr, (a, b) => a << b);
            case '>>': return binary(expr, (a, b) => a >>> b);
            case '<': return binary(expr, (a, b) => +(a < b));
            case '<=': return binary(expr, (a, b) => +(a <= b));
            case '>': return binary(expr, (a, b) => +(a > b));
            case '>=': return binary(expr, (a, b) => +(a >= b));
            case '=': return binary(expr, (a, b) => +(a == b));
            case '<>': return binary(expr, (a, b) => +(a != b));
            case '&&': return binary(expr, (a, b) => a && b);
            case '||': return binary(expr, (a, b) => a || b);
            case '.xor': return binary(expr, (a, b) => !a && b || !b && a || 0);
            default: throw new Error(`Unknown operator: ${expr.op}`);
        }
    }
    Expr.evaluate = evaluate;
    function identifier(expr) {
        if (expr.op === 'sym' && expr.sym)
            return expr.sym;
        throw new Error(`Expected identifier but got op: ${expr.op}`);
    }
    Expr.identifier = identifier;
    function parseOnly(tokens, index = 0) {
        const [expr, i] = parse(tokens, index);
        if (i < tokens.length) {
            parse(tokens, index);
            throw new Error(`Garbage after expression: ${Token.nameAt(tokens[i])}`);
        }
        else if (!expr) {
            throw new Error(`No expression?`);
        }
        return expr;
    }
    Expr.parseOnly = parseOnly;
    function parse(tokens, index = 0) {
        const ops = [];
        const exprs = [];
        function popOp() {
            const [op, [, , arity]] = ops.pop();
            const args = exprs.splice(exprs.length - arity, arity);
            if (args.length !== arity)
                throw new Error('shunting parse failed?');
            exprs.push(fixSize({ op, args }));
        }
        let val = true;
        let i = index;
        for (; i < tokens.length; i++) {
            const front = tokens[i];
            if (val) {
                if (front.token === 'cs' || front.token === 'op') {
                    const mapped = NAME_MAP.get(front.str);
                    const prefix = PREFIXOPS.get(mapped !== null && mapped !== void 0 ? mapped : front.str);
                    if (prefix) {
                        ops.push([front.str, prefix]);
                    }
                    else if (front.token === 'cs') {
                        const op = front.str;
                        if (!FUNCTIONS.has(op)) {
                            throw new Error(`No such function: ${Token.nameAt(front)}`);
                        }
                        const next = tokens[i + 1];
                        if ((next === null || next === void 0 ? void 0 : next.token) !== 'lp') {
                            throw new Error(`Bad funcall: ${Token.nameAt(next !== null && next !== void 0 ? next : front)}`);
                        }
                        const close = Token.findBalanced(tokens, i + 1);
                        if (close < 0) {
                            throw new Error(`Never closed: ${Token.nameAt(next)}`);
                        }
                        const args = [];
                        for (const arg of Token.parseArgList(tokens, i + 2, close)) {
                            args.push(parseOnly(arg));
                        }
                        i = close;
                        exprs.push(fixSize({ op, args }));
                        val = false;
                    }
                    else if (Token.eq(front, Token.STAR)) {
                        exprs.push({ op: 'sym', sym: '*' });
                        val = false;
                    }
                    else {
                        throw new Error(`Unknown prefix operator: ${Token.nameAt(front)}`);
                    }
                }
                else if (front.token === 'lp') {
                    const close = Token.findBalanced(tokens, i);
                    if (close < 0) {
                        throw new Error(`No close paren: ${Token.nameAt(front)}`);
                    }
                    const e = parseOnly(tokens.slice(i + 1, close));
                    exprs.push(e);
                    i = close;
                    val = false;
                }
                else if (front.token === 'ident') {
                    exprs.push({ op: 'sym', sym: front.str });
                    val = false;
                }
                else if (front.token === 'num') {
                    const num = front.num;
                    exprs.push({ op: 'num', num, meta: size(num) });
                    val = false;
                }
                else {
                    throw new Error(`Bad expression token: ${Token.nameAt(front)}`);
                }
            }
            else {
                if (Token.eq(front, Token.COMMA)) {
                    break;
                }
                if (front.token === 'cs' || front.token === 'op') {
                    const mapped = NAME_MAP.get(front.str);
                    const op = BINOPS.get(mapped !== null && mapped !== void 0 ? mapped : front.str);
                    if (!op)
                        break;
                    while (ops.length) {
                        const top = ops[ops.length - 1];
                        const cmp = compareOp(top[1], op);
                        if (cmp < 0)
                            break;
                        if (cmp === 0) {
                            throw new Error(`Mixing ${top[0]} and ${front.str} needs explicit parens.${Token.at(front)}`);
                        }
                        popOp();
                    }
                    ops.push([front.str, op]);
                    val = true;
                }
                else {
                    break;
                }
            }
        }
        while (ops.length)
            popOp();
        if (exprs.length !== 1)
            throw new Error(`shunting parse failed?`);
        if (tokens[index].source)
            exprs[0].source = tokens[index].source;
        return [exprs[0], i];
    }
    Expr.parse = parse;
    function sameChunk(expr, f) {
        throw new Error();
    }
    function num(num) {
        if (num == null)
            return undefined;
        return { op: 'num', num, meta: size(num) };
    }
    function unary(expr, f) {
        const arg = expr.args[0];
        if (!isAbs(arg))
            return expr;
        const num = f(arg.num);
        return { op: 'num', num, meta: size(num) };
    }
    function binary(expr, f) {
        const [a, b] = expr.args;
        if (!isAbs(a) || !isAbs(b))
            return expr;
        const num = f(a.num, b.num);
        return { op: 'num', num, meta: size(num) };
    }
    function plus(expr) {
        var _a, _b, _c, _d, _e, _f;
        const [a, b] = expr.args;
        if (a.op !== 'num' || b.op !== 'num')
            return expr;
        const out = { op: 'num', num: a.num + b.num };
        if (a.meta || b.meta) {
            if (((_a = a.meta) === null || _a === void 0 ? void 0 : _a.rel) && ((_b = b.meta) === null || _b === void 0 ? void 0 : _b.rel))
                return expr;
            if ((_c = a.meta) === null || _c === void 0 ? void 0 : _c.rel) {
                out.meta = a.meta;
            }
            else if ((_d = b.meta) === null || _d === void 0 ? void 0 : _d.rel) {
                out.meta = b.meta;
            }
        }
        if (!((_e = out.meta) === null || _e === void 0 ? void 0 : _e.rel) && ((_f = out.meta) === null || _f === void 0 ? void 0 : _f.size) == null) {
            (out.meta || (out.meta = {})).size = size(out.num).size;
        }
        return out;
    }
    function minus(expr) {
        var _a, _b, _c, _d, _e;
        const [a, b] = expr.args;
        if (a.op !== 'num' || b.op !== 'num')
            return expr;
        const out = { op: 'num', num: a.num - b.num };
        if ((_a = b.meta) === null || _a === void 0 ? void 0 : _a.rel) {
            return ((_b = a.meta) === null || _b === void 0 ? void 0 : _b.rel) && a.meta.chunk === b.meta.chunk ? out : expr;
        }
        if ((_c = a.meta) === null || _c === void 0 ? void 0 : _c.rel)
            out.meta = a.meta;
        if (!((_d = out.meta) === null || _d === void 0 ? void 0 : _d.rel) && ((_e = out.meta) === null || _e === void 0 ? void 0 : _e.size) == null) {
            (out.meta || (out.meta = {})).size = size(out.num).size;
        }
        return out;
    }
    function isAbs(expr) {
        var _a;
        return expr.op === 'num' && !((_a = expr.meta) === null || _a === void 0 ? void 0 : _a.rel);
    }
})(Expr || (Expr = {}));
function compareOp(top, next) {
    if (top[0] > next[0])
        return 1;
    if (top[0] < next[0])
        return -1;
    if (top[1] !== next[1])
        return 0;
    return top[1];
}
const BINARY = 2;
const UNARY = 1;
export const BINOPS = new Map([
    ['*', [5, 4, BINARY]],
    ['/', [5, 4, BINARY]],
    ['.mod', [5, 3, BINARY]],
    ['&', [5, 2, BINARY]],
    ['^', [5, 1, BINARY]],
    ['<<', [5, 0, BINARY]],
    ['>>', [5, 0, BINARY]],
    ['+', [4, 2, BINARY]],
    ['-', [4, 2, BINARY]],
    ['|', [4, 1, BINARY]],
    ['<', [3, 0, BINARY]],
    ['<=', [3, 0, BINARY]],
    ['>', [3, 0, BINARY]],
    ['>=', [3, 0, BINARY]],
    ['=', [3, 0, BINARY]],
    ['<>', [3, 0, BINARY]],
    ['&&', [2, 3, BINARY]],
    ['.xor', [2, 2, BINARY]],
    ['||', [2, 1, BINARY]],
]);
const PREFIXOPS = new Map([
    ['+', [9, -1, UNARY]],
    ['-', [9, -1, UNARY]],
    ['~', [9, -1, UNARY]],
    ['<', [9, -1, UNARY]],
    ['>', [9, -1, UNARY]],
    ['^', [9, -1, UNARY]],
    ['!', [2, -1, UNARY]],
]);
const FUNCTIONS = new Set([
    '.byteat',
    '.wordat',
    '.max', '.min',
]);
const NAME_MAP = new Map([
    ['.bitand', '&'],
    ['.bitxor', '^'],
    ['.bitor', '|'],
    ['.shl', '<<'],
    ['.shr', '>>'],
    ['.and', '&&'],
    ['.or', '||'],
    ['.bitnot', '~'],
    ['.lobyte', '<'],
    ['.hibyte', '>'],
    ['.bankbyte', '^'],
    ['.not', '!'],
]);
const SIZE_TRANSFORMS = new Map([
    ['^', (...args) => args.length === 1 ? 1 : Math.max(...args)],
    ['<', () => 1],
    ['>', () => 1],
    ['!', () => 1],
    ['<=', () => 1],
    ['>=', () => 1],
    ['<>', () => 1],
    ['=', () => 1],
    ['&', Math.max],
    ['&&', Math.max],
    ['|', Math.max],
    ['||', Math.max],
    ['.xor', Math.max],
    ['.max', Math.max],
    ['.min', Math.max],
]);
function fixSize(expr) {
    const xform = SIZE_TRANSFORMS.get(expr.op);
    const size = xform === null || xform === void 0 ? void 0 : xform(...expr.args.map(e => { var _a; return Number((_a = e.meta) === null || _a === void 0 ? void 0 : _a.size); }));
    if (size)
        (expr.meta || (expr.meta = {})).size = size;
    return expr;
}
function size(num) {
    return { size: 0 <= num && num < 256 ? 1 : 2 };
}
//# sourceMappingURL=data:application/json;base64,