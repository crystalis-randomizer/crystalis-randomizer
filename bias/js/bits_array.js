export const BitsArray = {
    of: (...nums) => {
        const bits = [];
        for (const num of nums) {
            bits[num >>> 5] = (bits[num >>> 5] || 0) | (1 << num);
        }
        return bits;
    },
    from: (nums) => {
        const bits = [];
        for (const num of nums) {
            bits[num >>> 5] = (bits[num >>> 5] || 0) | (1 << num);
        }
        return bits;
    },
    containsAll: (superset, subset) => {
        for (let i = Math.max(superset.length, subset.length) - 1; i >= 0; i--) {
            if ((subset[i] || 0) & ~(superset[i] || 0))
                return false;
        }
        return true;
    },
    difference: (left, right) => {
        const out = new Array(Math.max(left.length, right.length));
        for (let i = Math.max(left.length, right.length) - 1; i >= 0; i--) {
            out[i] = (left[i] || 0) & ~(right[i] || 0);
        }
        return out;
    },
    union: (left, right) => {
        const out = new Array(Math.max(left.length, right.length));
        for (let i = Math.max(left.length, right.length) - 1; i >= 0; i--) {
            out[i] = (left[i] || 0) | (right[i] || 0);
        }
        return out;
    },
    with: (bits, num) => {
        bits = [...bits];
        bits[num >>> 5] = (bits[num >>> 5] || 0) | (1 << num);
        return bits;
    },
    without: (bits, num) => {
        bits = [...bits];
        bits[num >>> 5] = (bits[num >>> 5] || 0) & ~(1 << num);
        return bits;
    },
    has: (bits, num) => !!((bits[num >>> 5] || 0) & (1 << num)),
    bits: (bits) => {
        const out = [];
        for (let i = 0; i < bits.length; i++) {
            let x = bits[i];
            let y = 32;
            while (x) {
                const z = Math.clz32(x) + 1;
                y -= z;
                x <<= z;
                if (z === 32)
                    x = 0;
                out.push((i << 5) | y);
            }
        }
        return out;
    },
    clone: (x) => [...x],
    empty: (x) => x.every(b => !b),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYml0c19hcnJheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9iaXRzX2FycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBNEI7SUFDaEQsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRTtRQUNkLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUMxQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUN2RDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2IsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFDO1FBQzFCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0RSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1NBQzFEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzFCLE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMzRCxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDckIsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzNELEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNqRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLEVBQUUsQ0FBQyxJQUFjLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDNUIsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLEVBQUUsQ0FBQyxJQUFjLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUUzRCxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNiLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDWCxPQUFPLENBQUMsRUFBRTtnQkFDUixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDUCxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNSLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4QjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBCLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0JpdHNOYW1lc3BhY2V9IGZyb20gJy4vYml0c19iYXNlLmpzJztcblxuZXhwb3J0IGNvbnN0IEJpdHNBcnJheTogQml0c05hbWVzcGFjZTxudW1iZXJbXT4gPSB7XG4gIG9mOiAoLi4ubnVtcykgPT4ge1xuICAgIGNvbnN0IGJpdHM6IG51bWJlcltdID0gW107XG4gICAgZm9yIChjb25zdCBudW0gb2YgbnVtcykge1xuICAgICAgYml0c1tudW0gPj4+IDVdID0gKGJpdHNbbnVtID4+PiA1XSB8fCAwKSB8ICgxIDw8IG51bSk7XG4gICAgfVxuICAgIHJldHVybiBiaXRzO1xuICB9LFxuXG4gIGZyb206IChudW1zKSA9PiB7XG4gICAgY29uc3QgYml0czogbnVtYmVyW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IG51bSBvZiBudW1zKSB7XG4gICAgICBiaXRzW251bSA+Pj4gNV0gPSAoYml0c1tudW0gPj4+IDVdIHx8IDApIHwgKDEgPDwgbnVtKTtcbiAgICB9XG4gICAgcmV0dXJuIGJpdHM7XG4gIH0sXG5cbiAgY29udGFpbnNBbGw6IChzdXBlcnNldCwgc3Vic2V0KSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KHN1cGVyc2V0Lmxlbmd0aCwgc3Vic2V0Lmxlbmd0aCkgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKChzdWJzZXRbaV0gfHwgMCkgJiB+KHN1cGVyc2V0W2ldIHx8IDApKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIGRpZmZlcmVuY2U6IChsZWZ0LCByaWdodCkgPT4ge1xuICAgIGNvbnN0IG91dCA9IG5ldyBBcnJheShNYXRoLm1heChsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKSk7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGxlZnQubGVuZ3RoLCByaWdodC5sZW5ndGgpIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIG91dFtpXSA9IChsZWZ0W2ldIHx8IDApICYgfihyaWdodFtpXSB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfSxcblxuICB1bmlvbjogKGxlZnQsIHJpZ2h0KSA9PiB7XG4gICAgY29uc3Qgb3V0ID0gbmV3IEFycmF5KE1hdGgubWF4KGxlZnQubGVuZ3RoLCByaWdodC5sZW5ndGgpKTtcbiAgICBmb3IgKGxldCBpID0gTWF0aC5tYXgobGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCkgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgb3V0W2ldID0gKGxlZnRbaV0gfHwgMCkgfCAocmlnaHRbaV0gfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH0sXG5cbiAgd2l0aDogKGJpdHM6IG51bWJlcltdLCBudW0pID0+IHtcbiAgICBiaXRzID0gWy4uLmJpdHNdO1xuICAgIGJpdHNbbnVtID4+PiA1XSA9IChiaXRzW251bSA+Pj4gNV0gfHwgMCkgfCAoMSA8PCBudW0pO1xuICAgIHJldHVybiBiaXRzO1xuICB9LFxuXG4gIHdpdGhvdXQ6IChiaXRzOiBudW1iZXJbXSwgbnVtKSA9PiB7XG4gICAgYml0cyA9IFsuLi5iaXRzXTtcbiAgICBiaXRzW251bSA+Pj4gNV0gPSAoYml0c1tudW0gPj4+IDVdIHx8IDApICYgfigxIDw8IG51bSk7XG4gICAgcmV0dXJuIGJpdHM7XG4gIH0sXG5cbiAgaGFzOiAoYml0cywgbnVtKSA9PiAhISgoYml0c1tudW0gPj4+IDVdIHx8IDApICYgKDEgPDwgbnVtKSksXG5cbiAgYml0czogKGJpdHMpID0+IHtcbiAgICBjb25zdCBvdXQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB4ID0gYml0c1tpXTtcbiAgICAgIGxldCB5ID0gMzI7XG4gICAgICB3aGlsZSAoeCkge1xuICAgICAgICBjb25zdCB6ID0gTWF0aC5jbHozMih4KSArIDE7XG4gICAgICAgIHkgLT0gejtcbiAgICAgICAgeCA8PD0gejtcbiAgICAgICAgaWYgKHogPT09IDMyKSB4ID0gMDtcbiAgICAgICAgb3V0LnB1c2goKGkgPDwgNSkgfCB5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfSxcblxuICBjbG9uZTogKHgpID0+IFsuLi54XSxcblxuICBlbXB0eTogKHgpID0+IHguZXZlcnkoYiA9PiAhYiksXG59O1xuIl19