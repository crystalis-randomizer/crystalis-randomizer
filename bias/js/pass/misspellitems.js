const MISSPELLINGS = new Map([
    ['Sword of Water', ['Horde of Otters']],
    ['Sword of Thunder', ['Sorg of Chunker']],
    ['Flame Bracelet', ['Fame Bracelet']],
    ['Storm Bracelet', ['Stom Bracelet']],
    ['Sacred Shield', ['Scared Shield']],
    ['Bow of Truth', ['Bow of Strewth']],
    ['Statue of Onyx', ['Statue of Onxy']],
    ['Ivory Statue', ['Ivory Statute']],
    ['Fog Lamp', ['Frog Lamp', 'Smog Lamp', 'Dog Lamp', 'Bog Lamp', 'Fog Lump']],
    ['Glowing Lamp', ['Glowing Lump']],
    ['Key to Stxy', ['Key to Styx']],
    ['Insect Flute', ['Bug Flute', 'Bug Whistle']],
    ['Flute of Lime', ['Flute of Grime']],
    ['Iron Necklace', ['I Ron Necklace']],
    ['Shield Ring', ['Sho Ring']],
    ['Deo\'s Pendant', ['Rabbit Necklace', 'Bunny Pendant']],
    ['Speed Boots', ['Hermes Sandals']],
    ['Rabbit Boots', ['Deo\'s Boots', 'Jumping Boots', 'Rabid Boots']],
    ['Alarm Flute', ['Pocket Rooster', 'Alarm Clock']],
    ['Shell Flute', ['Conch Shell', 'Dolphin Flute']],
    ['Eye Glasses', ['3D Glasses', 'X-Ray Goggles']],
    ['Kirisa Plant', ['Kilika Plant']],
    ['Refresh', ['Refresherize', 'Cure', 'Cura', 'Curaga']],
    ['Recover', ['Recoverize', 'Esuna']],
    ['Paralysis', ['Paralycize', 'Stop', 'Pew Pew']],
    ['Telepathy', ['Telepathize', 'Clairvoyance', 'ESP', 'Head Talk']],
    ['Teleport', ['Teleportate', 'Warp', 'Go']],
    ['Change', ['Changeify', 'Transform', 'Disguise']],
    ['Barrier', ['Barrierize', 'Protect', 'Wall', 'Shield']],
    ['Flight', ['Flyify', 'Blight', 'Super Jump']],
    ['Fruit of Lime', ['Fruit of Crime', 'Gold Needle', 'Soft']],
    ['Medical Herb', ['Potion', 'Hi Potion']],
    ['Fruit of Repun', ['Anti-Slime Pill', 'Maiden\'s Kiss']],
]);
export function misspellItems(rom, flags, random) {
    if (flags.unidentifiedItems())
        return;
    if ('sphereAnalysis' in globalThis)
        return;
    const items = random.next() < 0.05 ? rom.items :
        [rom.items[random.nextInt(0x48)]];
    for (const item of items) {
        if (!item)
            continue;
        const newName = MISSPELLINGS.get(item.messageName) || [];
        const index = Math.floor(random.nextInt(3 * newName.length + 1) / 3);
        if (index < newName.length) {
            item.messageName = item.menuName = newName[index];
        }
        else if (item.messageName === item.menuName) {
            const name = item.messageName.split('');
            const pos = random.nextInt(name.length - 1);
            if (name[pos] === ' ' || name[pos + 1] === ' ') {
                return;
            }
            else if (name[pos].toUpperCase() === name[pos]) {
                name.splice(pos + 1, 1);
            }
            else {
                [name[pos], name[pos + 1]] = [name[pos + 1], name[pos]];
            }
            item.messageName = item.menuName = name.join('');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,