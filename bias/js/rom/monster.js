import { ObjectData } from './objectdata.js';
import { hex } from './util.js';
export class Monster extends ObjectData {
    constructor(parent, data) {
        super(parent, data.id, data.displayName);
        const scaling = data.scaling;
        const expectedLevel = (level(scaling) + this.level) / 2;
        const expectedAttack = expectedLevel + playerSword(scaling, this.elements);
        this.hits = (this.hp + 1) / (expectedAttack - this.def);
        this.sdef = this.def / expectedAttack;
        const expectedPlayerHP = Math.min(255, Math.max(16, 32 + expectedLevel * 16));
        this.satk =
            (this.atk - expectedPlayerDefense(scaling, this.attackType)) /
                expectedPlayerHP;
        this.extraDifficulty = data.difficulty || 0;
        this.monsterClass = data.class;
        const vsExp = processExpReward(this.expReward) / baselineExp(scaling);
        const vsGld = VANILLA_GOLD_DROPS[this.goldDrop] / baselineGold(scaling);
        this.type = data.type || 'monster';
        this.wealth = vsGld && vsGld / (vsExp + vsGld);
    }
    isBoss() {
        return this.type === 'boss';
    }
    isProjectile() {
        return this.type === 'projectile';
    }
    isBird() {
        const a = this.rom.objectActions[this.action];
        return (a === null || a === void 0 ? void 0 : a.data.bird) || false;
    }
    isFlyer() {
        const a = this.rom.objectActions[this.action];
        return (a === null || a === void 0 ? void 0 : a.data.bird) || (a === null || a === void 0 ? void 0 : a.data.moth) || false;
    }
    placement() {
        var _a, _b;
        return (_b = (_a = this.rom.objectActions[this.action]) === null || _a === void 0 ? void 0 : _a.data.placement) !== null && _b !== void 0 ? _b : 'normal';
    }
    clearance() {
        var _a;
        return ((_a = this.rom.objectActions[this.action]) === null || _a === void 0 ? void 0 : _a.data.large) ? 6 : 3;
    }
    totalDifficulty() {
        return this.toughness() + this.attack() + this.statusDifficulty() +
            this.immunities() + this.movement();
    }
    collectDifficulty(f, r) {
        let result = f(this);
        const child = this.spawnedChild();
        if (child instanceof Monster) {
            result = r(result, child.collectDifficulty(f, r));
        }
        const death = this.spawnedReplacement();
        if (death instanceof Monster) {
            result = r(result, death.collectDifficulty(f, r));
        }
        return result;
    }
    toughness() {
        return this.collectDifficulty(m => lookup(m.hits, 0, [2, 1], [3, 2], [5, 3], [7, 4], [10, 5], [13, 6]), Math.max);
    }
    attack() {
        return this.collectDifficulty(m => {
            if (m.attackType && m.statusEffect)
                return 0;
            return lookup(m.satk, 0, [.04, 1], [.08, 2], [.13, 3], [.18, 4], [.25, 5], [.33, 6]);
        }, Math.max);
    }
    addStatusEffects(set) {
        if (this.attackType && this.statusEffect) {
            set.add(this.statusEffect);
        }
        else if (!this.attackType && this.poison) {
            set.add(0);
        }
        const replacement = this.spawnedReplacement();
        if (replacement instanceof Monster)
            replacement.addStatusEffects(set);
        const child = this.spawnedChild();
        if (child instanceof Monster)
            child.addStatusEffects(set);
    }
    statusDifficulty() {
        const set = new Set();
        this.addStatusEffects(set);
        let result = 0;
        for (const status of set) {
            result += STATUS_DIFFICULTY[status];
        }
        return result;
    }
    immunities() {
        let count = 0;
        let elems = this.elements;
        while (elems) {
            if (elems & 1)
                count++;
            elems >>>= 1;
        }
        return (count && 1 << (count - 1));
    }
    movement() {
        return this.collectDifficulty(m => {
            const actionData = this.rom.objectActions[m.action];
            const child = m.spawnedChild();
            let result = m.extraDifficulty;
            if (actionData) {
                result += (actionData.data.movement || 0);
                if (actionData.data.large)
                    result++;
                if (child && !child.statusEffect) {
                    result += (actionData.data.projectile || 0);
                }
            }
            if (this.metasprite === 0xa7)
                result += 2;
            return result;
        }, (a, b) => a + b);
    }
    totalReward() {
        return this.totalDifficulty() / 4;
    }
    normalizedGold() {
        if (!this.wealth)
            return 0;
        const dgld = this.totalDifficulty() * this.wealth * 0.6;
        return Math.max(1, Math.min(15, Math.round(dgld)));
    }
    normalizedExp() {
        if (this.wealth === 1)
            return 0;
        const sexp = 0.488 + this.totalDifficulty() * (1 - this.wealth) * 0.256;
        return Math.max(1, Math.min(255, Math.round(sexp * 32)));
    }
    toString() {
        return `Monster $${hex(this.id)} ${this.name}`;
    }
}
function processExpReward(raw) {
    return raw < 128 ? raw : (raw & 0x7f) << 4;
}
function baselineExp(scaling) {
    return 2 ** (scaling / 5 - 1);
}
const STATUS_DIFFICULTY = [
    2,
    1,
    3,
    2,
    4,
];
const VANILLA_GOLD_DROPS = [
    0, 1, 2, 4, 8, 16, 30, 50,
    100, 200, 400, 50, 100, 200, 400, 500,
];
function baselineGold(scaling) {
    return 2 ** (scaling / 7 - 1);
}
function level(scaling) {
    return scaling < 24 ? 1 + scaling / 3 : (scaling + 12) / 4;
}
function playerSword(scaling, elements = 0) {
    const bestOwned = scaling < 10 ? 1 : scaling < 18 ? 2 : scaling < 38 ? 4 : 8;
    for (let i = bestOwned; i; i >>>= 1) {
        if (!(i & elements))
            return i << 1;
    }
    return bestOwned << 1;
}
function expectedPlayerDefense(scaling, attackType) {
    return level(scaling) + playerArmor(scaling, attackType);
}
function playerArmor(scaling, attackType) {
    if (!attackType) {
        return lookup(scaling, 2, [6, 6], [18, 10], [25, 14], [30, 18], [40, 24], [46, 32]);
    }
    else {
        return lookup(scaling, 2, [6, 6], [18, 8], [25, 12], [30, 18], [37, 24], [42, 32]);
    }
}
function lookup(x, first, ...table) {
    for (let i = table.length - 1; i >= 0; i--) {
        const [k, v] = table[i];
        if (x >= k)
            return v;
    }
    return first;
}
//# sourceMappingURL=data:application/json;base64,