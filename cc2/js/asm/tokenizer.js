import { Buffer } from './buffer.js';
import { Token } from './token.js';
export class Tokenizer {
    constructor(str, file = 'input.s', opts = {}) {
        this.file = file;
        this.opts = opts;
        this.buffer = new Buffer(str);
    }
    next() {
        let tok = this.token();
        while (Token.eq(tok, Token.EOL)) {
            tok = this.token();
        }
        const stack = [[]];
        let depth = 0;
        while (!Token.eq(tok, Token.EOL) && !Token.eq(tok, Token.EOF)) {
            if (Token.eq(tok, Token.LC)) {
                stack[depth++].push(tok);
                stack.push([]);
            }
            else if (Token.eq(tok, Token.RC)) {
                if (!depth)
                    throw new Error(`Missing open curly: ${Token.nameAt(tok)}`);
                const inner = stack.pop();
                const source = stack[--depth].pop().source;
                const token = { token: 'grp', inner };
                if (source)
                    token.source = source;
                stack[depth].push(token);
            }
            else {
                stack[depth].push(tok);
            }
            tok = this.token();
        }
        if (depth) {
            const open = stack[depth - 1].pop();
            throw new Error(`Missing close curly: ${Token.nameAt(open)}`);
        }
        return stack[0].length ? stack[0] : undefined;
    }
    token() {
        while (this.buffer.space() ||
            this.buffer.token(/^;.*/) ||
            (this.opts.lineContinuations && this.buffer.token(/^\\(\r\n|\n|\r)/))) { }
        if (this.buffer.eof())
            return Token.EOF;
        const source = {
            file: this.file,
            line: this.buffer.line,
            column: this.buffer.column,
        };
        try {
            const tok = this.tokenInternal();
            if (!this.opts.skipSourceAnnotations)
                tok.source = source;
            return tok;
        }
        catch (err) {
            const { file, line, column } = source;
            let last = this.buffer.group();
            last = last ? ` near '${last}'` : '';
            err.message += `\n  at ${file}:${line}:${column}${last}`;
            throw err;
        }
    }
    tokenInternal() {
        if (this.buffer.newline())
            return { token: 'eol' };
        if (this.buffer.token(/^@+[a-z0-9_]*/i) ||
            this.buffer.token(/^((::)?[a-z_][a-z0-9_]*)+/i)) {
            return this.strTok('ident');
        }
        if (this.buffer.token(/^\.[a-z]+/i))
            return this.strTok('cs');
        if (this.buffer.token(/^:(\++|-+)/))
            return this.strTok('ident');
        if (this.buffer.token(/^(:|\++|-+|&&?|\|\|?|[#*/,=~!^]|<[<>=]?|>[>=]?)/)) {
            return this.strTok('op');
        }
        if (this.buffer.token('['))
            return { token: 'lb' };
        if (this.buffer.token('{'))
            return { token: 'lc' };
        if (this.buffer.token('('))
            return { token: 'lp' };
        if (this.buffer.token(']'))
            return { token: 'rb' };
        if (this.buffer.token('}'))
            return { token: 'rc' };
        if (this.buffer.token(')'))
            return { token: 'rp' };
        if (this.buffer.token(/^["']/))
            return this.tokenizeStr();
        if (this.buffer.token(/^[$%]?[0-9a-z_]+/i))
            return this.tokenizeNum();
        throw new Error(`Syntax error`);
    }
    tokenizeStr() {
        const b = this.buffer;
        const m = b.match();
        const end = m[0];
        let str = '';
        while (!b.lookingAt(end)) {
            if (b.eof())
                throw new Error(`EOF while looking for ${end}`);
            if (b.token(/^\\u([0-9a-f]{4})/i)) {
                str += String.fromCodePoint(parseInt(b.group(1), 16));
            }
            else if (b.token(/^\\x([0-9a-f]{2})/i)) {
                str += String.fromCharCode(parseInt(b.group(1), 16));
            }
            else if (b.token(/^\\(.)/)) {
                str += b.group(1);
            }
            else {
                b.token(/^./);
                str += b.group(0);
            }
        }
        b.token(end);
        return { token: 'str', str };
    }
    strTok(token) {
        return { token, str: this.buffer.group() };
    }
    tokenizeNum(str = this.buffer.group()) {
        if (this.opts.numberSeparators)
            str = str.replace(/_/g, '');
        if (str[0] === '$')
            return parseHex(str.substring(1));
        if (str[0] === '%')
            return parseBin(str.substring(1));
        if (str[0] === '0')
            return parseOct(str);
        return parseDec(str);
    }
}
function parseHex(str) {
    if (!/^[0-9a-f]+$/i.test(str))
        throw new Error(`Bad hex number: $${str}`);
    return { token: 'num', num: Number.parseInt(str, 16) };
}
function parseDec(str) {
    if (!/^[0-9]+$/.test(str))
        throw new Error(`Bad decimal number: ${str}`);
    return { token: 'num', num: Number.parseInt(str, 10) };
}
function parseOct(str) {
    if (!/^[0-7]+$/.test(str))
        throw new Error(`Bad octal number: ${str}`);
    return { token: 'num', num: Number.parseInt(str, 8) };
}
function parseBin(str) {
    if (!/^[01]+$/.test(str))
        throw new Error(`Bad binary number: %${str}`);
    return { token: 'num', num: Number.parseInt(str, 2) };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5pemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL2FzbS90b2tlbml6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQWMsS0FBSyxFQUFjLE1BQU0sWUFBWSxDQUFDO0FBRTNELE1BQU0sT0FBTyxTQUFTO0lBR3BCLFlBQVksR0FBVyxFQUNGLE9BQU8sU0FBUyxFQUNoQixPQUEwQixFQUFFO1FBRDVCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBd0I7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSTtRQUNGLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUUvQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3BCO1FBRUQsTUFBTSxLQUFLLEdBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdELElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMzQixLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLEtBQUss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QUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEUsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDdEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QnVmZmVyfSBmcm9tICcuL2J1ZmZlci5qcyc7XG5pbXBvcnQge1N0cmluZ1Rva2VuLCBUb2tlbiwgVG9rZW5Tb3VyY2V9IGZyb20gJy4vdG9rZW4uanMnO1xuXG5leHBvcnQgY2xhc3MgVG9rZW5pemVyIGltcGxlbWVudHMgVG9rZW5Tb3VyY2Uge1xuICByZWFkb25seSBidWZmZXI6IEJ1ZmZlcjtcblxuICBjb25zdHJ1Y3RvcihzdHI6IHN0cmluZyxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgZmlsZSA9ICdpbnB1dC5zJyxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgb3B0czogVG9rZW5pemVyLk9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlcihzdHIpO1xuICB9XG5cbiAgbmV4dCgpOiBUb2tlbltdfHVuZGVmaW5lZCB7XG4gICAgbGV0IHRvayA9IHRoaXMudG9rZW4oKTtcbiAgICB3aGlsZSAoVG9rZW4uZXEodG9rLCBUb2tlbi5FT0wpKSB7XG4gICAgICAvLyBTa2lwIEVPTHMgYXQgYmVnaW5uaW5nIG9mIGxpbmUuXG4gICAgICB0b2sgPSB0aGlzLnRva2VuKCk7XG4gICAgfVxuICAgIC8vIEdyb3VwIGN1cmx5IGJyYWNlIGdyb3VwcyBpbnRvIGEgc2luZ2xlIGVmZmVjdGl2ZSB0b2tlbi5cbiAgICBjb25zdCBzdGFjazogVG9rZW5bXVtdID0gW1tdXTtcbiAgICBsZXQgZGVwdGggPSAwO1xuICAgIHdoaWxlICghVG9rZW4uZXEodG9rLCBUb2tlbi5FT0wpICYmICFUb2tlbi5lcSh0b2ssIFRva2VuLkVPRikpIHtcbiAgICAgIGlmIChUb2tlbi5lcSh0b2ssIFRva2VuLkxDKSkge1xuICAgICAgICBzdGFja1tkZXB0aCsrXS5wdXNoKHRvayk7XG4gICAgICAgIHN0YWNrLnB1c2goW10pO1xuICAgICAgfSBlbHNlIGlmIChUb2tlbi5lcSh0b2ssIFRva2VuLlJDKSkge1xuICAgICAgICBpZiAoIWRlcHRoKSB0aHJvdyBuZXcgRXJyb3IoYE1pc3Npbmcgb3BlbiBjdXJseTogJHtUb2tlbi5uYW1lQXQodG9rKX1gKTtcbiAgICAgICAgY29uc3QgaW5uZXIgPSBzdGFjay5wb3AoKSE7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IHN0YWNrWy0tZGVwdGhdLnBvcCgpIS5zb3VyY2U7XG4gICAgICAgIGNvbnN0IHRva2VuOiBUb2tlbiA9IHt0b2tlbjogJ2dycCcsIGlubmVyfTtcbiAgICAgICAgaWYgKHNvdXJjZSkgdG9rZW4uc291cmNlID0gc291cmNlO1xuICAgICAgICBzdGFja1tkZXB0aF0ucHVzaCh0b2tlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFja1tkZXB0aF0ucHVzaCh0b2spO1xuICAgICAgfVxuICAgICAgdG9rID0gdGhpcy50b2tlbigpO1xuICAgIH1cbiAgICBpZiAoZGVwdGgpIHtcbiAgICAgIGNvbnN0IG9wZW4gPSBzdGFja1tkZXB0aCAtIDFdLnBvcCgpITtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBjbG9zZSBjdXJseTogJHtUb2tlbi5uYW1lQXQob3Blbil9YCk7XG4gICAgfVxuICAgIHJldHVybiBzdGFja1swXS5sZW5ndGggPyBzdGFja1swXSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgdG9rZW4oKTogVG9rZW4ge1xuICAgIC8vIHNraXAgd2hpdGVzcGFjZVxuICAgIHdoaWxlICh0aGlzLmJ1ZmZlci5zcGFjZSgpIHx8XG4gICAgICAgICAgIHRoaXMuYnVmZmVyLnRva2VuKC9eOy4qLykgfHxcbiAgICAgICAgICAgKHRoaXMub3B0cy5saW5lQ29udGludWF0aW9ucyAmJiB0aGlzLmJ1ZmZlci50b2tlbigvXlxcXFwoXFxyXFxufFxcbnxcXHIpLykpKSB7fVxuICAgIGlmICh0aGlzLmJ1ZmZlci5lb2YoKSkgcmV0dXJuIFRva2VuLkVPRjtcblxuICAgIC8vIHJlbWVtYmVyIHBvc2l0aW9uIG9mIG5vbi13aGl0ZXNwYWNlXG4gICAgY29uc3Qgc291cmNlID0ge1xuICAgICAgZmlsZTogdGhpcy5maWxlLFxuICAgICAgbGluZTogdGhpcy5idWZmZXIubGluZSxcbiAgICAgIGNvbHVtbjogdGhpcy5idWZmZXIuY29sdW1uLFxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHRvayA9IHRoaXMudG9rZW5JbnRlcm5hbCgpO1xuICAgICAgaWYgKCF0aGlzLm9wdHMuc2tpcFNvdXJjZUFubm90YXRpb25zKSB0b2suc291cmNlID0gc291cmNlO1xuICAgICAgcmV0dXJuIHRvaztcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IHtmaWxlLCBsaW5lLCBjb2x1bW59ID0gc291cmNlO1xuICAgICAgbGV0IGxhc3QgPSB0aGlzLmJ1ZmZlci5ncm91cCgpO1xuICAgICAgbGFzdCA9IGxhc3QgPyBgIG5lYXIgJyR7bGFzdH0nYCA6ICcnO1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gYFxcbiAgYXQgJHtmaWxlfToke2xpbmV9OiR7Y29sdW1ufSR7bGFzdH1gO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9rZW5JbnRlcm5hbCgpOiBUb2tlbiB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLm5ld2xpbmUoKSkgcmV0dXJuIHt0b2tlbjogJ2VvbCd9O1xuICAgIGlmICh0aGlzLmJ1ZmZlci50b2tlbigvXkArW2EtejAtOV9dKi9pKSB8fFxuICAgICAgICB0aGlzLmJ1ZmZlci50b2tlbigvXigoOjopP1thLXpfXVthLXowLTlfXSopKy9pKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyVG9rKCdpZGVudCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oL15cXC5bYS16XSsvaSkpIHJldHVybiB0aGlzLnN0clRvaygnY3MnKTtcbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oL146KFxcKyt8LSspLykpIHJldHVybiB0aGlzLnN0clRvaygnaWRlbnQnKTtcbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oL14oOnxcXCsrfC0rfCYmP3xcXHxcXHw/fFsjKi8sPX4hXl18PFs8Pj1dP3w+Wz49XT8pLykpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0clRvaygnb3AnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYnVmZmVyLnRva2VuKCdbJykpIHJldHVybiB7dG9rZW46ICdsYid9O1xuICAgIGlmICh0aGlzLmJ1ZmZlci50b2tlbigneycpKSByZXR1cm4ge3Rva2VuOiAnbGMnfTtcbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oJygnKSkgcmV0dXJuIHt0b2tlbjogJ2xwJ307XG4gICAgaWYgKHRoaXMuYnVmZmVyLnRva2VuKCddJykpIHJldHVybiB7dG9rZW46ICdyYid9O1xuICAgIGlmICh0aGlzLmJ1ZmZlci50b2tlbignfScpKSByZXR1cm4ge3Rva2VuOiAncmMnfTtcbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oJyknKSkgcmV0dXJuIHt0b2tlbjogJ3JwJ307XG4gICAgaWYgKHRoaXMuYnVmZmVyLnRva2VuKC9eW1wiJ10vKSkgcmV0dXJuIHRoaXMudG9rZW5pemVTdHIoKTtcbiAgICBpZiAodGhpcy5idWZmZXIudG9rZW4oL15bJCVdP1swLTlhLXpfXSsvaSkpIHJldHVybiB0aGlzLnRva2VuaXplTnVtKCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBTeW50YXggZXJyb3JgKTtcbiAgfVxuXG4gIHByaXZhdGUgdG9rZW5pemVTdHIoKTogVG9rZW4ge1xuICAgIGNvbnN0IGIgPSB0aGlzLmJ1ZmZlcjtcbiAgICBjb25zdCBtID0gYi5tYXRjaCgpITtcbiAgICBjb25zdCBlbmQgPSBtWzBdO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICB3aGlsZSAoIWIubG9va2luZ0F0KGVuZCkpIHtcbiAgICAgIGlmIChiLmVvZigpKSB0aHJvdyBuZXcgRXJyb3IoYEVPRiB3aGlsZSBsb29raW5nIGZvciAke2VuZH1gKTtcbiAgICAgIGlmIChiLnRva2VuKC9eXFxcXHUoWzAtOWEtZl17NH0pL2kpKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChwYXJzZUludChiLmdyb3VwKDEpISwgMTYpKTtcbiAgICAgIH0gZWxzZSBpZiAoYi50b2tlbigvXlxcXFx4KFswLTlhLWZdezJ9KS9pKSkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChiLmdyb3VwKDEpISwgMTYpKTtcbiAgICAgIH0gZWxzZSBpZiAoYi50b2tlbigvXlxcXFwoLikvKSkge1xuICAgICAgICBzdHIgKz0gYi5ncm91cCgxKSE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLnRva2VuKC9eLi8pO1xuICAgICAgICBzdHIgKz0gYi5ncm91cCgwKSE7XG4gICAgICB9XG4gICAgfVxuICAgIGIudG9rZW4oZW5kKTtcbiAgICByZXR1cm4ge3Rva2VuOiAnc3RyJywgc3RyfTtcbiAgfVxuXG4gIHByaXZhdGUgc3RyVG9rKHRva2VuOiBTdHJpbmdUb2tlblsndG9rZW4nXSk6IFRva2VuIHtcbiAgICByZXR1cm4ge3Rva2VuLCBzdHI6IHRoaXMuYnVmZmVyLmdyb3VwKCkhfTtcbiAgfVxuXG4gIHByaXZhdGUgdG9rZW5pemVOdW0oc3RyOiBzdHJpbmcgPSB0aGlzLmJ1ZmZlci5ncm91cCgpISk6IFRva2VuIHtcbiAgICBpZiAodGhpcy5vcHRzLm51bWJlclNlcGFyYXRvcnMpIHN0ciA9IHN0ci5yZXBsYWNlKC9fL2csICcnKTtcbiAgICBpZiAoc3RyWzBdID09PSAnJCcpIHJldHVybiBwYXJzZUhleChzdHIuc3Vic3RyaW5nKDEpKTtcbiAgICBpZiAoc3RyWzBdID09PSAnJScpIHJldHVybiBwYXJzZUJpbihzdHIuc3Vic3RyaW5nKDEpKTtcbiAgICBpZiAoc3RyWzBdID09PSAnMCcpIHJldHVybiBwYXJzZU9jdChzdHIpO1xuICAgIHJldHVybiBwYXJzZURlYyhzdHIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlSGV4KHN0cjogc3RyaW5nKTogVG9rZW4ge1xuICBpZiAoIS9eWzAtOWEtZl0rJC9pLnRlc3Qoc3RyKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgaGV4IG51bWJlcjogJCR7c3RyfWApO1xuICByZXR1cm4ge3Rva2VuOiAnbnVtJywgbnVtOiBOdW1iZXIucGFyc2VJbnQoc3RyLCAxNil9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURlYyhzdHI6IHN0cmluZyk6IFRva2VuIHtcbiAgaWYgKCEvXlswLTldKyQvLnRlc3Qoc3RyKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgZGVjaW1hbCBudW1iZXI6ICR7c3RyfWApO1xuICByZXR1cm4ge3Rva2VuOiAnbnVtJywgbnVtOiBOdW1iZXIucGFyc2VJbnQoc3RyLCAxMCl9O1xufVxuXG5mdW5jdGlvbiBwYXJzZU9jdChzdHI6IHN0cmluZyk6IFRva2VuIHtcbiAgaWYgKCEvXlswLTddKyQvLnRlc3Qoc3RyKSkgdGhyb3cgbmV3IEVycm9yKGBCYWQgb2N0YWwgbnVtYmVyOiAke3N0cn1gKTtcbiAgcmV0dXJuIHt0b2tlbjogJ251bScsIG51bTogTnVtYmVyLnBhcnNlSW50KHN0ciwgOCl9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUJpbihzdHI6IHN0cmluZyk6IFRva2VuIHtcbiAgaWYgKCEvXlswMV0rJC8udGVzdChzdHIpKSB0aHJvdyBuZXcgRXJyb3IoYEJhZCBiaW5hcnkgbnVtYmVyOiAlJHtzdHJ9YCk7XG4gIHJldHVybiB7dG9rZW46ICdudW0nLCBudW06IE51bWJlci5wYXJzZUludChzdHIsIDIpfTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUb2tlbml6ZXIge1xuICBleHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgIC8vIGNhc2VJbnNlbnNpdGl2ZT86IGJvb2xlYW47IC8vIGhhbmRsZSBlbHNld2hlcmU/XG4gICAgbGluZUNvbnRpbnVhdGlvbnM/OiBib29sZWFuO1xuICAgIG51bWJlclNlcGFyYXRvcnM/OiBib29sZWFuO1xuICAgIHNraXBTb3VyY2VBbm5vdGF0aW9ucz86IGJvb2xlYW47XG4gIH1cbn1cbiJdfQ==