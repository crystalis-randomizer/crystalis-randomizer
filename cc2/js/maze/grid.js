import { UnionFind } from '../unionfind.js';
import { hex } from '../rom/util.js';
export class Grid {
    constructor(height, width) {
        this.height = height;
        this.width = width;
        this._coords = undefined;
        this.data = new Array((height << 1 | 1) * (width << 1 | 1));
        this.row = this.width << 1 | 1;
    }
    screens() {
        if (this._coords)
            return this._coords;
        const coords = [];
        for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
                coords.push((y << 12 | x << 4));
            }
        }
        return this._coords = coords;
    }
    index(c) {
        return (((c & 0xf8) >> 3) + this.row * (c >>> 11));
    }
    index2(y, x) {
        return ((this.row << 1) * y + 2 * x);
    }
    yx(index) {
        const x = index % this.row;
        const y = (index - x) / this.row;
        return [y / 2, x / 2];
    }
    coord(index) {
        const x = index % this.row;
        const y = (index - x) / this.row;
        return (y << 11 | x << 3);
    }
    get(c) {
        return this.data[this.index(c)];
    }
    set(c, v) {
        this.data[this.index(c)] = v;
    }
    get2(y, x) {
        return this.data[this.index2(y, x)];
    }
    set2(y, x, v) {
        this.data[this.index2(y, x)] = v;
    }
    plus(index, dy, dx) {
        return (index + (this.row << 1) * dy + 2 * dx);
    }
    x(index) {
        return (index % this.row) / 2;
    }
    y(index) {
        return Math.floor(index / this.row) / 2;
    }
    border(dir, position) {
        let x, y;
        if (dir & 1) {
            y = position << 12 | 0x800;
            x = dir & 2 ? this.width << 4 : 0;
        }
        else {
            y = dir & 2 ? this.height << 12 : 0;
            x = position << 4 | 0x8;
        }
        return (y | x);
    }
    randomBorder(random, dir) {
        let x, y;
        if (dir != null) {
            if (dir & 1) {
                y = random.nextInt(this.height) << 12 | 0x800;
                x = dir & 2 ? this.width << 4 : 0;
            }
            else {
                y = dir & 2 ? this.height << 12 : 0;
                x = random.nextInt(this.width) << 4 | 0x8;
            }
        }
        else {
            const semiperimiter = this.width + this.height;
            let s = random.nextInt(semiperimiter << 1) - semiperimiter;
            let d = false;
            if (s < 0) {
                s = ~s;
                d = true;
            }
            if (s < this.width) {
                x = s << 4 | 0x8;
                y = d ? this.height << 12 : 0;
            }
            else {
                y = (s - this.width) << 12 | 0x800;
                x = d ? this.width << 4 : 0;
            }
        }
        return (y | x);
    }
    oppositeBorder(edge) {
        return edge & 0x8 ?
            (edge ^ (this.height << 12)) :
            (edge ^ (this.width << 4));
    }
    furthestBorder(edge) {
        return ((this.height << 12 | this.width << 4) - edge);
    }
    edgeCoordination(center, want) {
        let count = 0;
        if ((center & 0x808) !== 0x808)
            throw new Error(`Bad tile: ${hex(center)}`);
        for (const dir of [8, -8, 0x800, -0x800]) {
            const s = this.get(center + dir);
            if (want ? s === want : s)
                count++;
        }
        return count;
    }
    isBorder(c) {
        if (c & 8) {
            if (c & 0x800)
                return false;
            const y = c >>> 12;
            return !y || y === this.height;
        }
        else if (c & 0x800) {
            const x = (c >>> 4) & 0xf;
            return !x || x === this.width;
        }
        return false;
    }
    partition(replace) {
        var _a, _b, _c;
        const uf = new UnionFind();
        for (let y = 0; y < this.data.length; y += this.row) {
            for (let x = 0; x < this.row; x++) {
                const i = (y + x);
                const coord = this.coord(i);
                const val = (_a = replace === null || replace === void 0 ? void 0 : replace.get(coord)) !== null && _a !== void 0 ? _a : this.data[i];
                if (!val)
                    continue;
                uf.find(coord);
                const above = (coord - 0x800);
                if (y && ((_b = replace === null || replace === void 0 ? void 0 : replace.get(above)) !== null && _b !== void 0 ? _b : this.data[i - this.row])) {
                    uf.union([coord, above]);
                }
                const left = (coord - 8);
                if (x && ((_c = replace === null || replace === void 0 ? void 0 : replace.get(left)) !== null && _c !== void 0 ? _c : this.data[i - 1])) {
                    uf.union([coord, left]);
                }
            }
        }
        return uf.map();
    }
    show() {
        const lines = [];
        for (let y = 0; y < this.data.length; y += this.row) {
            let line = '';
            for (let x = 0; x < this.row; x++) {
                line += this.data[y + x] || ' ';
            }
            lines.push(line);
        }
        return lines.join('\n');
    }
    static writeGrid2d(g, c, data) {
        const top = g.index(c);
        for (let y = 0; y < data.length; y++) {
            const row = data[y];
            for (let x = 0; x < row.length; x++) {
                const c = row[x];
                g.data[top + y * g.row + x] = c !== ' ' ? c : '';
            }
        }
    }
}
export function coordToPos(c) {
    return (c >> 4) & 0xf | (c >> 8) & 0xf0;
}
export function W(c, n = 1) {
    return c - n * 8;
}
export function E(c, n = 1) {
    return c + n * 8;
}
export function N(c, n = 1) {
    return c - n * 0x800;
}
export function S(c, n = 1) {
    return c + n * 0x800;
}
//# sourceMappingURL=data:application/json;base64,