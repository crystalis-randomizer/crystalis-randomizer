import { MessageId } from './messageid.js';
import { Segment, free, readBigEndian, readLittleEndian, seq, tuple } from './util.js';
const { $0e, $fe, $ff } = Segment;
export var Sage;
(function (Sage) {
    Sage[Sage["TORNEL"] = 0] = "TORNEL";
    Sage[Sage["ZEBU"] = 1] = "ZEBU";
    Sage[Sage["ASINA"] = 2] = "ASINA";
    Sage[Sage["KENSU"] = 3] = "KENSU";
})(Sage || (Sage = {}));
export var DefaultMessage;
(function (DefaultMessage) {
    DefaultMessage[DefaultMessage["INSUFFICIENT_MAGIC"] = 0] = "INSUFFICIENT_MAGIC";
    DefaultMessage[DefaultMessage["FREE_MAGIC"] = 1] = "FREE_MAGIC";
    DefaultMessage[DefaultMessage["IGNORED"] = 2] = "IGNORED";
    DefaultMessage[DefaultMessage["DEFAULT"] = 3] = "DEFAULT";
})(DefaultMessage || (DefaultMessage = {}));
const RESULT_TABLE = 0x1c22f;
const VANILLA_LEVELS_TABLE = 0x1c213;
const VANILLA_LOCATION_TABLE = 0x1d8f4;
const VANILLA_MAIN_TABLE = 0x1d9f4;
const VANILLA_DEFAULTS_TABLE = 0x1da2c;
export class Telepathy {
    constructor(rom) {
        this.rom = rom;
        this.sages = seq(4, i => new SageData(this, i));
        this.resultTable = tuple(rom.prg, RESULT_TABLE, 64);
        if (rom.telepathyTablesAddress) {
            this.groupsByLocation = [];
            this.minimumLevels = [];
        }
        else {
            this.groupsByLocation = tuple(rom.prg, VANILLA_LOCATION_TABLE, 256);
            this.minimumLevels = tuple(rom.prg, VANILLA_LEVELS_TABLE, 7);
        }
    }
    write() {
        let table = this.rom.telepathyTablesAddress;
        const a = this.rom.assembler();
        a.segment($0e.name, $fe.name, $ff.name);
        if (table) {
            free(a, $0e, 0x98f4, 0x9b00);
            const mainTable = this.sages.map((sage, i) => {
                a.reloc(`Telepathy_Sage_${i}`);
                const pc = a.pc();
                a.byte(...sage.messageGroups[0].bytes());
                return pc;
            });
            a.org(0x822f, 'Telepathy_ResultTable');
            a.byte(...this.resultTable.map(x => x < 4 ? x : x >>> 1));
            a.reloc('TelepathyTable');
            a.export('TelepathyTable');
            a.label('TelepathyTable');
            a.word(...mainTable);
            for (let j = 1; j < 4; j++) {
                for (let i = 0; i < 4; i++) {
                    a.byte(...this.sages[i].defaultMessages[j].data);
                }
            }
        }
        else {
            free(a, $0e, 0x9a4c, 0x9b00);
            a.org(0x822f, 'Telepathy_ResultTable');
            a.byte(...this.resultTable);
            a.org(0x8213, 'Telepathy_LevelsTable');
            a.byte(...this.minimumLevels);
            a.org(0x98f4, 'Telepathy_LocationTable');
            a.byte(...this.groupsByLocation);
            a.org(0x9a2c, 'Telepathy_VanillaDefaultsTable');
            for (let j = 0; j < 4; j++) {
                for (let i = 0; i < 4; i++) {
                    const sage = this.sages[i];
                    a.byte(...sage.defaultMessages[j].data);
                }
            }
            const mainTable = [];
            for (let i = 0; i < 4; i++) {
                const sage = this.sages[i];
                for (let j = 0, len = sage.messageGroups.length; j < len; j++) {
                    a.reloc(`Telepathy_Sage_${i}_Group_${j}`);
                    mainTable[4 * j + i] = a.pc();
                    a.byte(...sage.messageGroups[j].bytes());
                }
            }
            a.org(0x99f4, 'Telepathy_VanillaMainTable');
            a.word(...mainTable);
        }
        return [a.module()];
    }
}
export class SageData {
    constructor(telepathy, sage) {
        this.telepathy = telepathy;
        this.sage = sage;
        const rom = telepathy.rom;
        let defs;
        let main;
        let count;
        if (rom.telepathyTablesAddress) {
            main = defs = rom.telepathyTablesAddress + 2 * sage;
            count = 1;
        }
        else {
            defs = VANILLA_DEFAULTS_TABLE + 2 * sage;
            main = VANILLA_MAIN_TABLE + 2 * sage;
            count = 7;
        }
        this.defaultMessages = seq(4, i => MessageId.from(rom.prg, defs + 8 * i));
        this.messageGroups = seq(count, i => TelepathyMessageGroup.from(rom.prg, main + 8 * i));
    }
}
export class TelepathyMessageGroup {
    constructor(messages) {
        this.messages = messages;
    }
    bytes() {
        const bytes = [];
        for (let i = 0, len = this.messages.length; i < len; i++) {
            const [f, m1, m2] = this.messages[i];
            let word = f >= 0 ? f : 0x2000 | ~f;
            if (i === len - 1)
                word |= 0x8000;
            if (m2)
                word |= 0x4000;
            bytes.push(word >>= 8, word & 0xff, ...m1.data, ...(m2 ? m2.data : []));
        }
        return bytes;
    }
    static from(data, address) {
        const group = new TelepathyMessageGroup([]);
        address = readLittleEndian(data, address) + 0x14000;
        let word = 0;
        while (!(word & 0x8000)) {
            word = readBigEndian(data, address);
            address += 2;
            let flag = word & 0x1fff;
            if (word & 0x2000)
                flag = ~flag;
            const message = [flag, MessageId.from(data, address)];
            address += 2;
            if (word & 0x4000) {
                message.push(MessageId.from(data, address));
                address += 2;
            }
            group.messages.push(message);
        }
        return group;
    }
}
//# sourceMappingURL=data:application/json;base64,