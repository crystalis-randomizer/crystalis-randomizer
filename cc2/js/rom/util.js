export function upperCamelToSpaces(upperCamel) {
    return upperCamel.replace(/([a-z])([A-Z0-9])/g, '$1 $2')
        .replace(/Of/g, 'of')
        .replace(/_/g, ' - ');
}
export function lowerCamelToSpaces(lowerCamel) {
    return upperCamelToSpaces(lowerCamel).replace(/^./, (x) => x.toUpperCase());
}
export function seq(x, f = (i) => i) {
    return new Array(x).fill(0).map((_, i) => f(i));
}
export function slice(arr, start, len) {
    return arr.slice(start, start + len);
}
export function tuple(arr, start, len) {
    return Array.from(arr.slice(start, start + len));
}
export function signed(x) {
    return x < 0x80 ? x : x - 0x100;
}
export function unsigned(x) {
    return x < 0 ? x + 0x100 : x;
}
export function varSlice(arr, start, width, sentinel, end = Infinity, func) {
    if (!func)
        func = (x) => x;
    const out = [];
    while (start + width <= end && arr[start] !== sentinel) {
        out.push(func(arr.slice(start, start + width)));
        start += width;
    }
    return out;
}
export function addr(arr, i, offset = 0) {
    return (arr[i] | arr[i + 1] << 8) + offset;
}
export function group(width, arr, func) {
    if (!func)
        func = (x) => x;
    return seq(Math.max(0, Math.floor(arr.length / width)), i => func(slice(arr, i * width, width)));
}
export function reverseBits(x) {
    return ((x * 0x0802 & 0x22110) | (x * 0x8020 & 0x88440)) * 0x10101 >>> 16 & 0xff;
}
export function countBits(x) {
    x -= x >> 1 & 0x55;
    x = (x & 0x33) + (x >> 2 & 0x33);
    return (x + (x >> 4)) & 0xf;
}
export function hex(id) {
    return id != null ? id.toString(16).padStart(2, '0') : String(id);
}
export function hex3(id) {
    return id.toString(16).padStart(3, '0');
}
export function hex4(id) {
    return id.toString(16).padStart(4, '0');
}
export function hex5(id) {
    return id.toString(16).padStart(5, '0');
}
export function concatIterables(iters) {
    const out = [];
    for (const iter of iters) {
        for (const elem of iter) {
            out.push(elem);
        }
    }
    return out;
}
export function readBigEndian(data, offset) {
    return data[offset] << 8 | data[offset + 1];
}
export function readLittleEndian(data, offset) {
    return data[offset + 1] << 8 | data[offset];
}
export function readString(arr, address, end = 0) {
    const bytes = [];
    while (arr[address] != end) {
        bytes.push(arr[address++]);
    }
    return String.fromCharCode(...bytes);
}
export function readLengthDelimitedString(arr, address) {
    const length = arr[address];
    return String.fromCharCode(...arr.slice(address + 1, address + 1 + length));
}
export function writeLittleEndian(data, offset, value) {
    data[offset] = value & 0xff;
    data[offset + 1] = value >>> 8;
}
export function writeString(arr, address, str) {
    for (let i = 0, len = str.length; i < len; i++) {
        arr[address + i] = str.charCodeAt(i);
    }
}
export function write(data, offset, values) {
    data.subarray(offset, offset + values.length).set(values);
}
export class FlagListType {
    constructor(last, clear, nonEmpty = false) {
        this.last = last;
        this.clear = clear;
        this.nonEmpty = nonEmpty;
    }
    read(data, offset = 0) {
        const flags = [];
        while (true) {
            const hi = data[offset++];
            const lo = data[offset++];
            const flag = (hi & 3) << 8 | lo;
            const signed = hi & this.clear ? ~flag : flag;
            if (signed !== ~0)
                flags.push(signed);
            if (hi & this.last)
                return flags;
        }
    }
    bytes(flags) {
        flags = flags.filter(f => f !== ~0);
        if (this.nonEmpty && !flags.length)
            flags = [~0];
        const bytes = [];
        for (let i = 0; i < flags.length; i++) {
            let flag = flags[i];
            if (flag < 0)
                flag = (this.clear << 8) | ~flag;
            if (i === flags.length - 1)
                flag |= (this.last << 8);
            bytes.push(flag >>> 8);
            bytes.push(flag & 0xff);
        }
        return bytes;
    }
    write(data, flags, offset = 0) {
        const bytes = this.bytes(flags);
        for (let i = 0; i < bytes.length; i++) {
            data[i + offset] = bytes[i];
        }
    }
}
export const DIALOG_FLAGS = new FlagListType(0x40, 0x80);
export const ITEM_GET_FLAGS = new FlagListType(0x40, 0x80, true);
export const ITEM_USE_FLAGS = new FlagListType(0x40, 0x80, true);
export const ITEM_CONDITION_FLAGS = new FlagListType(0x80, 0x20, true);
export const SPAWN_CONDITION_FLAGS = new FlagListType(0x80, 0x20);
export function initializer() {
    const tag = Symbol();
    function f(...args) {
        return { tag, args };
    }
    f.commit = (instance, builder) => {
        for (const prop of Object.getOwnPropertyNames(instance)) {
            const value = instance[prop];
            if (value.tag !== tag)
                continue;
            instance[prop] = builder(prop, ...value.args);
        }
    };
    return f;
}
const PROP_TAG = Symbol('PROP_TAG');
const dataTupleMap = new WeakMap();
function dataTupleActualClass(arg) {
    let result = dataTupleMap.get(arg);
    if (!result) {
        result = class extends DataTuple {
        };
        Object.defineProperties(result, { name: { value: arg.name } });
        Object.assign(result, arg);
        Reflect.setPrototypeOf(result.prototype, arg.prototype);
        const proto = new arg();
        const descriptors = {};
        for (const [prop, descr] of Object.entries(proto)) {
            if (descr && descr[PROP_TAG]) {
                descriptors[prop] = descr;
            }
        }
        Object.defineProperties(result.prototype, descriptors);
        dataTupleMap.set(arg, result);
        dataTupleMap.set(result, result);
    }
    return result;
}
export class DataTuple {
    constructor(arg) {
        this.data = arg;
    }
    static of(inits) {
        return Object.assign(new (dataTupleActualClass(this))(new Array(this.size).fill(0)), inits);
    }
    static from(data, offset = 0) {
        const cls = dataTupleActualClass(this);
        const arg = !offset && data.length === this.size ?
            data : tuple(data, offset, this.size);
        return new cls(arg);
    }
    [Symbol.iterator]() {
        return this.data[Symbol.iterator]();
    }
    hex() {
        return Array.from(this.data, hex).join(' ');
    }
    clone() {
        return new this.constructor(this.data);
    }
    prop(...bits) {
        return {
            get() {
                let value = 0;
                for (const [index, mask = 0xff, shift = 0] of bits) {
                    const lsh = shift < 0 ? -shift : 0;
                    const rsh = shift < 0 ? 0 : shift;
                    value |= ((this.data[index] & mask) >>> rsh) << lsh;
                }
                return value;
            },
            set(value) {
                for (const [index, mask = 0xff, shift = 0] of bits) {
                    const lsh = shift < 0 ? -shift : 0;
                    const rsh = shift < 0 ? 0 : shift;
                    const v = (value >>> lsh) << rsh & mask;
                    this.data[index] = this.data[index] & ~mask | v;
                }
            },
            [PROP_TAG]: true,
        };
    }
    booleanProp(byte, bit) {
        return {
            get() {
                return Boolean(this.data[byte] & (1 << bit));
            },
            set(value) {
                const mask = 1 << bit;
                if (value) {
                    this.data[byte] |= mask;
                }
                else {
                    this.data[byte] &= ~mask;
                }
            },
            [PROP_TAG]: true,
        };
    }
}
export const watchArray = (arr, watch) => {
    const arrayChangeHandler = {
        get(target, property) {
            let v = target[property];
            if (property === 'subarray') {
                return (start, end) => {
                    const sub = target.subarray(start, end);
                    if (start <= watch && watch < end)
                        return watchArray(sub, watch - start);
                    return sub;
                };
            }
            else if (property === 'set') {
                return (val) => {
                    console.log(`Setting overlapping array ${watch}`);
                    debugger;
                    target.set(val);
                };
            }
            if (typeof v === 'function')
                v = v.bind(target);
            return v;
        },
        set(target, property, value, receiver) {
            if (property == watch) {
                console.log(`Writing ${watch.toString(16)}`);
                debugger;
            }
            target[property] = value;
            return true;
        },
    };
    return new Proxy(arr, arrayChangeHandler);
};
export class Segment {
    constructor(name, bank, org) {
        this.name = name;
        this.bank = bank;
        this.org = org;
    }
    get offset() {
        return (this.bank & 0x1f) << 13;
    }
}
Segment.$04 = new Segment('04', 0x04, 0x8000);
Segment.$05 = new Segment('05', 0x05, 0xa000);
Segment.$0a = new Segment('0a', 0x0a, 0x8000);
Segment.$0b = new Segment('0b', 0x0b, 0xa000);
Segment.$0c = new Segment('0c', 0x0c, 0x8000);
Segment.$0d = new Segment('0d', 0x0d, 0xa000);
Segment.$0e = new Segment('0e', 0x0e, 0x8000);
Segment.$0f = new Segment('0f', 0x0f, 0xa000);
Segment.$10 = new Segment('10', 0x10, 0x8000);
Segment.$14 = new Segment('14', 0x14, 0x8000);
Segment.$15 = new Segment('15', 0x15, 0xa000);
Segment.$16_a = new Segment('16:a', 0x16, 0xa000);
Segment.$17 = new Segment('17', 0x17, 0xa000);
Segment.$18 = new Segment('18', 0x18, 0x8000);
Segment.$19 = new Segment('19', 0x19, 0xa000);
Segment.$1a = new Segment('1a', 0x1a, 0x8000);
Segment.$1b = new Segment('1b', 0x1b, 0xa000);
Segment.$fe = new Segment('fe', 0x1e, 0xc000);
Segment.$ff = new Segment('ff', 0x1f, 0xe000);
export class Address {
    constructor(seg, delta) {
        this.seg = seg;
        this.delta = delta;
    }
    static of(segment, org) {
        return new Address(segment, org - segment.org);
    }
    get offset() {
        return this.seg.offset + this.delta;
    }
    get org() {
        return this.seg.org + this.delta;
    }
    get segment() {
        return this.seg.name;
    }
    plus(offset, nextSegment) {
        const newDelta = this.delta + offset;
        if (newDelta >= 0x2000) {
            if (!nextSegment)
                throw new Error(`Segment changed`);
            if (this.seg.org & 0x2000)
                throw new Error(`Bad segment cross`);
            return new Address(nextSegment, newDelta & 0x1fff);
        }
        return new Address(this.seg, newDelta);
    }
    minus(addr) {
        if (addr.seg !== this.seg)
            throw new Error(`Incompatible segments`);
        return this.delta - addr.delta;
    }
    read(data) {
        return data[this.offset];
    }
    readLittleEndian(data) {
        const off = this.offset;
        return data[off] | data[off + 1] << 8;
    }
    readAddress(data, ...segments) {
        const org = this.readLittleEndian(data);
        if (!segments.length)
            segments = [this.seg];
        for (const s of segments) {
            if ((org & 0xe000) === (s.org & 0xe000))
                return Address.of(s, org);
        }
        throw new Error(`Could not find valid segment for ${hex(org)}`);
    }
    loc(assembler, name) {
        assembler.segment(this.segment);
        assembler.org(this.org, name);
    }
}
export function free(a, seg, start, end) {
    a.segment(seg.name);
    a.org(start);
    a.free(end - start);
}
export function relocExportLabel(a, seg, name) {
    a.segment(...seg.map(s => s.name));
    a.reloc(name);
    a.label(name);
    a.export(name);
}
export function cloneArray(arr) {
    return [...arr];
}
//# sourceMappingURL=data:application/json;base64,