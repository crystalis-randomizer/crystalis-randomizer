import { Token } from './token.js';
export class Macro {
    constructor(params, production) {
        this.params = params;
        this.production = production;
    }
    static from(line, source) {
        var _a;
        if (!Token.eq(line[0], Token.MACRO))
            throw new Error(`invalid`);
        if (((_a = line[1]) === null || _a === void 0 ? void 0 : _a.token) !== 'ident')
            throw new Error(`invalid`);
        const params = Token.identsFromCList(line.slice(2));
        const lines = [];
        let next;
        while ((next = source.next())) {
            if (Token.eq(next[0], Token.ENDMACRO))
                return new Macro(params, lines);
            if (Token.eq(next[0], Token.ENDMAC))
                return new Macro(params, lines);
            lines.push(next);
        }
        throw new Error(`EOF looking for .endmacro: ${Token.nameAt(line[1])}`);
    }
    expand(tokens, idGen) {
        let i = 1;
        const replacements = new Map();
        const lines = [];
        for (const param of this.params) {
            const comma = Token.findComma(tokens, i);
            let slice = tokens.slice(i, comma);
            i = comma + 1;
            if (slice.length === 1 && slice[0].token === 'grp') {
                slice = slice[0].inner;
            }
            replacements.set(param, slice);
        }
        if (i < tokens.length) {
            throw new Error(`Too many macro parameters: ${Token.nameAt(tokens[i])}`);
        }
        const locals = new Map();
        for (const line of this.production) {
            if (Token.eq(line[0], Token.LOCAL)) {
                for (const local of Token.identsFromCList(line.slice(1))) {
                    locals.set(local, `${local}@${idGen.next()}`);
                }
            }
            function map(toks) {
                const mapped = [];
                for (const tok of toks) {
                    if (tok.token === 'ident') {
                        const param = replacements.get(tok.str);
                        if (param) {
                            mapped.push(...param);
                            continue;
                        }
                        const local = locals.get(tok.str);
                        if (local) {
                            mapped.push({ token: 'ident', str: local });
                            continue;
                        }
                    }
                    else if (tok.token === 'grp') {
                        mapped.push({ token: 'grp', inner: map(tok.inner) });
                        continue;
                    }
                    const source = tok.source && tokens[0].source ?
                        { ...tok.source, parent: tokens[0].source } :
                        tok.source || tokens[0].source;
                    mapped.push(source ? { ...tok, source } : tok);
                }
                return mapped;
            }
            lines.push(map(line));
        }
        return lines;
    }
}
//# sourceMappingURL=data:application/json;base64,