let table;
const buildTable = () => {
    let c;
    table = new Uint32Array(256);
    for (let n = 0; n < 256; n++) {
        c = n;
        for (let k = 0; k < 8; k++) {
            c = ((c & 1) ? (0xedb88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
    }
};
const USE_TEXT_ENCODER = false;
const strToBytes = USE_TEXT_ENCODER && typeof TextEncoder === 'function' ?
    (str) => new TextEncoder().encode(str) :
    (str) => str.split('').map(x => x.charCodeAt(0));
export const crc32 = (arr) => {
    if (!table)
        buildTable();
    if (typeof arr === 'string')
        arr = strToBytes(arr);
    let sum = -1;
    for (let i = 0, len = arr.length; i < len; i++) {
        sum = (sum >>> 8) ^ table[(sum ^ arr[i]) & 0xff];
    }
    return (sum ^ (-1)) >>> 0;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JjMzIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvanMvY3JjMzIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxLQUFrQixDQUFDO0FBRXZCLE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRTtJQUN0QixJQUFJLENBQUMsQ0FBQztJQUNOLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDTixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3REO1FBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNkO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7QUFFL0IsTUFBTSxVQUFVLEdBQ1osZ0JBQWdCLElBQUksT0FBTyxXQUFXLEtBQUssVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWpFLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQW1DLEVBQVUsRUFBRTtJQUNuRSxJQUFJLENBQUMsS0FBSztRQUFFLFVBQVUsRUFBRSxDQUFDO0lBQ3pCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUTtRQUFFLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkQsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzlDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDbEQ7SUFDRCxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdGFibGU6IFVpbnQzMkFycmF5O1xuXG5jb25zdCBidWlsZFRhYmxlID0gKCkgPT4ge1xuICBsZXQgYztcbiAgdGFibGUgPSBuZXcgVWludDMyQXJyYXkoMjU2KTtcbiAgZm9yIChsZXQgbiA9IDA7IG4gPCAyNTY7IG4rKykge1xuICAgIGMgPSBuO1xuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgODsgaysrKSB7XG4gICAgICBjID0gKChjICYgMSkgPyAoMHhlZGI4ODMyMCBeIChjID4+PiAxKSkgOiAoYyA+Pj4gMSkpO1xuICAgIH1cbiAgICB0YWJsZVtuXSA9IGM7XG4gIH1cbn07XG5cbmNvbnN0IFVTRV9URVhUX0VOQ09ERVIgPSBmYWxzZTtcblxuY29uc3Qgc3RyVG9CeXRlczogKHN0cjogc3RyaW5nKSA9PiBVaW50OEFycmF5IHwgbnVtYmVyW10gPVxuICAgIFVTRV9URVhUX0VOQ09ERVIgJiYgdHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgKHN0cjogc3RyaW5nKSA9PiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKSA6XG4gICAgICAgIChzdHI6IHN0cmluZykgPT4gc3RyLnNwbGl0KCcnKS5tYXAoeCA9PiB4LmNoYXJDb2RlQXQoMCkpO1xuXG5leHBvcnQgY29uc3QgY3JjMzIgPSAoYXJyOiBudW1iZXJbXSB8IFVpbnQ4QXJyYXkgfCBzdHJpbmcpOiBudW1iZXIgPT4ge1xuICBpZiAoIXRhYmxlKSBidWlsZFRhYmxlKCk7XG4gIGlmICh0eXBlb2YgYXJyID09PSAnc3RyaW5nJykgYXJyID0gc3RyVG9CeXRlcyhhcnIpO1xuICBsZXQgc3VtID0gLTE7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzdW0gPSAoc3VtID4+PiA4KSBeIHRhYmxlWyhzdW0gXiBhcnJbaV0pICYgMHhmZl07XG4gIH1cbiAgcmV0dXJuIChzdW0gXiAoLTEpKSA+Pj4gMDtcbn07XG4iXX0=