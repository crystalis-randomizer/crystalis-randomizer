import { Item } from '../rom/item.js';
import { hex } from '../rom/util.js';
import { buildTradeInMap } from './shuffletrades.js';
import { fail } from '../assert.js';
export function fixDialog(rom) {
    const { flags: { AkahanaStatueOfOnyxTradein, AsinaInBackRoom, BehindWhirlpool, KensuInSwan, MtSabreNorthSummit, MtSabreWestTornel, PortoaQueen, Rage, RepairedStatue, SlimedKensu, StomFightReward, ZebuAtWindmill, }, npcs: { AkahanaInBrynmaer, Aryllis, Fisherman, }, } = rom;
    replaceMessage('03:06', ',', '');
    const tradeIns = buildTradeInMap(rom);
    function tradeIn(npc) {
        const trade = tradeIns.get(npc.id);
        if (!trade)
            throw new Error(`No trade-in for ${npc.name}`);
        return rom.items[trade];
    }
    if (!ZebuAtWindmill.item.isMagic())
        unmagic('00:1b');
    replaceMessage('00:1b', '[41:Refresh]', item(ZebuAtWindmill.item));
    const akahanaWant = tradeIn(AkahanaInBrynmaer);
    replaceMessage('02:01', 'an unusual statue', vague(akahanaWant));
    replaceMessage('02:02', 'a statue', `the ${commonNoun(akahanaWant)}`);
    replaceMessage('02:02', '[29:Gas Mask]', item(AkahanaStatueOfOnyxTradein));
    if (!StomFightReward.item.isMagic())
        unmagic('03:01');
    replaceMessage('03:01', '[43:Telepathy]', item(StomFightReward));
    const tornelWant = findTornelTradeIn(rom);
    replaceMessage('03:01', '[06:Tornado Bracelet]', item(tornelWant));
    replaceMessage('05:0a', '[06:Tornado Bracelet]', item(tornelWant));
    replaceMessage('05:0a', '[44:Teleport]', item(MtSabreWestTornel));
    const fogLampWant = tradeIn(Fisherman);
    replaceMessage('09:01', '[35:Fog Lamp]', item(fogLampWant));
    replaceMessage('09:04', '[35:Fog Lamp]', item(fogLampWant));
    replaceMessage('09:05', '[35:Fog Lamp]', item(fogLampWant));
    replaceMessage('09:06', 'lamp', commonNoun(fogLampWant));
    const queenWant = rom.npcs.PortoaQueen.dialog()[3].condition;
    replaceMessage('0a:0c', '[28:Flute of Lime]', item(PortoaQueen));
    replaceMessage('0a:0d', '[02:Sword of Water]', item(queenWant));
    if (!AsinaInBackRoom.item.isMagic())
        unmagic('0b:01');
    replaceMessage('0b:01', '[45:Recover]', item(AsinaInBackRoom));
    if (!BehindWhirlpool.item.isMagic()) {
        unmagic('0b:01');
        unmagic('1d:12');
    }
    replaceMessage('0b:01', '[46:Barrier]', item(BehindWhirlpool));
    replaceMessage('1d:12', '[46:Barrier]', item(BehindWhirlpool));
    let fogLampCaveLoot = findLoot(0x4f, 0x4e, 0x4d, 0x4c, 0x47, 0x46, 0x45, 0x44, 0x4b, 0x4a, 0x49, 0x48);
    if (fogLampCaveLoot) {
        replaceMessage('0d:00', '[35:Fog Lamp]', item(fogLampCaveLoot));
    }
    else {
        replaceMessage('0d:00', 'that a [35:Fog Lamp] was', 'there was treasure');
    }
    const rageWant = rom.npcs.Rage.dialog()[0].condition;
    replaceMessage('0e:03', '[02:Sword of Water]', item(rageWant));
    replaceMessage('0e:03', '[09:Ball of Water]', item(Rage));
    replaceMessage('10:0c', 'that\'s', 'is');
    replaceMessage('10:0c', /, is in the\+lighthouse/, '');
    const aryllisWant = tradeIn(Aryllis);
    replaceMessage('12:05', '[3c:Kirisa Plant]', item(aryllisWant));
    replaceMessage('12:10', 'the plant', `the ${commonNoun(aryllisWant)}`);
    replaceMessage('12:10', '[3c:Kirisa Plant]', item(aryllisWant));
    const aryllisClue = `Our illustrious chief seeks ${vague(aryllisWant)}.`;
    replaceMessage('12:09', /[^]*/, aryllisClue);
    replaceMessage('12:0a', /[^]*/, aryllisClue);
    const lovePendantWant = tradeIn(rom.npcs.KensuInSwan);
    replaceMessage('13:02', '[3b:Love Pendant]', item(lovePendantWant));
    replaceMessage('13:00', 'pendant', commonNoun(lovePendantWant));
    if (!KensuInSwan.item.isMagic()) {
        unmagic('13:02');
    }
    replaceMessage('13:02', '[47:Change]', item(KensuInSwan));
    const ivoryStatueWant = tradeIn(rom.npcs.SlimedKensu);
    replaceMessage('18:06', '[3d:Ivory Statue]', item(ivoryStatueWant));
    replaceMessage('18:07', '[3d:Ivory Statue]', item(ivoryStatueWant));
    replaceMessage('18:06', `It's in a room`, '{0b:Karmine} is');
    if (!SlimedKensu.item.isMagic())
        replaceMessage('18:07', 'teach', 'give');
    replaceMessage('18:07', '[48:Flight]', item(SlimedKensu));
    if (!MtSabreNorthSummit.item.isMagic())
        unmagic('1c:10');
    replaceMessage('1c:10', '[42:Paralysis]', item(MtSabreNorthSummit));
    replaceMessage('20:06', 'Statue of Gold', item(RepairedStatue));
    {
        const msg = rom.messages.alloc();
        rom.trigger(0x86).message.mid = msg.mid;
        msg.text =
            '{:HERO:}, there\'s nothing to see here! Return to Zebu at once!';
        rom.messages.parts[0x1c][0x0f].text =
            '{:HERO:}, you cannot climb this yet! Seek out [44:Teleport] at once!';
    }
    function unmagic(mid) {
        replaceMessage(mid, /teach\s+you\s+the\s+magic\s+of/, 'bestow upon you the');
    }
    function item(item) {
        if (typeof item === 'number') {
            item = rom.items[rom.itemGets[item & 0xff].itemId];
        }
        else if (!(item instanceof Item))
            item = item.item;
        return `[${hex(item.id)}:${item.messageName}]`;
    }
    function replaceMessage(mid, pat, repl) {
        const [part, index] = mid.split(':').map(x => parseInt(x, 16));
        const msg = rom.messages.parts[part][index];
        msg.text = msg.text.replace(pat, repl);
    }
    function findLoot(...locs) {
        const conditions = [
            (item) => BOWS.has(item),
            (item) => SWORD_OR_MAGIC.has(item),
            (item) => itemget(item).unique,
        ];
        for (const cond of conditions) {
            for (const id of locs) {
                const loc = rom.locations[id];
                for (const spawn of loc.spawns) {
                    if (!spawn.isChest())
                        continue;
                    const item = rom.slots[spawn.id];
                    if (item <= 0x48 && cond(item)) {
                        return rom.items[item];
                    }
                }
            }
        }
        return undefined;
    }
    function itemget(id) {
        const itemget = rom.itemGets[id];
        return rom.items[itemget.itemId];
    }
}
const BOWS = new Set([0x3e, 0x3f, 0x40]);
const SWORD_OR_MAGIC = new Set([0x00, 0x01, 0x02, 0x03, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48]);
function findTornelTradeIn(rom) {
    const { Tornel } = rom.npcs;
    for (const ds of Tornel.localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            const item = ~ds[i].condition;
            if (item > 0x204 && item <= 0x20c && !(item & 1)) {
                return rom.items[item & 0xff];
            }
        }
    }
    return rom.items.TornadoBracelet;
}
function vague(item) {
    const items = item.rom.items;
    switch (item) {
        case items.StatueOfOnyx: return 'an unusual statue';
        case items.FluteOfLime: return 'a rare instrument';
        case items.FogLamp: return 'a brilliant lamp';
        case items.LovePendant: return 'a beautiful charm';
        case items.KirisaPlant: return 'a fragrant plant';
        case items.IvoryStatue: return 'an exotic statue';
    }
    fail();
    return 'a valuable item';
}
function commonNoun(item) {
    const items = item.rom.items;
    switch (item) {
        case items.StatueOfOnyx: return 'statue';
        case items.FluteOfLime: return 'instrument';
        case items.FogLamp: return 'lamp';
        case items.LovePendant: return 'pendant';
        case items.KirisaPlant: return 'plant';
        case items.IvoryStatue: return 'statue';
    }
    fail();
    return 'item';
}
//# sourceMappingURL=data:application/json;base64,