import { Token } from './token.js';
import { Tokenizer } from './tokenizer.js';
export class IncludeWrapper {
    constructor(readFile, source, stream, opts) {
        this.readFile = readFile;
        this.source = source;
        this.stream = stream;
        this.opts = opts;
    }
    async nextAsync() {
        while (true) {
            const line = this.source.next();
            if ((line === null || line === void 0 ? void 0 : line[0].token) !== 'cs')
                return line;
            if (line[0].str !== '.include')
                return line;
            const path = str(line);
            const code = await this.readFile(path);
            this.stream.enter(new Tokenizer(code, path, this.opts));
        }
    }
}
export class ConsoleWrapper {
    constructor(source) {
        this.source = source;
    }
    next() {
        while (true) {
            const line = this.source.next();
            if ((line === null || line === void 0 ? void 0 : line[0].token) !== 'cs')
                return line;
            switch (line[0].str) {
                case '.out':
                    console.log(str(line));
                    break;
                case '.warning':
                    console.warn(str(line));
                    break;
                case '.error':
                    err(line);
                    break;
                default:
                    return line;
            }
        }
    }
}
function err(line) {
    const msg = str(line);
    throw new Error(msg + Token.at(line[0]));
}
function str(line) {
    const str = Token.expectString(line[1], line[0]);
    Token.expectEol(line[2], 'a single string');
    return str;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvYXNtL2lvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxLQUFLLEVBQWMsTUFBTSxZQUFZLENBQUM7QUFDOUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR3pDLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLFlBQ2EsUUFBMkMsRUFDM0MsTUFBbUIsRUFBVyxNQUFtQixFQUNqRCxJQUF3QjtRQUZ4QixhQUFRLEdBQVIsUUFBUSxDQUFtQztRQUMzQyxXQUFNLEdBQU4sTUFBTSxDQUFhO1FBQVcsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNqRCxTQUFJLEdBQUosSUFBSSxDQUFvQjtJQUFHLENBQUM7SUFFekMsS0FBSyxDQUFDLFNBQVM7UUFDYixPQUFPLElBQUksRUFBRTtZQUNYLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRyxDQUFDLEVBQUUsS0FBSyxNQUFLLElBQUk7Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFDMUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLFVBQVU7Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFDNUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFBcUIsTUFBbUI7UUFBbkIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtJQUFHLENBQUM7SUFFNUMsSUFBSTtRQUNGLE9BQU8sSUFBSSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFHLENBQUMsRUFBRSxLQUFLLE1BQUssSUFBSTtnQkFBRSxPQUFPLElBQUksQ0FBQztZQUMxQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ25CLEtBQUssTUFBTTtvQkFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN2QixNQUFNO2dCQUNSLEtBQUssVUFBVTtvQkFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUN4QixNQUFNO2dCQUNSLEtBQUssUUFBUTtvQkFDWCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ1YsTUFBTTtnQkFDUjtvQkFDRSxPQUFPLElBQUksQ0FBQzthQUNmO1NBQ0Y7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxTQUFTLEdBQUcsQ0FBQyxJQUFhO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELFNBQVMsR0FBRyxDQUFDLElBQWE7SUFDeEIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM1QyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Rva2VuLCBUb2tlblNvdXJjZX0gZnJvbSAnLi90b2tlbi5qcyc7XG5pbXBvcnQge1Rva2VuaXplcn0gZnJvbSAnLi90b2tlbml6ZXIuanMnO1xuaW1wb3J0IHtUb2tlblN0cmVhbX0gZnJvbSAnLi90b2tlbnN0cmVhbS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJbmNsdWRlV3JhcHBlciBpbXBsZW1lbnRzIFRva2VuU291cmNlLkFzeW5jIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSByZWFkRmlsZTogKHBhdGg6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+LFxuICAgICAgcmVhZG9ubHkgc291cmNlOiBUb2tlblNvdXJjZSwgcmVhZG9ubHkgc3RyZWFtOiBUb2tlblN0cmVhbSxcbiAgICAgIHJlYWRvbmx5IG9wdHM/OiBUb2tlbml6ZXIuT3B0aW9ucykge31cblxuICBhc3luYyBuZXh0QXN5bmMoKTogUHJvbWlzZTxUb2tlbltdfHVuZGVmaW5lZD4ge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdGhpcy5zb3VyY2UubmV4dCgpO1xuICAgICAgaWYgKGxpbmU/LlswXS50b2tlbiAhPT0gJ2NzJykgcmV0dXJuIGxpbmU7XG4gICAgICBpZiAobGluZVswXS5zdHIgIT09ICcuaW5jbHVkZScpIHJldHVybiBsaW5lO1xuICAgICAgY29uc3QgcGF0aCA9IHN0cihsaW5lKTtcbiAgICAgIGNvbnN0IGNvZGUgPSBhd2FpdCB0aGlzLnJlYWRGaWxlKHBhdGgpO1xuICAgICAgLy8gVE9ETyAtIG9wdGlvbnM/XG4gICAgICB0aGlzLnN0cmVhbS5lbnRlcihuZXcgVG9rZW5pemVyKGNvZGUsIHBhdGgsIHRoaXMub3B0cykpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uc29sZVdyYXBwZXIgaW1wbGVtZW50cyBUb2tlblNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNvdXJjZTogVG9rZW5Tb3VyY2UpIHt9XG5cbiAgbmV4dCgpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMuc291cmNlLm5leHQoKTtcbiAgICAgIGlmIChsaW5lPy5bMF0udG9rZW4gIT09ICdjcycpIHJldHVybiBsaW5lO1xuICAgICAgc3dpdGNoIChsaW5lWzBdLnN0cikge1xuICAgICAgICBjYXNlICcub3V0JzpcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdHIobGluZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcud2FybmluZyc6XG4gICAgICAgICAgY29uc29sZS53YXJuKHN0cihsaW5lKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJy5lcnJvcic6XG4gICAgICAgICAgZXJyKGxpbmUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBsaW5lO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBlcnIobGluZTogVG9rZW5bXSk6IG5ldmVyIHtcbiAgY29uc3QgbXNnID0gc3RyKGxpbmUpO1xuICB0aHJvdyBuZXcgRXJyb3IobXNnICsgVG9rZW4uYXQobGluZVswXSkpO1xufVxuXG5mdW5jdGlvbiBzdHIobGluZTogVG9rZW5bXSk6IHN0cmluZyB7XG4gIGNvbnN0IHN0ciA9IFRva2VuLmV4cGVjdFN0cmluZyhsaW5lWzFdLCBsaW5lWzBdKTtcbiAgVG9rZW4uZXhwZWN0RW9sKGxpbmVbMl0sICdhIHNpbmdsZSBzdHJpbmcnKTtcbiAgcmV0dXJuIHN0cjtcbn1cbiJdfQ==