import { Define } from './define.js';
import { Expr } from './expr.js';
import { Macro } from './macro.js';
import { Token, TokenSource } from './token.js';
const MAX_STACK_DEPTH = 100;
const ID_MAP = new WeakMap();
function idGen(env) {
    let id = ID_MAP.get(env);
    if (!id)
        ID_MAP.set(env, id = (num => ({ next: () => num++ }))(0));
    return id;
}
export class Preprocessor extends TokenSource.Abstract {
    constructor(stream, env, parent) {
        super();
        this.stream = stream;
        this.env = env;
        this.repeats = [];
        this.runDirectives = {
            '.define': (line) => this.parseDefine(line),
            '.undefine': (line) => this.parseUndefine(line),
            '.else': ([cs]) => badClose('.if', cs),
            '.elseif': ([cs]) => badClose('.if', cs),
            '.endif': ([cs]) => badClose('.if', cs),
            '.endmac': ([cs]) => badClose('.macro', cs),
            '.endmacro': ([cs]) => badClose('.macro', cs),
            '.endrep': (line) => this.parseEndRepeat(line),
            '.endrepeat': (line) => this.parseEndRepeat(line),
            '.exitmacro': ([, a]) => { noGarbage(a); this.stream.exit(); },
            '.if': ([cs, ...args]) => this.parseIf(!!this.evaluateConst(parseOneExpr(args, cs))),
            '.ifdef': ([cs, ...args]) => this.parseIf(this.macros.has(parseOneIdent(args, cs))),
            '.ifndef': ([cs, ...args]) => this.parseIf(!this.macros.has(parseOneIdent(args, cs))),
            '.ifblank': ([, ...args]) => this.parseIf(!args.length),
            '.ifnblank': ([, ...args]) => this.parseIf(!!args.length),
            '.ifref': ([cs, ...args]) => this.parseIf(this.env.referencedSymbol(parseOneIdent(args, cs))),
            '.ifnref': ([cs, ...args]) => this.parseIf(!this.env.referencedSymbol(parseOneIdent(args, cs))),
            '.ifsym': ([cs, ...args]) => this.parseIf(this.env.definedSymbol(parseOneIdent(args, cs))),
            '.ifnsym': ([cs, ...args]) => this.parseIf(!this.env.definedSymbol(parseOneIdent(args, cs))),
            '.ifconst': ([cs, ...args]) => this.parseIf(this.env.constantSymbol(parseOneIdent(args, cs))),
            '.ifnconst': ([cs, ...args]) => this.parseIf(!this.env.constantSymbol(parseOneIdent(args, cs))),
            '.macro': (line) => this.parseMacro(line),
            '.repeat': (line) => this.parseRepeat(line),
        };
        this.macros = parent ? parent.macros : new Map();
    }
    *pump() {
        const line = this.readLine();
        if (line == null)
            return void (yield line);
        while (line.length) {
            const front = line[0];
            switch (front.token) {
                case 'ident':
                    if (Token.eq(line[1], Token.COLON)) {
                        yield line.splice(0, 2);
                        break;
                    }
                    if (!this.tryExpandMacro(line))
                        yield line;
                    return;
                case 'cs':
                    if (!this.tryRunDirective(line))
                        yield line;
                    return;
                case 'op':
                    if (/^[-+]+$/.test(front.str)) {
                        const label = [front];
                        const second = line[1];
                        if (second && Token.eq(second, Token.COLON)) {
                            label.push(second);
                            line.splice(0, 2);
                        }
                        else {
                            label.push({ token: 'op', str: ':' });
                            line.splice(0, 1);
                        }
                        yield label;
                        break;
                    }
                    else if (front.str === ':') {
                        yield line.splice(0, 1);
                        break;
                    }
                default:
                    throw new Error(`Unexpected: ${Token.nameAt(line[0])}`);
            }
        }
    }
    readLine() {
        const line = this.stream.next();
        if (line == null)
            return line;
        return this.expandLine(line);
    }
    expandLine(line, pos = 0) {
        const front = line[0];
        let depth = 0;
        let maxPos = 0;
        while (pos < line.length) {
            if (pos > maxPos) {
                maxPos = pos;
                depth = 0;
            }
            else if (depth++ > MAX_STACK_DEPTH) {
                throw new Error(`Maximum expansion depth reached: ${line.map(Token.name).join(' ')}${Token.at(front)}`);
            }
            pos = this.expandToken(line, pos);
        }
        return line;
    }
    expandToken(line, pos) {
        const front = line[pos];
        if (front.token === 'ident') {
            const define = this.macros.get(front.str);
            if (define instanceof Define) {
                const overflow = define.expand(line, pos);
                if (overflow) {
                    if (overflow.length)
                        this.stream.unshift(...overflow);
                    return pos;
                }
            }
        }
        else if (front.token === 'cs') {
            return this.expandDirective(front.str, line, pos);
        }
        return pos + 1;
    }
    tryExpandMacro(line) {
        const [first] = line;
        if (first.token !== 'ident')
            throw new Error(`impossible`);
        const macro = this.macros.get(first.str);
        if (!(macro instanceof Macro))
            return false;
        const expansion = macro.expand(line, idGen(this.env));
        this.stream.enter();
        this.stream.unshift(...expansion);
        return true;
    }
    expandDirective(directive, line, i) {
        switch (directive) {
            case '.define':
            case '.ifdef':
            case '.ifndef':
            case '.undefine':
                return this.skipIdentifier(line, i);
            case '.skip': return this.skip(line, i);
            case '.noexpand': return this.noexpand(line, i);
            case '.tcount': return this.parseArgs(line, i, 1, this.tcount);
            case '.ident': return this.parseArgs(line, i, 1, this.ident);
            case '.string': return this.parseArgs(line, i, 1, this.string);
            case '.concat': return this.parseArgs(line, i, 0, this.concat);
            case '.sprintf': return this.parseArgs(line, i, 0, this.sprintf);
            case '.cond': return this.parseArgs(line, i, 0, this.cond);
            case '.def':
            case '.defined':
                return this.parseArgs(line, i, 1, this.defined);
            case '.definedsymbol':
                return this.parseArgs(line, i, 1, this.definedSymbol);
            case '.constantsymbol':
                return this.parseArgs(line, i, 1, this.constantSymbol);
            case '.referencedsymbol':
                return this.parseArgs(line, i, 1, this.referencedSymbol);
        }
        return i + 1;
    }
    skip(line, i) {
        line.splice(i, 1);
        const skipped = line[i];
        if ((skipped === null || skipped === void 0 ? void 0 : skipped.token) === 'grp') {
            this.expandToken(skipped.inner, 0);
        }
        else {
            this.expandToken(line, i + 1);
        }
        return i;
    }
    noexpand(line, i) {
        const skip = line[i + 1];
        if (skip.token === 'grp') {
            line.splice(i, 2, ...skip.inner);
            i += skip.inner.length - 1;
        }
        else {
            line.splice(i, 1);
        }
        return i + 1;
    }
    parseArgs(line, i, argCount, fn) {
        const cs = line[i];
        Token.expect(Token.LP, line[i + 1], cs);
        const end = Token.findBalanced(line, i + 1);
        const args = Token.parseArgList(line, i + 2, end).map(ts => {
            if (ts.length === 1 && ts[0].token === 'grp')
                ts = ts[0].inner;
            return this.expandLine(ts);
        });
        if (argCount && args.length !== argCount) {
            throw new Error(`Expected ${argCount} parameters: ${Token.nameAt(cs)}`);
        }
        const expansion = fn.call(this, cs, ...args);
        line.splice(i, end + 1 - i, ...expansion);
        return i;
    }
    tcount(cs, arg) {
        return [{ token: 'num', num: Token.count(arg), source: cs.source }];
    }
    ident(cs, arg) {
        const str = Token.expectString(arg[0], cs);
        Token.expectEol(arg[1], 'a single token');
        return [{ token: 'ident', str, source: arg[0].source }];
    }
    string(cs, arg) {
        const str = Token.expectIdentifier(arg[0], cs);
        Token.expectEol(arg[1], 'a single token');
        return [{ token: 'str', str, source: arg[0].source }];
    }
    concat(cs, ...args) {
        const strs = args.map(ts => {
            const str = Token.expectString(ts[0]);
            Token.expectEol(ts[1], 'a single string');
            return str;
        });
        return [{ token: 'str', str: strs.join(''), source: cs.source }];
    }
    sprintf(cs, fmtToks, ...args) {
        const fmt = Token.expectString(fmtToks[0], cs);
        Token.expectEol(fmtToks[1], 'a single format string');
        const [] = [fmt];
        throw new Error('unimplemented');
    }
    cond(cs, ...args) {
        throw new Error('unimplemented');
    }
    defined(cs, arg) {
        const ident = Token.expectIdentifier(arg[0], cs);
        Token.expectEol(arg[1], 'a single identifier');
        return [{ token: 'num', num: this.macros.has(ident) ? 1 : 0 }];
    }
    definedSymbol(cs, arg) {
        const ident = Token.expectIdentifier(arg[0], cs);
        Token.expectEol(arg[1], 'a single identifier');
        return [{ token: 'num', num: this.env.definedSymbol(ident) ? 1 : 0 }];
    }
    constantSymbol(cs, arg) {
        const ident = Token.expectIdentifier(arg[0], cs);
        Token.expectEol(arg[1], 'a single identifier');
        return [{ token: 'num', num: this.env.constantSymbol(ident) ? 1 : 0 }];
    }
    referencedSymbol(cs, arg) {
        const ident = Token.expectIdentifier(arg[0], cs);
        Token.expectEol(arg[1], 'a single identifier');
        return [{ token: 'num', num: this.env.referencedSymbol(ident) ? 1 : 0 }];
    }
    skipIdentifier(line, i) {
        var _a;
        return ((_a = line[i + 1]) === null || _a === void 0 ? void 0 : _a.token) === 'ident' ? i + 2 : i + 1;
    }
    tryRunDirective(line) {
        const first = line[0];
        if (first.token !== 'cs')
            throw new Error(`impossible`);
        const handler = this.runDirectives[first.str];
        if (!handler)
            return false;
        handler(line);
        return true;
    }
    evaluateConst(expr) {
        var _a;
        expr = Expr.traversePost(expr, Expr.evaluate);
        if (expr.op === 'num' && !((_a = expr.meta) === null || _a === void 0 ? void 0 : _a.rel))
            return expr.num;
        const at = Token.at(expr);
        throw new Error(`Expected a constant${at}`);
    }
    parseDefine(line) {
        const name = Token.expectIdentifier(line[1], line[0]);
        const define = Define.from(line);
        const prev = this.macros.get(name);
        if (prev instanceof Define) {
            prev.append(define);
        }
        else if (prev) {
            throw new Error(`Already defined: ${name}`);
        }
        else {
            this.macros.set(name, define);
        }
    }
    parseUndefine(line) {
        const [cs, ident, eol] = line;
        const name = Token.expectIdentifier(ident, cs);
        Token.expectEol(eol);
        if (!this.macros.has(name)) {
            throw new Error(`Not defined: ${Token.nameAt(ident)}`);
        }
        this.macros.delete(name);
    }
    parseMacro(line) {
        const name = Token.expectIdentifier(line[1], line[0]);
        const macro = Macro.from(line, this.stream);
        const prev = this.macros.get(name);
        if (prev)
            throw new Error(`Already defined: ${name}`);
        this.macros.set(name, macro);
    }
    parseRepeat(line) {
        var _a;
        const [expr, end] = Expr.parse(line, 1);
        const at = line[1] || line[0];
        if (!expr)
            throw new Error(`Expected expression: ${Token.nameAt(at)}`);
        const times = this.evaluateConst(expr);
        if (times == null)
            throw new Error(`Expected a constant${Token.at(expr)}`);
        let ident;
        if (end < line.length) {
            if (!Token.eq(line[end], Token.COMMA)) {
                throw new Error(`Expected comma: ${Token.nameAt(line[end])}`);
            }
            ident = Token.expectIdentifier(line[end + 1]);
            Token.expectEol(line[end + 2]);
        }
        const lines = [];
        let depth = 1;
        while (depth > 0) {
            line = (_a = this.stream.next()) !== null && _a !== void 0 ? _a : fail(`.repeat with no .endrep`);
            if (Token.eq(line[0], Token.REPEAT))
                depth++;
            if (Token.eq(line[0], Token.ENDREPEAT))
                depth--;
            if (Token.eq(line[0], Token.ENDREP))
                depth--;
            lines.push(line);
        }
        this.repeats.push([lines, times, -1, ident]);
        this.parseEndRepeat(line);
    }
    parseEndRepeat(line) {
        Token.expectEol(line[1]);
        const top = this.repeats.pop();
        if (!top)
            throw new Error(`.endrep with no .repeat${Token.at(line[0])}`);
        if (++top[2] >= top[1])
            return;
        this.repeats.push(top);
        this.stream.unshift(...top[0].map(line => line.map(token => {
            if (token.token !== 'ident' || token.str !== top[3])
                return token;
            const t = { token: 'num', num: top[2] };
            if (token.source)
                t.source = token.source;
            return t;
        })));
    }
    parseIf(cond) {
        let depth = 1;
        let done = false;
        const result = [];
        while (depth > 0) {
            const line = this.stream.next();
            if (!line)
                throw new Error(`EOF looking for .endif`);
            const front = line[0];
            if (Token.eq(front, Token.ENDIF)) {
                depth--;
                if (!depth)
                    break;
            }
            else if (front.token === 'cs' && front.str.startsWith('.if')) {
                depth++;
            }
            else if (depth === 1 && !done) {
                if (cond && (Token.eq(front, Token.ELSE) ||
                    Token.eq(front, Token.ELSEIF))) {
                    cond = false;
                    done = true;
                    continue;
                }
                else if (Token.eq(front, Token.ELSEIF)) {
                    cond = !!this.evaluateConst(parseOneExpr(line.slice(1), front));
                    continue;
                }
                else if (Token.eq(front, Token.ELSE)) {
                    cond = true;
                    continue;
                }
            }
            if (cond)
                result.push(line);
        }
        this.stream.unshift(...result);
    }
}
function parseOneIdent(ts, prev) {
    const e = parseOneExpr(ts, prev);
    return Expr.identifier(e);
}
function parseOneExpr(ts, prev) {
    if (!ts.length) {
        if (!prev)
            throw new Error(`Expected expression`);
        throw new Error(`Expected expression: ${Token.nameAt(prev)}`);
    }
    return Expr.parseOnly(ts);
}
function noGarbage(token) {
    if (token)
        throw new Error(`garbage at end of line: ${Token.nameAt(token)}`);
}
function badClose(open, tok) {
    throw new Error(`${Token.name(tok)} with no ${open}${Token.at(tok)}`);
}
function fail(msg) {
    throw new Error(msg);
}
//# sourceMappingURL=data:application/json;base64,