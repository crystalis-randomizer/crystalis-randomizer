import { iters } from '../util.js';
export var Requirement;
(function (Requirement) {
    function and(...cs) {
        return [[].concat(...cs.map(([c]) => c))];
    }
    Requirement.and = and;
    function or(...rs) {
        const out = [];
        for (const r of rs) {
            if (r === Requirement.OPEN)
                return Requirement.OPEN;
            if (r === Requirement.CLOSED)
                continue;
            out.push(...freeze(r));
        }
        if (!out.length)
            return Requirement.CLOSED;
        return out;
    }
    Requirement.or = or;
    function meet(left, right) {
        if (left === Requirement.OPEN)
            return freeze(right);
        if (right === Requirement.OPEN)
            return freeze(left);
        if (left === Requirement.CLOSED || right === Requirement.CLOSED)
            return Requirement.CLOSED;
        const out = new Builder();
        for (const ls of left) {
            for (const rs of right) {
                out.addList([...ls, ...rs]);
            }
        }
        return freeze(out);
    }
    Requirement.meet = meet;
    function freeze(r) {
        return r instanceof Builder ?
            [...iters.map(r, (cs) => [...cs])] : r;
    }
    Requirement.freeze = freeze;
    function label(r) {
        return r instanceof Builder ?
            r.label() :
            r.map((cs) => cs.join('&')).join('|');
    }
    Requirement.label = label;
    function isOpen(r) {
        const outer = r[Symbol.iterator]();
        const { value, done } = outer.next();
        if (done || !outer.next().done)
            return false;
        const inner = value[Symbol.iterator]();
        return inner.next().done;
    }
    Requirement.isOpen = isOpen;
    function isClosed(r) {
        const iter = r[Symbol.iterator]();
        return Boolean(iter.next().done);
    }
    Requirement.isClosed = isClosed;
    Requirement.OPEN = [[]];
    Requirement.CLOSED = [];
    class Builder {
        constructor(self) {
            this.self = self;
            this.map = new Map();
        }
        [Symbol.iterator]() {
            return this.map.values();
        }
        addInternal(newLabel, newDeps) {
            for (const c of newDeps)
                if (Array.isArray(c))
                    throw new Error();
            if (newDeps.has(this.self) || this.map.has(newLabel))
                return false;
            for (const [curLabel, curDeps] of this.map) {
                if (containsAll(newDeps, curDeps))
                    return false;
                if (containsAll(curDeps, newDeps))
                    this.map.delete(curLabel);
            }
            this.map.set(newLabel, newDeps);
            return true;
        }
        addRoute(route) {
            return this.addInternal(route[DEPS_LABEL], route.deps);
        }
        addAll(requirement) {
            for (const conditions of requirement) {
                this.addList(conditions);
            }
        }
        addList(conditions) {
            const sorted = [...new Set(conditions)].sort();
            const deps = new Set(sorted);
            this.addInternal(sorted.join('&'), deps);
        }
        restrict(r) {
            const l = [...this.map.values()];
            this.map.clear();
            for (const ls of l) {
                for (const rs of r) {
                    this.addList([...ls, ...rs]);
                }
            }
        }
        label() {
            return [this.map.keys()].join('|');
        }
    }
    Requirement.Builder = Builder;
})(Requirement || (Requirement = {}));
function containsAll(left, right) {
    if (left.size < right.size)
        return false;
    for (const d of right) {
        if (!left.has(d))
            return false;
    }
    return true;
}
const DEPS_LABEL = Symbol('depsLabel');
export class Route {
    constructor(target, conditions) {
        this.target = target;
        const sorted = [...new Set(conditions)].sort();
        this.deps = new Set(sorted);
        this[DEPS_LABEL] = sorted.join('&');
        this.label = `${this.target}:${this[DEPS_LABEL]}`;
    }
}
//# sourceMappingURL=data:application/json;base64,