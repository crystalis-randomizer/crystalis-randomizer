import { CaveShuffle } from './cave.js';
export class CycleCaveShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.maxAttempts = 400;
    }
    refineEdges() { return true; }
    preinfer() {
        const allTiles = [];
        for (let y = 0; y < this.h; y++) {
            for (let x = 0; x < this.w; x++) {
                const c = (y << 12 | x << 4 | 0x808);
                if (this.grid.get(c))
                    allTiles.push(c);
            }
        }
        const nonCritical = allTiles.filter(t => this.tryClear([t]).length === 1);
        if (!nonCritical.length) {
            return { ok: false, fail: 'all critical?' };
        }
        for (let i = 0; i < nonCritical.length; i++) {
            for (let j = 0; j < i; j++) {
                if (this.tryClear([nonCritical[i], nonCritical[j]]).length > 2) {
                    return super.preinfer();
                }
            }
        }
        return { ok: false, fail: 'unable to find pair of mutually critical tiles' };
    }
}
export class TightCycleCaveShuffle extends CycleCaveShuffle {
    removeTightLoops() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3ljbGVjYXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL21hemUvY3ljbGVjYXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFJeEMsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFdBQVc7SUFBakQ7O1FBQ0UsZ0JBQVcsR0FBRyxHQUFHLENBQUM7SUE0QnBCLENBQUM7SUF6QkMsV0FBVyxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU5QixRQUFRO1FBQ04sTUFBTSxRQUFRLEdBQWdCLEVBQUUsQ0FBQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFjLENBQUM7Z0JBQ2xELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDeEM7U0FDRjtRQUNELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFFdkIsT0FBTyxFQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBQyxDQUFDO1NBQzNDO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ3pCO2FBQ0Y7U0FDRjtRQUNELE9BQU8sRUFBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxnREFBZ0QsRUFBQyxDQUFDO0lBQzdFLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxnQkFBZ0I7SUFDekQsZ0JBQWdCLEtBQUksQ0FBQztDQUN0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhdmVTaHVmZmxlIH0gZnJvbSAnLi9jYXZlLmpzJztcbmltcG9ydCB7IEdyaWRDb29yZCB9IGZyb20gJy4vZ3JpZC5qcyc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuL21hemUuanMnO1xuXG5leHBvcnQgY2xhc3MgQ3ljbGVDYXZlU2h1ZmZsZSBleHRlbmRzIENhdmVTaHVmZmxlIHtcbiAgbWF4QXR0ZW1wdHMgPSA0MDA7XG5cbiAgLy8gRG8gbm90aGluZ1xuICByZWZpbmVFZGdlcygpIHsgcmV0dXJuIHRydWU7IH1cblxuICBwcmVpbmZlcigpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGNvbnN0IGFsbFRpbGVzOiBHcmlkQ29vcmRbXSA9IFtdO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oOyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53OyB4KyspIHtcbiAgICAgICAgY29uc3QgYyA9ICh5IDw8IDEyIHwgeCA8PCA0IHwgMHg4MDgpIGFzIEdyaWRDb29yZDtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZC5nZXQoYykpIGFsbFRpbGVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG5vbkNyaXRpY2FsID0gYWxsVGlsZXMuZmlsdGVyKHQgPT4gdGhpcy50cnlDbGVhcihbdF0pLmxlbmd0aCA9PT0gMSk7XG4gICAgaWYgKCFub25Dcml0aWNhbC5sZW5ndGgpIHtcbiAgICAgIC8vIGV2ZXJ5dGhpbmcgaXMgY3JpdGljYWxcbiAgICAgIHJldHVybiB7b2s6IGZhbHNlLCBmYWlsOiAnYWxsIGNyaXRpY2FsPyd9O1xuICAgIH1cbiAgICAvLyBmaW5kIHR3byBub25jcml0aWNhbCB0aWxlcyB0aGF0IHRvZ2V0aGVyICphcmUqIGNyaXRpY2FsXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25Dcml0aWNhbC5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMudHJ5Q2xlYXIoW25vbkNyaXRpY2FsW2ldLCBub25Dcml0aWNhbFtqXV0pLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICByZXR1cm4gc3VwZXIucHJlaW5mZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge29rOiBmYWxzZSwgZmFpbDogJ3VuYWJsZSB0byBmaW5kIHBhaXIgb2YgbXV0dWFsbHkgY3JpdGljYWwgdGlsZXMnfTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGlnaHRDeWNsZUNhdmVTaHVmZmxlIGV4dGVuZHMgQ3ljbGVDYXZlU2h1ZmZsZSB7XG4gIHJlbW92ZVRpZ2h0TG9vcHMoKSB7fVxufVxuIl19