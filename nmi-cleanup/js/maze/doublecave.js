import { CaveShuffle } from './cave.js';
import { coordToPos } from './grid.js';
import { iters } from '../util.js';
import { OK } from './maze.js';
export function bridgeCaveShuffle(underpass, overpass, reverse = false) {
    const under = new UnderpassShuffle(underpass, overpass, reverse);
    const over = new OverpassShuffle(overpass, under, reverse);
    return [under, over];
}
class OverpassShuffle extends CaveShuffle {
    constructor(location, under, reverse) {
        super(location);
        this.location = location;
        this.under = under;
        this.reverse = reverse;
        this.downStairs = [];
    }
    init() {
        this.downStairs = [];
    }
    build() {
        if (this.under.attempt < this.attempt) {
            this.under.meta = undefined;
            this.under.shuffle(this.random);
            if (!this.under.meta)
                return { ok: false, fail: `dependent failed` };
        }
        return super.build();
    }
    finishInternal() {
        if (!this.meta || !this.under.meta)
            throw new Error(`impossible`);
        this.under.finish();
        super.finishInternal();
        for (const [up, down] of iters.zip(this.under.upStairs, this.downStairs)) {
            this.meta.attach(down, this.under.meta, up);
        }
    }
    addEarlyFeatures() {
        const result = super.addEarlyFeatures();
        if (!result.ok)
            return result;
        let xMin = 16;
        let xMax = 0;
        let yMin = 16;
        let yMax = 0;
        let bridge = 1;
        for (const pos of [...this.under.underBridges,
            -1,
            ...this.under.upStairs]) {
            if (pos === -1) {
                bridge = 0;
                continue;
            }
            const y = pos >>> 4;
            const x = pos & 0xf;
            xMin = Math.min(x, xMin);
            xMax = Math.max(x, xMax);
            yMin = Math.min(y - bridge, yMin);
            yMax = Math.max(y + bridge, yMax);
        }
        OUTER: for (let attempt = 0; attempt < 10; attempt++) {
            const mods = [];
            const x = this.random.nextInt(this.w - (xMax - xMin)) + xMin;
            const y = this.random.nextInt(this.h - (yMax - yMin)) + yMin;
            const delta = (y - yMin) << 4 + (x - xMin);
            for (const bridge of this.under.underBridges) {
                const pos = bridge + delta;
                const sy = pos >>> 4;
                const sx = pos & 0xf;
                const c = (sy << 12 | sx << 4 | 0x808);
                if (this.grid.get(c) !== 'c')
                    continue OUTER;
                mods.push([c, 'b']);
                mods.push([c - 8, '']);
                mods.push([c + 8, '']);
            }
            for (const stair of this.under.upStairsEffective) {
                const pos = stair + delta;
                const sy = pos >>> 4;
                const sx = pos & 0xf;
                const c = (sy << 12 | sx << 4 | 0x808);
                if (this.grid.get(c) !== 'c')
                    continue OUTER;
                mods.push([c, this.reverse ? '<' : '>']);
                mods.push([c + (this.reverse ? -0x800 : 0x800), '']);
                const stairMods = this.addEarlyStair(c, this.reverse ? '<' : '>');
                if (!stairMods.length)
                    continue OUTER;
                mods.push(...stairMods);
            }
            for (const [c, v] of mods) {
                if (v)
                    this.fixed.add(c);
                if (v === '<' || v === '>') {
                    this.downStairs.push(coordToPos(c));
                }
                this.grid.set(c, v);
            }
            return OK;
        }
        return { ok: false, fail: 'add fixed stairs with early features' };
    }
    addStairs(up = 0, down = 0) {
        if (this.reverse) {
            return super.addStairs(up - this.under.upStairs.length, down);
        }
        return super.addStairs(up, down - this.under.upStairs.length);
    }
    addOverpasses() {
        return true;
    }
}
class UnderpassShuffle extends CaveShuffle {
    constructor(loc, overpass, reverse) {
        super(loc);
        this.loc = loc;
        this.overpass = overpass;
        this.reverse = reverse;
        this.underBridges = [];
        this.upStairs = [];
        this.upStairsEffective = [];
    }
    init() {
        this.underBridges = [];
        this.upStairs = [];
        this.upStairsEffective = [];
    }
    build() {
        const result = super.build();
        if (!result.ok)
            return result;
        if (!this.meta)
            throw new Error('impossible');
        const upStair = this.reverse ? 'stair:down' : 'stair:up';
        for (const pos of this.meta.allPos()) {
            const scr = this.meta.get(pos);
            if (scr.hasFeature('underpass'))
                this.underBridges.push(pos);
            if (scr.hasFeature(upStair)) {
                let delta = 0;
                for (const exit of scr.data.exits) {
                    if (exit.type === 'stair:up' && exit.entrance < 0x8000)
                        delta = -16;
                    if (exit.type === 'stair:down' && exit.entrance > 0x8000)
                        delta = 16;
                }
                this.upStairsEffective.push(pos + delta);
                this.upStairs.push(pos);
            }
        }
        if (!this.underBridges.length) {
            throw new Error(`Expected bridge in ${this.loc}\n${this.meta.show()}`);
        }
        if (!this.upStairs.length) {
            throw new Error(`Expected stair in ${this.loc}\n${this.meta.show()}`);
        }
        let stairsLen = 0;
        for (const [, type, [dest]] of this.orig.exits()) {
            if (type === upStair && (dest >>> 8) === this.overpass.id)
                stairsLen++;
        }
        this.upStairs = this.random.shuffle(this.upStairs).slice(0, stairsLen);
        return OK;
    }
}
//# sourceMappingURL=data:application/json;base64,