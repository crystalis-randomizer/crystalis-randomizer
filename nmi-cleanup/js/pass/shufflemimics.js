import { iters } from '../util.js';
export function shuffleMimics(rom, flags, random) {
    const chests = [];
    const mimics = [];
    for (const location of rom.locations) {
        if (INELIGIBLE_LOCATIONS.has(location.id))
            continue;
        for (const spawn of location.spawns) {
            if (spawn.isChest()) {
                const slot = rom.slots[spawn.id];
                if (slot >= 0x70)
                    mimics.push(spawn.id);
                if (flags.preserveUniqueChecks()) {
                    const itemget = rom.itemGets[slot];
                    const item = rom.items[itemget === null || itemget === void 0 ? void 0 : itemget.itemId];
                    if (item === null || item === void 0 ? void 0 : item.unique)
                        continue;
                }
                if (spawn.isInvisible())
                    continue;
                chests.push(spawn.id);
            }
        }
    }
    random.shuffle(chests);
    rom.slots.setMimicCount(mimics.length);
    [...iters.zip(mimics, chests, (i, j) => rom.slots.swap(i, j))];
}
const INELIGIBLE_LOCATIONS = new Set([
    0xb6,
]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZW1pbWljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9wYXNzL3NodWZmbGVtaW1pY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVqQyxNQUFNLFVBQVUsYUFBYSxDQUFDLEdBQVEsRUFBRSxLQUFjLEVBQUUsTUFBYztJQUdwRSxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLEtBQUssTUFBTSxRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUNwQyxJQUFJLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQUUsU0FBUztRQUNwRCxLQUFLLE1BQU0sS0FBSyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDbkMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBRW5CLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNqQyxJQUFJLElBQUksSUFBSSxJQUFJO29CQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFO29CQUNoQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUMsQ0FBQztvQkFDeEMsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsTUFBTTt3QkFBRSxTQUFTO2lCQUM1QjtnQkFDRCxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7b0JBQUUsU0FBUztnQkFFbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDdkI7U0FDRjtLQUNGO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUd2QixHQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUVELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxHQUFHLENBQUM7SUFDbkMsSUFBSTtDQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmxhZ1NldH0gZnJvbSAnLi4vZmxhZ3NldC5qcyc7XG5pbXBvcnQge1JhbmRvbX0gZnJvbSAnLi4vcmFuZG9tLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtpdGVyc30gZnJvbSAnLi4vdXRpbC5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlTWltaWNzKHJvbTogUm9tLCBmbGFnczogRmxhZ1NldCwgcmFuZG9tOiBSYW5kb20pIHtcbiAgLy8gTk9URTogaWYgZmxhZ3MucHJlc2VydmVVbmlxdWVDaGVja3MoKSB0aGVuIG9ubHkgZG8gbm9udW5pcXVlIGNoZXN0c1xuICAvLyAxLiBnYXRoZXIgYWxsIHRoZSBjaGVzdHNcbiAgY29uc3QgY2hlc3RzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBtaW1pY3M6IG51bWJlcltdID0gW107XG4gIGZvciAoY29uc3QgbG9jYXRpb24gb2Ygcm9tLmxvY2F0aW9ucykge1xuICAgIGlmIChJTkVMSUdJQkxFX0xPQ0FUSU9OUy5oYXMobG9jYXRpb24uaWQpKSBjb250aW51ZTtcbiAgICBmb3IgKGNvbnN0IHNwYXduIG9mIGxvY2F0aW9uLnNwYXducykge1xuICAgICAgaWYgKHNwYXduLmlzQ2hlc3QoKSkge1xuICAgICAgICAvLyBJcyB0aGlzIGFuIGVsaWdpYmxlIGNoZXN0P1xuICAgICAgICBjb25zdCBzbG90ID0gcm9tLnNsb3RzW3NwYXduLmlkXTtcbiAgICAgICAgaWYgKHNsb3QgPj0gMHg3MCkgbWltaWNzLnB1c2goc3Bhd24uaWQpO1xuICAgICAgICBpZiAoZmxhZ3MucHJlc2VydmVVbmlxdWVDaGVja3MoKSkge1xuICAgICAgICAgIGNvbnN0IGl0ZW1nZXQgPSByb20uaXRlbUdldHNbc2xvdF07XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHJvbS5pdGVtc1tpdGVtZ2V0Py5pdGVtSWRdO1xuICAgICAgICAgIGlmIChpdGVtPy51bmlxdWUpIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGF3bi5pc0ludmlzaWJsZSgpKSBjb250aW51ZTtcbiAgICAgICAgLy8gQWRkIGVsaWdpYmxlIGNoZXN0c1xuICAgICAgICBjaGVzdHMucHVzaChzcGF3bi5pZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIDIuIHNodWZmbGUgdGhlIGNoZXN0cy5cbiAgcmFuZG9tLnNodWZmbGUoY2hlc3RzKTtcbiAgLy8gMy4gemlwIHRoZSBjaGVzdHMgYW5kIG1pbWljcyB0b2dldGhlciBhbmQgc3dhcC5cbiAgLy8gTk9URTogc3ByZWFkIHRoZSByZXN1bHQgc2luY2Ugb3RoZXJ3aXNlIHppcCBpcyBsYXp5LlxuICByb20uc2xvdHMuc2V0TWltaWNDb3VudChtaW1pY3MubGVuZ3RoKTtcbiAgWy4uLml0ZXJzLnppcChtaW1pY3MsIGNoZXN0cywgKGksIGopID0+IHJvbS5zbG90cy5zd2FwKGksIGopKV07XG59XG5cbmNvbnN0IElORUxJR0lCTEVfTE9DQVRJT05TID0gbmV3IFNldChbXG4gIDB4YjYsIC8vIENoZXN0IGJlaGluZCBLYXJtaW5lIC0gZ3JhcGhpY3MgYXJlIGluY29tcGF0aWJsZS5cbl0pO1xuIl19