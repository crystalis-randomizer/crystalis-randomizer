import { DefaultMap } from '../util.js';
export function shufflePalettes(rom, flags, random) {
    new Shuffle(rom, flags, random).shuffle();
}
class Shuffle {
    constructor(rom, flags, random) {
        this.rom = rom;
        this.flags = flags;
        this.random = random;
    }
    shuffle() {
        this.shuffleBackgrounds();
    }
    shuffleBackgrounds() {
        const partitions = new DefaultMap(() => []);
        for (const l of this.rom.locations) {
            if (!l.tilePalettes.some(x => x !== 0x9a))
                continue;
            partitions.get(l.colorGroup).push(l);
        }
        const pal = [new Map(), new Map()];
        for (const part of partitions.values()) {
            for (const l of part) {
                for (let i = 0; i < 2; i++) {
                    for (let j = 0; j < 2; j++) {
                        let set = pal[i].get(l.tilePatterns[j]);
                        if (!set)
                            pal[i].set(l.tilePatterns[j], set = new Set());
                        set.add(l.tilePalettes[i]);
                    }
                }
            }
        }
        for (const part of partitions.values()) {
            const l = part[0];
            const s = [new Set(), new Set()];
            for (let i = 0; i < 2; i++) {
                s[i] = new Set([...pal[i].get(l.tilePatterns[0]),
                    ...pal[i].get(l.tilePatterns[1]),]);
            }
            const p0 = this.random.pick([...s[0]]);
            const p1 = this.random.pick([...s[1]]);
            for (const loc of part) {
                loc.tilePalettes[0] = p0;
                loc.tilePalettes[1] = p1;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZXBhbGV0dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3Mvc2h1ZmZsZXBhbGV0dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHdEMsTUFBTSxVQUFVLGVBQWUsQ0FBQyxHQUFRLEVBQUUsS0FBYyxFQUFFLE1BQWM7SUFDdEUsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxPQUFPO0lBQ1gsWUFBcUIsR0FBUSxFQUNSLEtBQWMsRUFDZCxNQUFjO1FBRmQsUUFBRyxHQUFILEdBQUcsQ0FBSztRQUNSLFVBQUssR0FBTCxLQUFLLENBQVM7UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQUcsQ0FBQztJQUV2QyxPQUFPO1FBQ0wsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBc0IsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakUsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRTtZQUVsQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDO2dCQUFFLFNBQVM7WUFDcEQsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBdUIsRUFBRSxJQUFJLEdBQUcsRUFBdUIsQ0FBQyxDQUFDO1FBRzdFLEtBQUssTUFBTSxJQUFJLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ3RDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO2dCQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUUxQixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDeEMsSUFBSSxDQUFDLEdBQUc7NEJBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7d0JBQ3pELEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUM1QjtpQkFDRjthQUNGO1NBQ0Y7UUFHRCxLQUFLLE1BQU0sSUFBSSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUN0QyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBVSxFQUFFLElBQUksR0FBRyxFQUFVLENBQUMsQ0FBQztZQUNqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBRTtvQkFDakMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUUsRUFBRSxDQUFDLENBQUM7YUFDOUQ7WUFFRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDdEIsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3pCLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ZsYWdTZXR9IGZyb20gJy4uL2ZsYWdzZXQuanMnO1xuaW1wb3J0IHtSYW5kb219IGZyb20gJy4uL3JhbmRvbS5qcyc7XG5pbXBvcnQge1JvbX0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJy4uL3JvbS9sb2NhdGlvbi5qcyc7XG5pbXBvcnQge0RlZmF1bHRNYXB9IGZyb20gJy4uL3V0aWwuanMnO1xuXG4vLyBTaHVmZmxlIHRoZSBwYWxldHRlcy5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlUGFsZXR0ZXMocm9tOiBSb20sIGZsYWdzOiBGbGFnU2V0LCByYW5kb206IFJhbmRvbSkge1xuICBuZXcgU2h1ZmZsZShyb20sIGZsYWdzLCByYW5kb20pLnNodWZmbGUoKTtcbn1cblxuY2xhc3MgU2h1ZmZsZSB7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJvbTogUm9tLFxuICAgICAgICAgICAgICByZWFkb25seSBmbGFnczogRmxhZ1NldCxcbiAgICAgICAgICAgICAgcmVhZG9ubHkgcmFuZG9tOiBSYW5kb20pIHt9XG5cbiAgc2h1ZmZsZSgpIHtcbiAgICB0aGlzLnNodWZmbGVCYWNrZ3JvdW5kcygpO1xuICB9XG5cbiAgc2h1ZmZsZUJhY2tncm91bmRzKCkge1xuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBuZXcgRGVmYXVsdE1hcDx1bmtub3duLCBMb2NhdGlvbltdPigoKSA9PiBbXSk7XG4gICAgZm9yIChjb25zdCBsIG9mIHRoaXMucm9tLmxvY2F0aW9ucykge1xuICAgICAgLy8gU2tpcCBibGFja2VkLW91dCBsb2NhdGlvbnMuXG4gICAgICBpZiAoIWwudGlsZVBhbGV0dGVzLnNvbWUoeCA9PiB4ICE9PSAweDlhKSkgY29udGludWU7XG4gICAgICBwYXJ0aXRpb25zLmdldChsLmNvbG9yR3JvdXApLnB1c2gobCk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFsID0gW25ldyBNYXA8bnVtYmVyLCBTZXQ8bnVtYmVyPj4oKSwgbmV3IE1hcDxudW1iZXIsIFNldDxudW1iZXI+PigpXTtcblxuICAgIC8vIGZpbGwgYHBhbGAgd2l0aCBhbGwgcGFsZXR0ZXMsIGdyb3VwZWQgYnkgcGF0dGVybi5cbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgcGFydGl0aW9ucy52YWx1ZXMoKSkge1xuICAgICAgZm9yIChjb25zdCBsIG9mIHBhcnQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDI7IGorKykge1xuICAgICAgICAgICAgLy8gVE9ETyAtIGNoZWNrIHRoYXQgcGF0dGVybnMgYW5kIHBhbGV0dGVzIGFjdHVhbGx5IFVTRUQ/XG4gICAgICAgICAgICBsZXQgc2V0ID0gcGFsW2ldLmdldChsLnRpbGVQYXR0ZXJuc1tqXSk7XG4gICAgICAgICAgICBpZiAoIXNldCkgcGFsW2ldLnNldChsLnRpbGVQYXR0ZXJuc1tqXSwgc2V0ID0gbmV3IFNldCgpKTtcbiAgICAgICAgICAgIHNldC5hZGQobC50aWxlUGFsZXR0ZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlc2V0IHBhbGV0dGVzXG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRpdGlvbnMudmFsdWVzKCkpIHtcbiAgICAgIGNvbnN0IGwgPSBwYXJ0WzBdO1xuICAgICAgY29uc3QgcyA9IFtuZXcgU2V0PG51bWJlcj4oKSwgbmV3IFNldDxudW1iZXI+KCldO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgICAgc1tpXSA9IG5ldyBTZXQ8bnVtYmVyPihbLi4ucGFsW2ldLmdldChsLnRpbGVQYXR0ZXJuc1swXSkhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wYWxbaV0uZ2V0KGwudGlsZVBhdHRlcm5zWzFdKSEsXSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHAwID0gdGhpcy5yYW5kb20ucGljayhbLi4uc1swXV0pO1xuICAgICAgY29uc3QgcDEgPSB0aGlzLnJhbmRvbS5waWNrKFsuLi5zWzFdXSk7XG4gICAgICBmb3IgKGNvbnN0IGxvYyBvZiBwYXJ0KSB7XG4gICAgICAgIGxvYy50aWxlUGFsZXR0ZXNbMF0gPSBwMDtcbiAgICAgICAgbG9jLnRpbGVQYWxldHRlc1sxXSA9IHAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19