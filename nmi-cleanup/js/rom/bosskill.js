import { Entity } from './entity.js';
import { readLittleEndian, writeLittleEndian } from './util.js';
export class BossKill extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.base = readLittleEndian(rom.prg, this.pointer);
        this.data = rom.prg.slice(this.base + 0x14000, this.base + 0x14015);
        this.palettes = this.data.subarray(5, 13);
        this.patterns = this.data.subarray(13, 19);
    }
    get pointer() {
        return 0x1f96b + 2 * this.id;
    }
    get routine() {
        const addr = readLittleEndian(this.data, 0);
        return addr && (addr + 0x14000);
    }
    set routine(addr) {
        writeLittleEndian(this.data, 0, addr ? addr - 0x14000 : 0);
    }
    get restoreMusic() { return this.data[3]; }
    set restoreMusic(x) { this.data[3] = x; }
    get itemDrop() { return this.data[4]; }
    set itemDrop(x) { this.data[4] = x; }
    get restoreAnimation() { return this.data[19]; }
    set restoreAnimation(x) { this.data[19] = x; }
    get explode() { return !!this.data[20]; }
    set explode(x) { this.data[20] = x ? 1 : 0; }
    write() {
        if (!this.base)
            return [];
        const a = this.rom.assembler();
        a.segment('0f');
        a.org(this.base);
        a.byte(this.data[0], this.data[1]);
        a.org(this.base + 4);
        a.byte(this.data[4]);
        return [a.module()];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9zc2tpbGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcm9tL2Jvc3NraWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbkMsT0FBTyxFQUFDLGdCQUFnQixFQUFFLGlCQUFpQixFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRzlELE1BQU0sT0FBTyxRQUFTLFNBQVEsTUFBTTtJQVFsQyxZQUFZLEdBQVEsRUFBRSxFQUFVO1FBQzlCLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNELElBQUksT0FBTyxDQUFDLElBQVk7UUFDdEIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsSUFBSSxZQUFZLEtBQWEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxJQUFJLFlBQVksQ0FBQyxDQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWpELElBQUksUUFBUSxLQUFhLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBSSxRQUFRLENBQUMsQ0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU3QyxJQUFJLGdCQUFnQixLQUFhLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEQsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFTLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELElBQUksT0FBTyxLQUFjLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksT0FBTyxDQUFDLENBQVUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELEtBQUs7UUFRSCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUMxQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kdWxlfSBmcm9tICcuLi9hc20vbW9kdWxlLmpzJztcbmltcG9ydCB7Um9tfSBmcm9tICcuLi9yb20uanMnO1xuaW1wb3J0IHtFbnRpdHl9IGZyb20gJy4vZW50aXR5LmpzJztcbmltcG9ydCB7cmVhZExpdHRsZUVuZGlhbiwgd3JpdGVMaXR0bGVFbmRpYW59IGZyb20gJy4vdXRpbC5qcyc7XG5cbi8vIERhdGEgZm9yIHdoZW4gYSBib3NzIGlzIGtpbGxlZFxuZXhwb3J0IGNsYXNzIEJvc3NLaWxsIGV4dGVuZHMgRW50aXR5IHtcblxuICByZWFkb25seSBiYXNlOiBudW1iZXI7XG5cbiAgcmVhZG9ubHkgZGF0YTogVWludDhBcnJheTtcbiAgcmVhZG9ubHkgcGFsZXR0ZXM6IFVpbnQ4QXJyYXk7XG4gIHJlYWRvbmx5IHBhdHRlcm5zOiBVaW50OEFycmF5O1xuXG4gIGNvbnN0cnVjdG9yKHJvbTogUm9tLCBpZDogbnVtYmVyKSB7XG4gICAgc3VwZXIocm9tLCBpZCk7XG4gICAgdGhpcy5iYXNlID0gcmVhZExpdHRsZUVuZGlhbihyb20ucHJnLCB0aGlzLnBvaW50ZXIpO1xuICAgIHRoaXMuZGF0YSA9IHJvbS5wcmcuc2xpY2UodGhpcy5iYXNlICsgMHgxNDAwMCwgdGhpcy5iYXNlICsgMHgxNDAxNSk7XG4gICAgdGhpcy5wYWxldHRlcyA9IHRoaXMuZGF0YS5zdWJhcnJheSg1LCAxMyk7XG4gICAgdGhpcy5wYXR0ZXJucyA9IHRoaXMuZGF0YS5zdWJhcnJheSgxMywgMTkpO1xuICB9XG5cbiAgZ2V0IHBvaW50ZXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMHgxZjk2YiArIDIgKiB0aGlzLmlkO1xuICB9XG5cbiAgZ2V0IHJvdXRpbmUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBhZGRyID0gcmVhZExpdHRsZUVuZGlhbih0aGlzLmRhdGEsIDApO1xuICAgIHJldHVybiBhZGRyICYmIChhZGRyICsgMHgxNDAwMCk7XG4gIH1cbiAgc2V0IHJvdXRpbmUoYWRkcjogbnVtYmVyKSB7XG4gICAgd3JpdGVMaXR0bGVFbmRpYW4odGhpcy5kYXRhLCAwLCBhZGRyID8gYWRkciAtIDB4MTQwMDAgOiAwKTtcbiAgfVxuXG4gIGdldCByZXN0b3JlTXVzaWMoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YVszXTsgfVxuICBzZXQgcmVzdG9yZU11c2ljKHg6IG51bWJlcikgeyB0aGlzLmRhdGFbM10gPSB4OyB9XG5cbiAgZ2V0IGl0ZW1Ecm9wKCk6IG51bWJlciB7IHJldHVybiB0aGlzLmRhdGFbNF07IH1cbiAgc2V0IGl0ZW1Ecm9wKHg6IG51bWJlcikgeyB0aGlzLmRhdGFbNF0gPSB4OyB9XG5cbiAgZ2V0IHJlc3RvcmVBbmltYXRpb24oKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuZGF0YVsxOV07IH1cbiAgc2V0IHJlc3RvcmVBbmltYXRpb24oeDogbnVtYmVyKSB7IHRoaXMuZGF0YVsxOV0gPSB4OyB9XG5cbiAgZ2V0IGV4cGxvZGUoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuZGF0YVsyMF07IH1cbiAgc2V0IGV4cGxvZGUoeDogYm9vbGVhbikgeyB0aGlzLmRhdGFbMjBdID0geCA/IDEgOiAwOyB9XG5cbiAgd3JpdGUoKTogTW9kdWxlW10ge1xuICAgIC8vIE5PVEU6IHdlIGNvdWxkIGNvbXByZXNzIHRoaXMgdGFibGUgcXVpdGUgYSBiaXQgaWYgd2Ugd2FudGVkIHRvLFxuICAgIC8vIHRoZXJlJ3MgYSBsb3Qgb2YgemVyb3MgaW4gdGhlIHJlc3RvcmUgc2VjdGlvbnMuICBTb21ldGhpbmcgYXNcbiAgICAvLyBzaW1wbGUgYXMgYSBiaXRtYXNrIGJlZm9yZSBlYWNoIGNvdWxkIGhlbHAuXG4gICAgLy8gd3JpdGVyLnJvbS5zdWJhcnJheSh0aGlzLmJhc2UsIHRoaXMuYmFzZSArIDIxKS5zZXQodGhpcy5kYXRhKTtcblxuICAgIC8vIE5PVEU6IHdlJ3JlIG9ubHkgZ29pbmcgdG8gd3JpdGUgdGhlIGJpdHMgdGhhdCBhcmVuJ3Qgb3duZWQgYnlcbiAgICAvLyB0aGUgTG9jYXRpb24gb2JqZWN0LlxuICAgIGlmICghdGhpcy5iYXNlKSByZXR1cm4gW107XG4gICAgY29uc3QgYSA9IHRoaXMucm9tLmFzc2VtYmxlcigpO1xuICAgIGEuc2VnbWVudCgnMGYnKTtcbiAgICBhLm9yZyh0aGlzLmJhc2UpO1xuICAgIGEuYnl0ZSh0aGlzLmRhdGFbMF0sIHRoaXMuZGF0YVsxXSk7XG4gICAgYS5vcmcodGhpcy5iYXNlICsgNCk7XG4gICAgYS5ieXRlKHRoaXMuZGF0YVs0XSk7XG4gICAgcmV0dXJuIFthLm1vZHVsZSgpXTtcbiAgfVxufVxuIl19