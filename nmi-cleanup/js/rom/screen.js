import { Entity } from './entity.js';
import { tuple } from './util.js';
export class Screen extends Entity {
    constructor(rom, id) {
        super(rom, id);
        this.used = true;
        const base = (id > 0xff ? 0x40 + id : id) << 8;
        this.tiles = tuple(rom.prg, base, 0xf0);
    }
    clone(newId) {
        const clone = new Screen(this.rom, newId);
        clone.used = this.used;
        clone.tiles = [...this.tiles];
        return clone;
    }
    allTilesSet() {
        return new Set(this.tiles);
    }
    set2d(start, data) {
        const x0 = start & 0xf;
        const y0 = start >>> 4;
        for (let y = 0; y < data.length; y++) {
            const row = data[y];
            for (let x = 0; x < row.length; x++) {
                const tile = row[x];
                if (tile != null)
                    this.tiles[(y0 + y) << 4 | (x0 + x)] = tile;
            }
        }
    }
    get2d(start, size) {
        const x0 = start & 0xf;
        const y0 = start >>> 4;
        const xs = (size & 0xf) + 1;
        const y1 = y0 + (size >>> 4);
        const result = [];
        for (let y = y0; y <= y1; y++) {
            const i = y << 4 | x0;
            result.push(this.tiles.slice(i, i + xs));
        }
        return result;
    }
    assemble(a) {
        const id = this.id.toString(16).padStart(2, '0');
        let tiles = this.tiles;
        if (this.rom.compressedMapData || this.id < 0x100) {
            const seg = (this.id >> 5).toString(16).padStart(2, '0');
            a.segment(seg);
            if (seg === '0a')
                tiles = tiles.slice(0xc0);
        }
        else {
            a.segment('0a');
            tiles = tiles.slice(0, 0xc0);
        }
        a.org(0x8000 | (this.id & 0x3f) << 8, `Screen_${id}`);
        a.byte(...tiles);
    }
}
export class Screens extends Array {
    constructor(rom) {
        super(0x103);
        this.rom = rom;
        this.unallocated = [];
        for (let i = 0; i < 0x103; i++) {
            this[i] = new Screen(rom, i);
        }
    }
    getScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        return arr[i] || (arr[i] = new Screen(this.rom, id));
    }
    setScreen(id, screen) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        arr[i] = screen;
    }
    deleteScreen(id) {
        const arr = id < 0 ? this.unallocated : this;
        const i = id < 0 ? ~id : id;
        delete arr[i];
    }
    write() {
        const a = this.rom.assembler();
        for (const screen of this) {
            if (screen === null || screen === void 0 ? void 0 : screen.used)
                screen.assemble(a);
        }
        return [a.module()];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyZWVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9zY3JlZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRWhDLE1BQU0sT0FBTyxNQUFPLFNBQVEsTUFBTTtJQWdCaEMsWUFBWSxHQUFRLEVBQUUsRUFBVTtRQUM5QixLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFhO1FBRWpCLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDMUMsS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU5QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFVRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUdELEtBQUssQ0FBQyxLQUFhLEVBQ2IsSUFBNkQ7UUFDakUsTUFBTSxFQUFFLEdBQUcsS0FBSyxHQUFHLEdBQUcs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QyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3QyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMvQixLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksRUFBRTtZQUN6QixJQUFJLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxJQUFJO2dCQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEM7UUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBc3NlbWJsZXJ9IGZyb20gJy4uL2FzbS9hc3NlbWJsZXIuanMnO1xuaW1wb3J0IHtNb2R1bGV9IGZyb20gJy4uL2FzbS9tb2R1bGUuanMnO1xuaW1wb3J0IHtSb219IGZyb20gJy4uL3JvbS5qcyc7XG5pbXBvcnQge0VudGl0eX0gZnJvbSAnLi9lbnRpdHkuanMnO1xuaW1wb3J0IHt0dXBsZX0gZnJvbSAnLi91dGlsLmpzJztcblxuZXhwb3J0IGNsYXNzIFNjcmVlbiBleHRlbmRzIEVudGl0eSB7XG5cbiAgLy8gV2hhdCBkbyB3ZSBuZWVkIHRvIHRyYWNrP1xuICAvLyAgLSB2YW5pbGxhIElEICgwLi4kMTAyKVxuICAvLyAgLSByZWxvY2F0ZWQgSUQgKDAuLiQyMDFmKVxuICAvLyAgLSB0aWxlc2V0cyBpdCdzIGEgcGFydCBvZlxuICAvLyAgICAtIGZsYWcgaW5mbyAoc2VwYXJhdGUgZnJvbSBicmlkZ2Uvd2FsbCk/XG4gIC8vICAgIC0gYnJpZGdlL3dhbGwvZG9vciBpbmZvXG4gIC8vICAgIC0gc3RhaXJzXG4gIC8vICAgIC0gZWRnZSBhbmQgcGF0aCBpbmZvXG4gIC8vICAgIC0gcmVxdWlyZWQvYWxsb3dlZCBuZWlnaGJvcnM/XG4gIC8vICAgIC0gdXBncmFkZSBwYXRocz9cbiAgLy8gYmFzZTogbnVtYmVyO1xuICB0aWxlczogbnVtYmVyW107IC8vIGFsd2F5cyAxNXgxNlxuICB1c2VkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHJvbTogUm9tLCBpZDogbnVtYmVyKSB7XG4gICAgc3VwZXIocm9tLCBpZCk7XG4gICAgdGhpcy51c2VkID0gdHJ1ZTsgLy8gVE9ETyAtIHRyYWNrIHVudXNlZCB0aWxlcz9cbiAgICBjb25zdCBiYXNlID0gKGlkID4gMHhmZiA/IDB4NDAgKyBpZCA6IGlkKSA8PCA4O1xuICAgIC8vIG1ldGF0aWxlIGluZGV4XG4gICAgdGhpcy50aWxlcyA9IHR1cGxlKHJvbS5wcmcsIGJhc2UsIDB4ZjApO1xuICB9XG5cbiAgY2xvbmUobmV3SWQ6IG51bWJlcik6IFNjcmVlbiB7XG4gICAgLy8gVE9ETyAtIHVwZGF0ZSB0aGUgc2V0IG9mIHNjcmVlbnMsIHRvbz9cbiAgICBjb25zdCBjbG9uZSA9IG5ldyBTY3JlZW4odGhpcy5yb20sIG5ld0lkKTtcbiAgICBjbG9uZS51c2VkID0gdGhpcy51c2VkO1xuICAgIGNsb25lLnRpbGVzID0gWy4uLnRoaXMudGlsZXNdO1xuICAgIC8vIGNsb25lLmJhc2UgPSB0aGlzLmJhc2U7XG4gICAgcmV0dXJuIGNsb25lO1xuICB9XG5cbiAgLy8gdGlsZSh5OiBudW1iZXIsIHg6IG51bWJlcik6IG51bWJlciB7XG4gIC8vICAgcmV0dXJuIHRoaXMudGlsZXNbeSA8PCA0IHwgeF07XG4gIC8vIH1cblxuICAvLyBtZXRhdGlsZSh5LCB4KTogTWV0YXRpbGUge1xuICAvLyAgIHJldHVybiB0aGlzLnJvbS5tZXRhdGlsZXNbdGhpcy50aWxlc1t5XVt4XV07XG4gIC8vIH1cblxuICBhbGxUaWxlc1NldCgpOiBTZXQ8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy50aWxlcyk7XG4gIH1cblxuICAvKiogV3JpdGUgYSAyZCBibG9jayBpbnRvIHRoZSB0aWxlIGFycmF5LiAqL1xuICBzZXQyZChzdGFydDogbnVtYmVyLFxuICAgICAgICBkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5QXJyYXk8bnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZD4+KSB7XG4gICAgY29uc3QgeDAgPSBzdGFydCAmIDB4ZjtcbiAgICBjb25zdCB5MCA9IHN0YXJ0ID4+PiA0O1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgZGF0YS5sZW5ndGg7IHkrKykge1xuICAgICAgY29uc3Qgcm93ID0gZGF0YVt5XTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgcm93Lmxlbmd0aDsgeCsrKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSByb3dbeF07XG4gICAgICAgIGlmICh0aWxlICE9IG51bGwpIHRoaXMudGlsZXNbKHkwICsgeSkgPDwgNCB8ICh4MCArIHgpXSA9IHRpbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIDJkIGJsb2NrIGZyb20gdGhlIHRpbGUgYXJyYXkuICBBIHNpemUgb2YgMHgwMCB3aWxsXG4gICAqIHJlc3VsdCBpbiBvbmUgcm93IGFuZCBvbmUgY29sdW1uLlxuICAgKi9cbiAgZ2V0MmQoc3RhcnQ6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyW11bXSB7XG4gICAgY29uc3QgeDAgPSBzdGFydCAmIDB4ZjtcbiAgICBjb25zdCB5MCA9IHN0YXJ0ID4+PiA0O1xuICAgIGNvbnN0IHhzID0gKHNpemUgJiAweGYpICsgMTtcbiAgICBjb25zdCB5MSA9IHkwICsgKHNpemUgPj4+IDQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IHkgPSB5MDsgeSA8PSB5MTsgeSsrKSB7XG4gICAgICBjb25zdCBpID0geSA8PCA0IHwgeDA7XG4gICAgICByZXN1bHQucHVzaCh0aGlzLnRpbGVzLnNsaWNlKGksIGkgKyB4cykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXNzZW1ibGUoYTogQXNzZW1ibGVyKSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmlkLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIGxldCB0aWxlcyA9IHRoaXMudGlsZXM7XG4gICAgaWYgKHRoaXMucm9tLmNvbXByZXNzZWRNYXBEYXRhIHx8IHRoaXMuaWQgPCAweDEwMCkge1xuICAgICAgY29uc3Qgc2VnID0gKHRoaXMuaWQgPj4gNSkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICBhLnNlZ21lbnQoc2VnKTtcbiAgICAgIGlmIChzZWcgPT09ICcwYScpIHRpbGVzID0gdGlsZXMuc2xpY2UoMHhjMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEuc2VnbWVudCgnMGEnKTtcbiAgICAgIHRpbGVzID0gdGlsZXMuc2xpY2UoMCwgMHhjMCk7XG4gICAgfVxuICAgIGEub3JnKDB4ODAwMCB8ICh0aGlzLmlkICYgMHgzZikgPDwgOCwgYFNjcmVlbl8ke2lkfWApO1xuICAgIGEuYnl0ZSguLi50aWxlcyk7XG4gIH1cblxuLy8gICB3cml0ZSh3cml0ZXI6IFdyaXRlcik6IHZvaWQge1xuLy8gICAgIGxldCBiYXNlID0gdGhpcy5pZCA8PCA4O1xuLy8gICAgIGlmICh0aGlzLmlkID4gMHhmZikge1xuLy8gICAgICAgaWYgKCF0aGlzLnJvbS5jb21wcmVzc2VkTWFwRGF0YSkge1xuLy8gICAgICAgICBiYXNlICs9IDB4NDAwMDtcbi8vICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGJhc2UgPSAodGhpcy5pZCAmIDB4ZmYwMCkgPDwgNSB8ICh0aGlzLmlkICYgMHhmZikgPDwgODtcbi8vICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgLy8gdGhpcy5pZCA8PCA4IDogKHRoaXMuaWQgPiAweGZmID8gMHg0MCArIHRoaXMuaWQgOiB0aGlzLmlkKSA8PCA4O1xuLy8gICAgIGlmICgoYmFzZSAmIDB4ZmUwMDApICE9PSAweDE0MDAwKSB7XG4vLyAgICAgICB3cml0ZXIucm9tLnN1YmFycmF5KGJhc2UsIGJhc2UgKyAweGYwKS5zZXQodGhpcy50aWxlcyk7XG4vLyA+Pj4+Pj4+IGFkZCBOT19ERVBMT1kgZmlsZVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICBhLnNlZ21lbnQoJzBhJyk7IC8vIDE0MDAwXG4vLyAgICAgICBhLm9yZygweDgwMDAgfCAodGhpcy5pZCAmIDB4MykgPDwgOClcbi8vICAgICAgIC8vIHdlIHJldXNlIHRoZSBsYXN0IDIgcm93cyBvZiBleHRlbmRlZCBzY3JlZW5zIChjb3ZlcmVkIGJ5IEhVRCkgZm9yXG4vLyA8PDw8PDw8IEhFQURcblxuXG5cbi8vICAgc2V0VGlsZXMoc3RhcnQ6IG51bWJlciwgdGlsZXM6IEFycmF5PEFycmF5PG51bWJlcnxudWxsPj4pIHtcbi8vICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0aWxlcykge1xuLy8gICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3cubGVuZ3RoOyBpKyspIHtcbi8vICAgICAgICAgY29uc3QgdGlsZSA9IHJvd1tpXTtcbi8vICAgICAgICAgaWYgKHRpbGUgIT0gbnVsbCkgdGhpcy50aWxlc1tzdGFydCArIGldID0gdGlsZTtcbi8vICAgICAgIH1cbi8vICAgICAgIHN0YXJ0ICs9IDE2O1xuLy8gfHx8fHx8fCBjb25zdHJ1Y3RlZCBtZXJnZSBiYXNlXG4vLyAgICAgICAvLyBnbG9iYWwgZmxhZ3MgaW4gdGhlIHJvbS5cbi8vICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMHhjMDsgaSsrKSB7XG4vLyAgICAgICAgIHdyaXRlci5yb21bdGhpcy5iYXNlICsgaV0gPSB0aGlzLnRpbGVzW2ldO1xuLy8gICAgICAgfVxuLy8gPT09PT09PVxuLy8gICAgICAgLy8gZ2xvYmFsIGZsYWdzIGluIHRoZSByb20uICAtLSBvbmx5IGZvciBwYWdlIDEwLi4uIT9cblxuLy8gICAgICAgLy8gVE9ETyAtIG9ubHkgZG8gdGhpcyBmb3IgcGFnZSAxMFxuXG4vLyAgICAgICB3cml0ZXIucm9tLnN1YmFycmF5KGJhc2UsIGJhc2UgKyAweGMwKS5zZXQodGhpcy50aWxlcy5zbGljZSgwLCAweGMwKSk7XG4vLyA+Pj4+Pj4+IGFkZCBOT19ERVBMT1kgZmlsZVxuLy8gICAgIH1cbi8vICAgfVxuXG4gIC8vIFRPRE8gLSBhY2Nlc3NvcnMgZm9yIHdoaWNoIHBhbGV0dGVzLCB0aWxlc2V0cywgYW5kIHBhdHRlcm5zIGFyZSB1c2VkL2FsbG93ZWRcbn1cblxuLy8gTWV0YXRpbGUgZG9lc24ndCBtZWFuIG11Y2ggd2l0aG91dCB0aWxlc2V0LCBwYXR0ZXJucywgZXRjLlxuLy8gbWF5IG5lZWQgdG8gcmV0aGluayB0aGlzIG9uZSwgbWFrZSBpdCBhIHRyYW5zaWVudCBvYmplY3QgdGhhdCBkZXBzIG9uIG90aGVycy5cbi8vIGNsYXNzIE1ldGF0aWxlIHtcbi8vICAgY29uc3RydWN0b3Iocm9tLCBpZCkge1xuLy8gICAgIHRoaXMucm9tID0gcm9tO1xuLy8gICAgIHRoaXMuaWQgPSBpZDtcbi8vICAgfVxuLy8gfVxuXG5leHBvcnQgY2xhc3MgU2NyZWVucyBleHRlbmRzIEFycmF5PFNjcmVlbj4ge1xuICByZWFkb25seSB1bmFsbG9jYXRlZDogQXJyYXk8U2NyZWVuPiA9IFtdO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSByb206IFJvbSkge1xuICAgIHN1cGVyKDB4MTAzKTtcbiAgICAvLyBUT0RPIC0gaWYgbWFwcyBhbHJlYWR5IGNvbXBhY3RlZCwgcmVhZCB0aGF0IGluc3RlYWQ/XG4gICAgLy8gIC0gbmVlZCBsb2NhdGlvbnMgdG8ga25vdyB3aGVyZSB0byBsb29rIVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMHgxMDM7IGkrKykge1xuICAgICAgdGhpc1tpXSA9IG5ldyBTY3JlZW4ocm9tLCBpKTtcbiAgICB9XG4gIH1cblxuICAvLyBtb3ZlU2NyZWVuKG9sZElkOiBudW1iZXIsIG5ld0lkOiBudW1iZXIpOiBTY3JlZW4ge1xuICAvLyAgIC8vIEVudGl0eS5pZCBpcyBjb25zdCwgYnV0IG1heWJlIHNob3VsZG4ndCBiZT9cbiAgLy8gfVxuXG4gIGdldFNjcmVlbihpZDogbnVtYmVyKTogU2NyZWVuIHtcbiAgICBjb25zdCBhcnIgPSBpZCA8IDAgPyB0aGlzLnVuYWxsb2NhdGVkIDogdGhpcztcbiAgICBjb25zdCBpID0gaWQgPCAwID8gfmlkIDogaWQ7XG4gICAgcmV0dXJuIGFycltpXSB8fCAoYXJyW2ldID0gbmV3IFNjcmVlbih0aGlzLnJvbSwgaWQpKTtcbiAgfVxuXG4gIHNldFNjcmVlbihpZDogbnVtYmVyLCBzY3JlZW46IFNjcmVlbikge1xuICAgIGNvbnN0IGFyciA9IGlkIDwgMCA/IHRoaXMudW5hbGxvY2F0ZWQgOiB0aGlzO1xuICAgIGNvbnN0IGkgPSBpZCA8IDAgPyB+aWQgOiBpZDtcbiAgICBhcnJbaV0gPSBzY3JlZW47XG4gIH1cblxuICBkZWxldGVTY3JlZW4oaWQ6IG51bWJlcikge1xuICAgIGNvbnN0IGFyciA9IGlkIDwgMCA/IHRoaXMudW5hbGxvY2F0ZWQgOiB0aGlzO1xuICAgIGNvbnN0IGkgPSBpZCA8IDAgPyB+aWQgOiBpZDtcbiAgICBkZWxldGUgYXJyW2ldO1xuICB9XG5cbiAgd3JpdGUoKTogTW9kdWxlW10ge1xuICAgIGNvbnN0IGEgPSB0aGlzLnJvbS5hc3NlbWJsZXIoKTtcbiAgICBmb3IgKGNvbnN0IHNjcmVlbiBvZiB0aGlzKSB7XG4gICAgICBpZiAoc2NyZWVuPy51c2VkKSBzY3JlZW4uYXNzZW1ibGUoYSk7XG4gICAgfVxuICAgIHJldHVybiBbYS5tb2R1bGUoKV07XG4gIH1cbn1cbiJdfQ==