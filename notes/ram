$00
---
Current value of PPUCTRL, ignoring NMI and increment.
  - mainly this is nametable selection and sprite pattern table, I think

???

Written in NMI routine, $3eb8d
 - also written by $3c8b9, $3c8bf, $3ec63, $3ec69 [all in scanlines]
Tends to be $88, $89, $8a, $8b, sometimes $80

Read all over the place

NMI write just clears the '4' bit and may set the 1 and/or 2 bits.
     $3eb7d: ad db 07 LDA $07db    ; e.g. 1
     $3eb80: 2a       ROL          ; e.g. 2 (could be 3, if C set)
     $3eb81: 29 03    AND #$03     ; 0-3
     $3eb83: 85 52    STA $52      ; store in $52, to be read soon
     $3eb85: a5 00    LDA $00
     $3eb87: 29 fc    AND #$fc     ; clear 4
     $3eb89: 05 52    ORA $52      ; set 1 or 2
     $3eb8b: 85 00    STA $00

$07db was set just a bit earlier (but old value held in X and restored later)
     $3f71e: a9 00    LDA #$00
     $3f720: ac da 07 LDY $07da
     $3f723: c0 e8    CPY #$e8     ; sets C if ($7da) >= $e8
     $3f725: 69 00    ADC #$00
     $3f727: 8d db 07 STA $07db
     $3f72a: 20 6d eb JSR $3eb6d
$07da was set from $4 in ($09 == 0) branch of NMI
 - read from $3f723, 3eb76, and 3f6f1 - all in NMI
 - seems to be y-coordinate of the screen, maybe lower bit?

$01
---
Current value of PPUMASK.


$02 .. $05
----------
Screen coordinates.
 - $02 is LSB of x-coordinate
 - $03 is MSB of x-coordinate
 - $04 is LSB of y-coordinate
 - $05 is MSB of y-coordinate

As character moves down and right, the numbers increase.  Wraparound
occurs (e.g. left-hand side of Leaf has $ff at $03).

This is copied to $7d8..$7db after OAMDMA in NMI, provided $9 is zero
and $51 is neither 7 nor 9.


???
 - copied to $7d8..7db after OAMDMA, unless $51 is 7 or 9
   (in which case $83, $a3, $c3, and $e3 are copied there instead)


$06
---
If nonzero, then NMI handler exits after only writing $07 <- #$01.
No other work is done.
 - set to 1 at 3f4cf
 -        0 at 3f4d4
Seems to toggle basically every frame


$08
---
Global counter
 - updated in $3cac3, during vblank
 - interestingly, it gets there from $3c904, where it loads x = #$1 from $40,
   index into jump table at $c91f
    - this is the first thing out of the $3c902 holding pattern...?
 


$09
---
Controls whether OAM DMA will happen at start of NMI routine
 - OAM DMA only if $09 is zero (checked in $3f3cc)
     $3f3cc: a5 09    LDA $09     
     $3f3ce: d0 3a    BNE $3f40a  ; skip OAM DMA directly following

Incremented at the end of the normal DMI routine
     $3f41a: e6 09    INC $09     
     $3f41c: 68       PLA         ; restore registers and return
     $3f41d: aa       TAX         
     $3f41e: 68       PLA
     $3f41f: a8       TAY         
     $3f420: 68       PLA
     $3f421: 40       RTI

Reset to zero during scanlines
 - Seems to always trigger an IRQ a few cycles later
     $3c919: a9 00    LDA #$00    
     $3c91b: 85 09    STA $09     
     $3c91d: f0 e1    BEQ $3c900
     $3f443: 48       PHA         ; IRQ handler
 - After the IRQ we end up at $3c900 since the BEQ was basically unconditional
     $3c900: a5 09    LDA $09
     $3c902: f0 fc    BEQ $3c900  ; Wait for NMI
 - After NMI we end up with smome follow-up
     $3c904: a5 40    LDA $40     ; Seems to be index of a follow-up routine? (1)
     $3c906: 0a       ASL
     $3c907: aa       TAX
     $3c908: a9 4c    LDA #$4c    ; ($10) <- [JMP Absolute]
     $3c90a: 85 10    STA $10
     $3c90c: bd 1f c9 LDA $c91f,x ; $3c91f is jump table
     $3c90f: 85 11    STA $11
     $3c911: bd 20 c9 LDA $c920,x
     $3c914: 85 12    STA $12
     $3c916: 20 10 00 JSR $0010

In-scanline reset stops happening when a dialog box is appearing.
In this case, it eventually gets reset in NMI 6 frames later, after
storing $ff into [$6200,$621f]
     $28515: a2 1f    LDX #$1f    
     $28517: a9 ff    LDA #$ff    
     $28519: 9d 00 62 STA $6200,x
     $2851c: ca       DEX         
     $2851d: 10 fa    BPL $28519
     $2851f: 60       RTS
     $3d364: 20 69 c1 JSR $3c169
     $3c169: a9 00    LDA #$00
     $3c16b: 85 09    STA $09
     $3c16d: a5 09    LDA $09
     $3c16f: f0 fc    BEQ $3c16d   ; wait for an IRQ
     $3f443: 48       PHA          ; IRQ handler
     ; ends up polling until NMI
     $3c171: a9 00    LDA #$00    
     $3c173: 85 09    STA $09     
     $3c175: 60       RTS
     ; returns to...
     $3d367: a9 01    LDA #$01
     ; This is confusing because the call was in the middle of NMI...?


$0a, $0b
----------
These seem to be counters, incremented by 4 every couple frames or so,
and rolling over at $1f (cycle thru 8 possible values).

-- not equal indicates data that needs to be written to PPUDATA
   -> offsets into $6200,x

$0a is incremented in $3c6e0 (NMI) - what determines???

$0b is incremented in $34dcc and $28855 (scanlines), again once every few
frames.  These are mostly identical, but differ based on what they do to
memory locations $6200..3: the $34 version initializes them to statics,
while the $28 version copies from RAM $21,20,24,25.


$0c..$0d
--------
Temporary variables for NMI
 - stats tracker frees $0d but uses it for something else


$10..$13
--------
Temporary space for addresses and instructions


$23..$25
--------
Looks like temp vars


$26
---
Direction facing: 0 = up, 2 = right, 4 = down, 6 = left (plus diags)
But also looks temporary?
 - written at $35e91 to direction
 - written at $3edaf to 


$28..$2b
--------
Seem to be temporaries - sometimes hold new screen coordinates.


$30, $31
--------
More temps, seem to be written in pairs:
 - $3e9af, $3e9d8, $36239, $35cf5, $35d43 ...?


$32, $33
--------
Unused?
 - Repurpose $32 for global step counter of all objects (low byte).  This is a
   decent proxy for random numbers in code segments where the normal table isn't
   available.


$34..$37
--------
Seems to store coordinates for an object - $35897 transfers from
these to $[79bd]0,x and $358a8 goes the other way.
 - these are temp variables
 $3e0a transfers 


$38, $39
--------
Unused?
 - Repurpose for cross-page call jump-addr?


$3c..$3f
--------
Coordinates of the current screen map within the location (top-left screen corner).
 - not clear how this differs from $2..$5, though it does by a little.
   it looks like x is 1 pixel less and y is 8 pixels less, so for
   $[2345] = (01, 02, 71, 02) we have $3[cdef] = (00, 02, 69, 02)
   (note: xl, xh, yl, yh)


$40
---
Primary game mode
 01 = playing the game
 03 = title sequence, through entering name
Indexes jump table $3c91f in main game loop $3c900



$41
---
Secondary game mode
 08 = normal movement, usually (sometimes 07, 09, others)
 menu gets 12, etc
Indexes jump table $3cade in 3c91f_01



$42
---
Appears to be unused - repurpose for quick change?
 1 = quick select occurred
 10 = start released this frame
 20 = select released this frame


$43, $44
--------
Buttons pressed (mask):
 1 = right,  2 = left,    4 = down, 8 = up
 10 = start, 20 = select, 40 = b,   80 = a

$43 = controller 1, $44 = controller 2


$45, $46
--------
dpad repeat timer (goes from $c->0->3->0) for each controller

 TODO - consider piggybacking on this for "newly released" keys?
      - then switch menus to be on release so that start+button
        could be used to switch selected sword and/or magic,
        then only show menu on release if no fast-switch

 could also use ctrl2 dpad for this, but it may be harder to manage?

In normal mode (not menus):
;;;   $43: Current state (A=80, B=40, Sel=20, St=10, Up=8, Dn=4, Lf=2, Rt=1)
;;;   $45: Number of frames 'A' has been pressed, up to $1f, after which
;;;   $47: Number of frames 'B' has been pressed, 
;;;   $49: Current direction pressed (0=up, 2=right, etc)
;;;   $4b: Bitmask of newly-pressed buttons
;;;   $4d: Same as $4b, but with 'A' (80) repeating every frame after the 31st,
;;;        and 'B' (40) repeating every 32nd frame it's held.
;;; Outputs for controller 2 are one later ($44, $46, ..., $4c)

$4b, $4c
--------
Bitmask of newly-pressed buttons this frame (cf $43 for mapping).


$50
---
Shadow variable for $8000 during rendering


$51
---
Seems to have something to do with screen mode
 - it's 0 in normal mode
 - select-menu => 6 ($86 while transitioning pages, incl save page)
   0 -> 80 -> 0 -> 6 during first vblank, then 6 -> 86 during first scanline,
   then 86 -> 6 during next vblank; repeat last bit for transitions
 - start-menu => 2 ($80 during initial draw)
   0 -> 80 during vblank, then 80 -> 2 during scanline
 - dialog, shop => 1
 - intro movie => 3

 - what are modes 7 and 9 ????? - gets special handling in NMI handler
   by copying object $13 position into $7d[89ab] rather than from $[2345].
   could look at the jump table routines - $3f6d6 and $3f731, I guess
   - these are the same as 0 and 1...? but with different camera?
MODE 7:
 - $36416 writes 7, reached via jump table $36314[$3f] at end of $3ccd1
   (specifically $3cd28).
 - this happens at frame 78701 (keyframe 7/26) in full.mov upon fighting
   the giant insect. 0 also Draygon 2
 - $1e885 also writes 7 - this looks oddly similar to the other, it's
   from a jump table $1e425[9] from $1e400 from $1e675, which ultimately
   came from this same jump table at $36314[$62].
   also $1e87e involved here...
 - we also get a 9 during this fight...
   written by $3d371 via $3d354 called frames earlier from $3d0bf
   - this appears to be when a message is written to the screen
     (e.g. "your magic power is too low" / "magic power replenished")

 - This seems to specifically be a jump table pointer, which is called from some of the IRQ callbacks,

$52..$53
--------
Look like temporary vars for NMI handler.

$54..$56
--------
IRQ Callback
  $54$55 is the address of the jump table entry
  $56 is the index of the current callback

$58..$5d
--------
In IRQ callback mode 7, these are written to the CHR rom banks, rather than $7f0..$7f5


$60
---
**stats tracker frees this (uses $06 instead)**

If non-zero, exit NMI handler immediately.
 - happens during screen scrolls and transitions
 - set to 1 at 3c73b, 0 at 3c75b

TODO - why would we do DisableNMI and EnableNMI if we have this?


$61..$65
--------
Unused (co-opted for a handful of things in randomizer)


$66..$6b
--------
$66$67: Address of tileset quadrants tables
$68$69: Address of tileeffects table
$6a$6b: Address of flagged tile alternatives table

These are three addresses pertaining to the current map.
 - $3e6d0 writes all three of them from the middle bytes of the graphics table
   - does it use them all right away? are they temporary?
But they're also written elsewhere:
 - $35a87 writes $68 every frame - from $0ff78
   - different values 80, 10, f7, 55, 1c, 26, ... - sometimes seems to depend on movement
   - read back at $35a99 (16-bit)
     - conditionally also at $35ab5 and $6a read at $35aaf ????
 - $3edc8/$3edd7 writes $67 many times on each screen change/scroll
   - seem to add 0, 1, 2, or 3 to whatever was written before.
   - read back a number of places...

($66) points to one of 12 1k blocks of tile ID to pattern number mappings.
  $66 is always zero, $67 is (at rest) a multiple of 4, though it is
  temporarily incremented by 1, 2, or 3 to point to the different components
  of the metatile.  The addresses are into the 16K ROM page at $14000..$16fff
($68) looks like some metatile attribute, indexed by metatile ID
($6a) points to an address related to ($66) 
      // but in $17e00..$17fff - one of 12 32-byte blocks. -- WRONG?
      related to flag alternatives for ($68)'s usage.


$68 written in 35a87 from the contents of a table at ($10) (e.g. 02c64)
 - $11 from 35a5c => read $6300,y (y=9), & #$1f | #$a0 [i.e. move to right bank]
     y from ($37 << 3) | $35   -> are these object coords? (hi-y << 3 | hi-x)
      - object was 0, per $35ec2
 - swap into page ($6300,y >> 5)
 - $10 gets low bits of coordinates, packed ($36 & #$f0) | ($34 >> 4)
   -->  $68 <- ($10)
   -->  $20 <- ($68)
   if not :08 then pull $62f0,(xhi) and $35ae0,(yhi) and AND them together
 windmill cave - first reads ($68),y = 4 [y=1], but then after updating
 $68 from 4 to a, we get $1330a = 0 instead of $13304 = $e
  - 6300,x was written at $3e665 from the screen data
 This seems to have to do with conditions, like whether or not to put an
  exit into sealed cave on valley of wind b4/after widmill
  But there's more to it, since most pages have this.

($68),y has the following values:
  00 - normal tile, open door
  02 - water cave door, water in portoa
  06 - impassible
  0e - door to sabera fortress (doesn't open permanently), near rock wall
  10 - walking space under bridge, trees that can be walked behind, behind waterfall
  16 - wall under bridge, waterfall
  18 - near rock wall
  20 - snow drift
  40 - bushes  
  42 - water
  46 - water in portoa
  4a - ice bridge
  c0 - marsh

Bits (hypothesis):
  01: pit
  02: impassible on foot
  04: impassible on dolphin or flying
  08: changes with flag ???
  10: in front (sprite priority)
  20: push down
  40: slow
  80: inflicts pain


$6c
---
Current map
 - written at $3eb5d
 - start = 0, outside cave = 1, leaf = 2, valley = 3, cave to bryn = 4
   zebu = $10, cave to windmill = $e, windmill = $f
 - shops and houses:
   leaf elder = $c0, rabbit = c1, inn = c2,
        tools = c3, armor = c4, student = c5

Looks like this is co-written with $6d, both from data table
  $145a9 (), which came from $14300[$6c << 1]  {see $3c7af}
  this seems to have happened on the previous frame
  start indexing the table with Y pulled off stack (when exiting leaf
    north, A = 3 is on stack, so Y = A << 1 = 6)  {see $3c7c8}
    (who pushed it in the first place??)
      - seems to have been pushed at $3c7a5 from a hard-coded
        #$03 loaded before calling the sub at $3eb2d


$6d
---
Set with map via exit - not sure what it's used for
 - seems to be read in a few places
 - might be "flavor" of map?  cave vs overworld vs town?
   - doesn't seem likely

02cd65:32: Read $006d: $02 at $3e408
02cd75:16: Read $006d: $02 at $3e68d
02cd75:16: Read $006d: $02 at $3e6a0
02cd75:16: Read $006d: $02 at $3e6a8
02cd91:1d: Read $006d: $02 at $3ca55


$6e..$6f
--------
Currently selected PRG banks.  This serves two purposes: (1) so that
code can temporarily change them (i.e. `lda $6e; pha; lda #$1a; jsr
SwitchBanks; <do stuff>; pla; jsr SwitchBanks`), and (2) so that
interrupt handlers can restore pages correctly before returning
(this insures against an interrupt in the middle of a bank switch
operation by writing the target page *before* making the switch.


$70..$ef
--------
(x, y) coordinates for various objects, in four separate
rows of $1f coordinates.

  $70..$8f x-coordinate low byte
  $90..$af x-coordinate high byte
  $b0..$cf y-coordinate low byte
  $d0..$ef y-coordinate high byte

 - $70 and $71 both look like the player, ($71,$b1) is rabbit boot position,
   while ($70,$b0) is actual ground/shadow position
 - $72 is the sword, it is not updated until the player actually attacks
   then the X and Y positions are updated and there are two positions:
   one that leads $73 by 10 while it's out, then once it's back, it
   leads by 12 (weird - seems like wrong direction)
 - $73 seems to lead the player by 4 - could be where the sword would hit?
 - advancing a single frame moves the player coordinate by 2.
 - tiger moves by 1 every 2 frames

 - sword projectiles spawn in slot $74 (4-6 or 4-a for thunder
   4-b for blizzard fire 2, and flame, 4-7 for tornado)

These also correspond to enemy data that gets loaded into
($310..$31f) + $20 * n for n = 0..$18 or so (possibly higher?)
 e.g. $031x is the sprite (loaded from initial data but updated w/ direction, too)
      $035x is speed, ...

($2c, $2e) stores the tile-coords of the 'x' NPC
 - read from y=$9 and y=$b positions of data table at $19567 ($9567)
   which was written by $3e153 by looking up data table $19201



$8a, $aa, $ca, $ea
------------------
x, y coordinates for an enemy

(x low, h high, y low, y high)
 - seems to be whole row?


$f0..$17f
---------
Music registers.  Unclear where they start; one might be the current
song number that's playing.
 - 102 seems to be the current bgm track, but changing it doesn't have the
   desired effect - $3c139 checks if it's changed before writing it, so
   presumably that's why it's stored, but the jump table for updating
   the APU is elsewhere.
 - 110 is the current playing (or last played) sound effect
 - 112 is ff if no sound effect is playing, or something else (possibly
   an indication of when the sound effect will be done) if one is
 - 111 is sound effect priority???

There are 6 channels (one does double duty for bgm and sfx), typically
indexed by X, as follows:
  X=0 => BGM Pulse 1 ?
  X=1 => BGM Pulse 2 ?
  X=2 => BGM Triangle ?
  X=3 => BGM Noise ?
  X=4 => SFX Pulse 2
  X=5 => SFX Noise
What about DMC?

$f0
---
If :01 bit is set, ResumeAudio bails out
If :20 is set, ResumeAudio skips playing BGM??

$f1
---
Cursor past $f5$f6 in current track (essentially shadows Y in ($f5),y),
used to update $11a,x;$120,x after commands done

$f2
---
Zero indicates there's more audio commands to run in current channel

$f3
---
Current opcode being handled, among other things?

$f7
---
Pitch shift? (always zero)

$fa
---
Temp space for storing current channel index

$fb
---
Seems to have 0 bits for the channels that are playing?

$fc
---
:08 bit nonzero causes clearing $15c,x:0f, $162,x:07, and $114,x:01
:01 bit indicates volume updated - 4000,y must be written
Other bits seem to indicate APU registers that need updated

$fd
---
If >#$14, ResumeAudio skips playing SFX ??

$fe
---
Seems to only be zero at the start of a BGM track?
 - set in 30105, elsewhere assigned to #$bc
 - dec'd in 302fb?
Nonzero skips volume setting??

Read in RunAudioCommandsForChannel
 - if it's zero then we check sign bit of 114,x and only
   write the registers if it's positive
 - if it's nonzero we look at low 6 bits, dec'd if nonzero


$ff
---
APU_STATUS shadow?
Temp variable?  Seems to maybe be used for D opcode?

$100
----


$101
----

$102
----
Currently playing BGM track index, for purpose of determining whether to
start playing a track from the start or to continue playing the same track.
This does _not_ seem to be used to continue playing tracks (potentially
because we instead just store pointers directly into the channel data?).
 - ?? The sign bit seems to have some significance as well. ??

$103..$109
----------
Maybe some sort of buffer of when we need to play something?
 - $103 is eventually written to $110 during IRQ
   before StartAudio ...?

$10f
----
Temp?

$110
----
Currently playing (or last played) SFX index

$111
----
Currently playing BGM (priorityish) maybe ?????

$112
----
Currently playing SFX priority, smaller numbers more important.
This is $#ff if nothing is playing.

$114..$119
----------
When initializing track pointers:
 114,x <- 1
 SFX clobbers 115,117 with :80 bit
 :80 => playing (0) or silent (1)
 :40 => cleared on 90 subcommand?
 :10 => set by 4X
 :01 => ?

$11a..$125
----------
Pointers to the current positions in the current bgm/sfx individual channel
data subtables.  11a..11f is the low byte, 120..125 is the high byte of the
address.

$126..$149
----------
Two pairs of repeat return addresses and counts, used by the $A? opcodes.
A0 is a "call" that stores the return address in register 2, A1 is a "start
repeat" that stores a repeat count in register 1, A2 is a "start repeat" for
register 2 (though A0 is often used instead), A4 is the "end repeat" for
register 1, A8 is the "end repeat" (or "return") for register 2.
 126..12b is return address lo byte for reg 1
 12c..131 is return address lo byte for reg 2
 132..137 is return address hi byte for reg 1
 138..13d is return address hi byte for reg 2
 13e..143 is repeat count for reg 1
 144..149 is repeat count for reg 2

$14a..$14f
----------
Channel timers: when they decrease to 1, run more ops on channel

$150..$155
----------
Staging area for writes to $14a,x.  Opcodes will update $150,x and then
this value will get copied to $14a,x at the end.

$156..$15b
----------
Seems to maybe be a key?  Ends up in the high nibble of the index of
$307b8 data table.  Written by audio command 3X by reading from 3042d table,
which maps 31->00, 32->10, ... 38->70.

$15c..$161
----------
Written by eX commands (along w/ setting 114,x:40)


$162..$167
----------


$168..$17f
----------
When initializing track pointers:
 168,x <- 0 shadow for 4000,y
 16e,x <- 8 shadow for 4001,y
 174,x <- 0 shadow for 4002,y  => pitch (low 8)
 17a,x <- 0 shadow for 4003,y  => pitch (high 3)

Free/unused bytes in this range:
 - $f4, $10a..$10e, $13d, $149


$180..$1d2
----------
Mostly-unused space beneath the stack.  $182..$184 are read and then
written on reset to distinguish hard vs soft, basically just for the
purpose of setting the developer-mode flag.



$300,x
------
Metasprite ID.
$301 is player - $300 seems not to be drawn.


$320,x
------
Some monsters (bosses?) have $80 here, some people have 10, 20, 30;
something else writes $40.
  - PersonData[i][2] & #$70  -> 320,x

Usage: $3dada looks like nonzero causes some sort of "chain" to the next object?
       - this routine looks to be zeroing out the sprites (specifically $4a0, the action)

This is added to the pattern ID.
It's zero for all monsters (except mimic, which is why mimics don't behave reasonably w.r.t. 380,x:20)
Orcs zero out the upper 6 bits when moving (but it was already 0 and nobody's reading it?)
  - it's possible this was a mistake and should have been a different register


$340,x
------
Upper nibble: knockback/recoil if >= 8, otherwise zero
 - each frame it increases a bit while the object is knocked back
   Looks like maybe player turns positive while enemies turn negative,
      count up from 82->92->a2->b2->c2->d2->e2->f2->02->02...
Lower nibble: object's speed

Normally 35bff writes 6 to $340.  it clears the :0f bits and ORs in A,
  which comes from an immediate LDA #$?? right before the call, except when
  called by 35b5f where it just preserves the current value.
  for player (see SetPlayer340Lower),
    - 2 = mutated, 5 = changed, 9 = dolphin


$360,x
------
direction facing: 0 = up, 2 = right, 4 = down, 6 = left (odds diagonal)
 - used for metasprite selection when 380,x is odd (??)

upper nibble used for knockback direction (we could possibly truncate this to
only upper 3 bits, allowing 32 directions total, still have diagonal knockback)


$380,x
------
For monsters:
  :80 = off screen (positive = on-screen)
  :40 = behind background
  :20 = something else to do with sprites? -> +#$40 to all pattern ids
  :10 = ??
  :08 = non-directional sprite
        when clear, sprite changes on each dir change - $300,x actually updates
        when set, sprite is fixed at whatever it was before.
  :04 = touch inflicts poison
        or else shimmering (but not invincible?)
  :02 = use $580,x as an additional metasprite (e.g. shield or mosquito wings)
  :01 = non-directional sprite
        when clear, sprite changes with direction,
        but $300 is fixed - seems to just add the dir.
        when set, it doesn't seem to
        but weretiger has this set, so that's weird.



current terrain effects
updated in $35acb after reading ($68),y for y = metatile that 'x' is standing on
 - only if $14:40 - $14 initialized from A upon calling $35a30 (it's called with various
   constant values - 0, #$40, $#c0)
 - $380,x <- ($380,x & %1010 1111 | (($68),y & $460,x & %0101 0000))
 So $460,x seems to enable copying the :40 and/or the :10 bits from $(68),y

Looks like terrain effects, read from the graphics[4] == tileset[1] data table
  :40 adjusts speed (2 steps slower if set)
  :10 sprite behind background

  Birds: $a1

:80 seems to indicate off-screen?
:04 = inflicts poison --> not?


Recall: 01=pit, 02=impassible/foot, 04=impassible/fly, 08=changes w/ flag?
        10=behind, 20=slide, 40=slow, 80=pain

$38c goes from $81 to $01 when barrier is active.
$381 is some sort of player status bitset?
  - :04 set when taking damage (briefly - invinsible)
     - who is in charge of flickering?
  - :03 seems to be the standard value


$3a0,x
------
something about hitboxes and intersections? written 369f9 after checking a bunch
of screen positions?
 - the upper nibble seems to be written in various spots
 - the lower nibble seems to be mostly constant, though it's written in a
   few spots, mainly boss initializations - possibly converting to coin, etc...?
 - lower nibble indicates which hitbox we have (plus $420:40 for :10 bit)
 - zero upper nibble means no hitbox checking at all, among other things?
 - upper nibble is collision plane - two objects must share at least one bit
   in order to be able to collide.  Player on ground is 50, in air is 60.
   both will collide with a 4x, but many enemies are 1x.  May be more complex, tho

Collision Planes:
 - player on ground: %0101
 - player in air:    %0110
 - sword:            %0011
 - ground enemies:   %0001
 - flying enemies:   %0011
 - paralysis beam:   %1001
 - barrier:          %1100
 - amorphous blob:   %0100 when sunken, %0001 when up
 - projectiles:      %1100

 bits: 1 = ground
       2 = air
       4 = both (but blocked by barrier)
       8 = blocked by barrier

$3c0,x
------
HP


$3e0,x
------
Attack


$400,x
------
Defense


$420,x
------
const
:40 bit seems to select hitboxes 16-23.
low nibble is required level - consistent with 421 being player level


$440,x
------
for enemies that throw things, this is what they throw
 - Troll ($6a) throws Troll_Axe ($ee), and its $440 is $4e,
   so it looks like we add $a0 to get the missile. ($4a0:$27)
 - DraygoniaKnight ($89) swings sword ($f2) and has $440 of $52 ($4a0:$2a)
BUT.
 - statues have $32 yet their missiles are $fd.
 - probably depends on action script.
not a simple addition - looks up in $80-element table of quads 29c00



$460,x
------
Terrain susceptibility?
Seems to enable copying the :40 and/or the :10 bits from $(68),y into $380,x
The :06 bit indicates flying - 02 = not flying, 04 = flying (at least for player)
 - not clear what these bits are...
 - birds/flyers seem to have $00 for this, since they're not affected by terrain
 - land creatures are $57 (pit, impassibility, behind, slow)
 - some are $77, which also includes push-down slides
 - salamander is $5f, so we copy the transforms w/ flag bit for some reason???
 - player is 32 while grounded (incl rabbit boots), 34 while flying
   - this does not include slow, pit, pain, etc -> why not? handled elsewhere?


$480,x
------
seems to be some sort of step counter
 - when it's odd then diagonal movements travel further?
 - counts down and loops
 - $48e is the step counter for the $e NPC?

NOTE: $480 and $4e0 both seem to be step counters, though $4e0 is used
for animation and seems to count down by 2 whenever $480 counts down
by one (deps on 4a0).  Interestingly, the player's steps decrement $480
and $4e1, but leave $481 and $4e0 alone.

Random movement: seems to be reset to some small number (20s or 30s) and
controls how far the random step will be, though sometimes we stop in
the middle (e.g. $2c).  Monster always stops moving when it his zero, then
resetsit again. (unlike $4e0 that's never reset).  This alternates with
$600 in ticking it down.



$4a0,x
------
if this is zero, then do not show a sprite...?
but it clearly does more than that...
 - looks to index jump table at $36314
 - not sure when that runs?
   kinda looks like every frame, provided 3cade_08 jump is run
   - that's run from 3c91f_01, where 08 is indexed from $41
     - that's run from 3c900, with 01 from $40
     - 3c900 is reset handler, looks like main loop.
The upper :80 bit indicates whether an immune hit causes knockback
    (no knockback if set)



$4c0,x
------
on death action??? death replacement...


$4e0,x
------
Step counter - counts down with some sort of increment (1 or 2?)
The upper 5 bits of this are ANDed with the 2nd byte of the
metasprite data table to pick the specific version to use


$500,x
------
high nibble - gold drop index
low nibble - elemental defense


$520,x
------
exp for killing


$540,x
------
const, loaded from $2e&3 for NPCs (should always be 1 == NPC type?)
if #$ff then use shield defense, anything else uses armor
 - 209 objects have 00, 45 have ff, 2 have 01.
 - CollisionJump_01_EnemyHitsPlayer takes a totally different
   path in this case.
NOTE: this is set to the type for non-1 NPCs as well?


$560,x
------
?? somethingb about terrain - cf 3ef6f checking $561:80 to skip pain land?
for projectiles (540==ff), 560 is imputed status
 - 1 = paralyze, 2 = stone, 3 = mp drain, 4 = curse
for objects loaded from the NpcData table, this is the 4th byte in the table,
typically the ID.


$580,x
------
some sort of alternative/additional metatile ID.  It's only ever read in two places:
$368c5 and $3824e.  These run if $6e0,x is zero, or if ...?

$581 is normally $0f or $0a or something, but goes to $a3 when a spider web is draining MP...?
 - the object stays around, too, so it's probably handled by the object's update method
 - no idea what this actually does...

$580 is basically the player's sprite plus $c (c..f if walking; 10..13 if stab)
 - if no shield is equipped, it's 8..b for walking and always 4c for stab

This is also used for mosquito wings.


$5a0,x
------
must wait to move - counts down to zero when able to move again?
 - set by paralysis


$5c0,x
------
sprite's x-coordinate (relative to corner of screen)
 - this is never initialized in ObjectData


$5e0,x
------
sprite's y-coordinate (relative to corner of screen)
 - this is never initialized in ObjectData


$600,x
------
$600 is a countdown timer for swinging the sword.
 - when initiating the swing, it's set to #$11, when
   it's $b or less, another tap of B will swing it again.

$603 seems to be a countdown timer that's set to #$10 when bumping into somebody
and then counts down once the dialog disappears, during which no other interactions
will occur.  Hits from enemies don't seem to trigger this.

For bosses, this is the current action mode, indexes a jump table for the boss
which is run during its update action

For random movement, this is a wait timer.

For NPCs, this is initialized from a lookup table ($3e35f) indexed by
the #$03 bit of the person ID (spawn[3]), provided the person is not
a statue.  The values are $da,$22,$4a,$aa => ???
  This is read from ObjectActionJump_30 (the standard NPC action)
  to determine whether to move the NPC by reading it as a bitmask
  indexed by $08.  So it's basically a speed: [5, 2, 3, 4].


$620,x
------
$620 is the current jump displacement, from 0 to $13.  As rising or falling
this number is changing.  It presumably means something else for somebody else.
 - probably also fires when falling into a pit - starts at $30, decreases down to 0
for action script $0f, $620,x is the game mode to load.

$623 is slot of object in front of player.

Weretiger Movement:
 - Number of frames remaining for swerving around obstacles



$640,x
------
 - $643: index (0..$1f) of the non-monster NPC in front of the player.
   set by $34f73 and/or $354b0
?? somethingb about terrain - cf 3ef72 checking $641:80 to skip pain land?


$660,x
------
$661 is a countdown timer used only in stom fight, but apparently never read
to affect anything other than checking for a multiple of 4?


$680,x
------


$6a0,x
------


$6c0,x
------


$6e0,x
------
used for ad-hoc spawns? mixed in with direction.

also used for random other purposes:
  $6f3 - jump table position in main title screen
  $6fc..$6fd - used for some temporary jumps (e.g. in title screen)
  $6ff - seems to be something about a timer in title screen


$0708
-----
Player MP


$0710..$071f
------------
  $710 - status
     low nibble is status ailments:
       01 = paralyzed
       02 = stone
       03 = poison
       04 = mutated/cursed
     high nibble is good status:
       40 = riding on dolphin
       80 = changed into stom
       90 = changed into soldier
       a0 = changed into woman
       b0 = changed into akahana
     seems to be written twice on location transition,
         at $2fc17 (clears :0f) and $2fc88 (restores)
            - 2fcfb reads in the middle
         $352a3 writes a 3
         high bits (:40) checked at $35fa9
         $3d2a0 adds the 4 bit, $35b99 removes it
       - also read 35b6b, 35bd5, 35b80, 35d9d, 35de7, 35e88, 380b7, 3efc4, 3efde

Equipment - see notes at top of Crystalis.asm
  $711 - equipped sword (0=none, 1..4 for element, 5 for crystalis?)
  $712 - magic (0=none, 1=refresh, 2=paral, 3=telepathy)
  $713 - equipped armor index (0=none, 1=leather, ..., 8=psycho)
  $714 - equipped shield index (0=none, 1=carapace, ..., 8=psycho)
  $715 - equipped usable item (0=none, $8=warp boots, $15=alarm flute, $16=windmill key)
         when used, $1c398 resets back to 0
         when exit menu, $3db27 seems to "confirm" the selection made in $3d900
  $716 - equipped accessory (0=none, 0d=gas m, 12=rabbit b, 14=shield r)
### my guess - 716 is accessory, 717 is magic
  $718 - equipped ball (1..4 for ball, 5..8 for bracelet)
  $719 - max charge level

sword armor and shield written at $20339 (during inventory selection)
charge written at $3d900 upon closing


$720..$7d4
----------

These are written but mostly never read?
Only the following are ever read: $743, $744, $780, $7c0


$7d5
----
7d5 has to do with screen scroll, seeming to track whether
the screen needs to move to keep up with the player.  It's
set to zero in KeepPlayerInCenterOfScreenIfPossible (at $3e9b3)
and set to one later in that routine (at $3ea5b) under certain
conditions??


$7d6
----

??


$7d7
----
Has to do with suppressing scrolling during explosions and before/during/after boss fights
? zerod in 3e3f3 along w/ $7d6 and $51
  outside start cave - 37852 writes $10, 3e8fd dec's to $0f alternately
  also when sealed cave opens - seems to have something to do with explosions
  also when blowing up
eventually it stops resetting to $10 and decs down to 0 - each dec seems to disappear
one metasprite (more or less)
 - also for ice bridges
BOSS FIGHT -
  while scrolling the screen, $1e4ad writes $ff, which triggers the jump 
  $3e9bb -> $3ea41 to no longer keep player in middle of screen
  After the scroll, it goes back to the 10/0f loop, but 3e900/1e486
 - boss explosion -> 37855/3e900
 - after explosion, while chest unopened -> 1f7c0/3e900
 - final 0 -> 0 write at 3e3f6

When fall sound happens ($35d34) $7d7 and $7d6 are both set to #$10

When nonzero, background no longer animated???

also prevents teleporting ($3db2d), used by boss treasure chests $0f via action $6e

$7dc
----
ID of trigger square/treasure chest currently stepped on (set by main game mode 7)


$7de..$7df
----------
Looks related to text - $2853a stores $7df in $6700 and $7de into $6701
 - the $6700 addresses look pretty unread - written but never read
$7df - message table part to look in
$7de:1f - message index within the part



$7e0..$7e7
----------
Palettes.  These index into the palette tables embedded in $4000..$7fff.
The first four are bg palettes, the last 4 are sprites, and are offset by $b0
(i.e. $7e5 of $01 means the 2nd sprite palette is $b1).


$7f0..$7f5
----------
Store CHR bank values for bank select 0..5:
    0: Select 2 KB CHR bank at PPU $0000-$07FF - background 1
    1: Select 2 KB CHR bank at PPU $0800-$0FFF - background 2
       - This is used for terrain animations (water, etc)
         and the possible values all come from the 32-byte data
         table at $3e779 (four eight-byte animation sequences)
    2: Select 1 KB CHR bank at PPU $1000-$13FF - player
    3: Select 1 KB CHR bank at PPU $1400-$17FF - sword
    4: Select 1 KB CHR bank at PPU $1800-$1BFF - npc 1
    5: Select 1 KB CHR bank at PPU $1C00-$1FFF - npc 2

$7ff
----
Appears to be a global counter


$6000..$60ff
------------
Staging area for writing to nametable ($3c6b1)

;;; 3ebf7, 3edd2. 34d67, 3ec4b


$6100..$613f
------------
attribute table staging area ($3c739, $3c6e7)
 - potentially this is just always kept up to date?


$6140..$615f
------------
map palette data
 - written at 34cb3


$6160..$61ff
------------
Unused in vanilla.  We co-opt these for randomizer as follows:
 - $61ff we use to track the need to redisplay the difficulty
 - $61fe - the current check
 - Plan to use other parts of this block for multi-world.
   - 6160..61bf  => all names


$6200..$621f
------------
PPUDATA write staging area
$b is the position written to this part of RAM, $a is the position that's been
committed to the PPU, and thus lags $b.  The data go in quads:
  6200,x:3f - high 6 bits of PPUADDR (1st write)
        :40 - PPUCTRL increment (0 = vertical, 1 = horizontal)
        :80 - check for another chunk immediately afterwards
  6201,x    - low byte of PPUADDR (2nd write)
  6202,x    - number of data bytes to write
  6203,x    - offset into $6000 to copy from


$6220..$62ef
------------
Unused in vanilla.  We co-opt at least part of this block for
crowd control.
 - $6220 - flag for communicating between CC and the game
 - $6221 - ???
 - $6222 - bits indicating numbers that need to be updated


$62f0..$62fb
------------
Some sort of nametable-initialization bitset?  might be larger?
Location flags copied here from $64c0..$64df based on the location flags table.

Map flags indexed by the tile position are checked when populating the nametable.


$62fc..$62ff
------------
Stores location full map geometry (width, height, animation, shop)

$6300..$637f
------------
Map screen IDs, stored in 6300,(yh << 3 | xh) - this obviously implies that
the maximum width of a map is 8, and is consistent with what we've seen
elsewhere where yh has special handling for >8 but xh does not.

$6380..$63ff
------------
Unused in vanilla.

Note: the following were read (preindexed) but never written in vanilla:
 - $63f4, $63f8, $63f9, $63ff


$6400..$640f
------------
part of current game data?

%6410..$6417
------------
??
 - blank name (or continue) sets it to "      "
 - non-blank name sets it to "   \r\r\r" (where
   non-blank letters are space, blanks are $10)
 - seems to be placeholders or some such? might have
   been a secondary name at one point?

$6418..$641d
------------
player name

$6427
-----
Currently selected shop item index

$6428..$642f
------------
??

$6430..$645f
------------
Inventory

$6460..$647f
------------
Temporary shop data? (6460..6469 seems completely unused)


$6480..$64df
------------
Flags 000..2ff (see flags table)


$64e0..$657f
------------
Not read, but seems to maybe be copied?


$6580..$667f
------------
many of these are never read, seem to have been copied from 7f00,x
 - Specifically, all of $6610..$667f is unread except $6643


$6680..$6cff
------------
Unused except for 6700, 6701 which are written at least once...
 (2853d, 28558 writes from 7df and 7de, respectively)

Note: I had previously called out $6cf0..$6cff as some sort of separate
unknown for some reason, but I don't know why.  They seem totally unused.


$6d00..$6fff
------------
may be copied from 7d00..7fff at some point


$7000..$70ff
------------
mostly untouched
 - 7000 gets a fixed value (#fb at 21be3)
 - 7001 written from Y at 20995 => save game name?
 - 7005 from RAM $6f at 3f0ab => shadow for bank switch
 - 700e, 700f initialized fixed #0 3f1cf
Most seem to be written during reset handler??
