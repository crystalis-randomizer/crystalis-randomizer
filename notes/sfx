PRG 30094 is the routine for playing sfx
The sound effect to play is in A, from 0110
This indexes the SoundEffectData table (offset by $40) at $18000
($f5),y indexes into the entry from this table

$f0:40 indicates not to continue?
$0110 is new track to play
$0112 is current sfx's priority
$0114,x is hardware channel flags
  - 0 0 0 0 0 0 0 p
    | | | | | | | |- channel is playing SFX? (affected by 0X 1X)
    | | | | | | |--- unused?
    | | | | | |----- unused?
    | | | | |------- unused?
    | | | |--------- channel is silenced     (affected by 4X)
    | | |----------- channel has pitch envelope
    | |------------- channel has volume envelope
    |--------------- channel is playing

Then store #$0a into $fb, #4 into x
jsr $30169 x2 (2nd time w/ y=3 instead of 1)  [x=4,5]
  read ($f5),y++, store in $011a,x     [11e,11f]
  read ($f5),y, add #$20, store $120,x [124,125]
  store 1 in $14a,x and $150,x   [14e,14f] [154,155]
  store 0 in 156,x               [15a,15b]
             pulse2/noise regs 0,2,3
             168,x 174,x 17a,x   [16c,16d] [178,179] [17e,17f]
        8 in pule2/noise reg 1; 16e,x  [172,173]
        1 in 114,x               [118,119]
  set APU status based on DMC in $ff:10 (clobbered 1d then 17 ???)
set $115:80, $117:80

When do these get read again?


  jmp $30132
    (stores $120,x)
    1 => 14a,x and 150,x
    0 => 156,x
    y <= 307ac,x  [04,0c]
    0 => 4000,y 4002,y 4003,y   [pulse2, noise]
    0 => 0168,x 0174,x 017a,x
    8 => 4001,y 016e,x          [pulse2, noise]
    1 => 0114,x
    jsr $30465
      if (114,x positive) {
        $ff:10 | 307b2,x => 4015 (APU_STATUS)
        :10 is DMC enable, 307b2,x [0d,07] is NT1 or T21
      }

Initializes pulse2 and noise to 0,8,0,0
 - sweep negate, volume 0, timer 0

Reading the 11e,124 subtable:
 - fd++
 - y <= f1++ (where we're at?) read first byte
 - ($f5),y => f3
 - upper 5 bits indexes audio jump table $30000




Table structure:
 0    Priority (smaller takes precedence)
 1,2  => 11e,124 => f5,f6 (+20)
 3,4  => 11f,125 => f5,f6 (+20)
11e,124 subtable:
 0    => Read by 3034b

These look to be instructions (in upper nibble) and arguments (in lower)
for some sort of state machine

Looped in 30298 until f2 is nonzero (jump 2 does this)
302a5 keeps place for next time?

30307 reads data from $01xx and sets registers:
 bits of fc indicates which of these happen (skip if set)
 01: 16c => 4004
 02: 172 => 4005
 04: 178 => 4006
 08: 172 => 4005, &~80, |08 => 172
     17e|08 => 4007


Audio commands:
 - 00 seems to be "done"?
 - 0x/1x Change to the song at this index.
 - 2 is maybe some sort of pause/wait?
   - a4 also seems like a light terminal?
   - 2X is change pitch and be done...?
   - Note table:
   -  1 2   4 5 6
   - c d e f 0 a b
 - 3 sets octave
 - 4 is ???
   - ends commands for frame
   - 40 immediately silences current channel (vi 4015) if 114,x positive
 - 5/6 seems to set some sort of duration?
 - 7 seems to affect the roll-off?
   - 3052e writes 4000,y with successive smaller values, who calls it?
 - 8 seems to set max note volume.
     - The volume table is a 16x16 table, where one dimension is the value in `8x` 
          and the other is the value of the current envelope `eX`
     - 8x is stored
 - 9 sets volume through some weird alternative volume table. Disables `eX` if this is even
          for some reason. It seems more used on triangle.
     - may be samples from a table somewhere, too-long duration gets weird
     - seems to be doing stuff w/ the duty cycle...

 - a0 is an unconditional jump (reads 2 byte arg)
 - a4 seems to sometimes jump back 4?
      - jumps to 126,x/132,x IF --(13e,x) != 0
 - a1 stores next byte to 13e,x and points 126,x/132,x to next command
      => [a1 (N) ... a4] is a repeat of (...) N-1 times
 - a2/a8 is same as a1/a4 but uses 144,x and 12c,x/138,x instead,
         (which are also set by a0, with y+2=>0144,x as repeat count?)
         Repeat count may just be to ensure >1, since will always be at least 2
         Allows returning to right after the a0 - so a0 is more like a jsr
         and a8 is rts
 - bX looks like 2X but it takes an argument and stores it (ORed with #$80) into
   16e,x first => enables sweet unit
 - cX if X is even: read arg (_PPP NSSS), enable sweep
      if X is odd: read but ignore arg, disable sweep
 - dX on noise channels: plays DMC track X from 30bd8
      on melodic channels: plays pitch X with octave-dependent pitch bend
 - eX Sets the note volume envelope
 - fX Sets the note pitch envelope

Weirdly, the first sequence in Sfx21_Ch4 seems to affect the _end_ of the
sound effect - not sure why.  It could be because the sfx is over by the
time it gets to the second chunk?


TODO - same analysis on SFX, which should be a little easier and get to end
     - fewer channels...
     - then we can maybe adjust some to see effect?
     - pick a more melodic one?


SFX23
=====

3f7fe MaybeUpdateMusic
 - finds 00 in 102, takes bpls to 843
 - finds 00 in 101, skips bne
 - finds 23 in 103, skips beq
 - writes 23 into 110 and calls StartAudio
30048 StartAudio
 - sets f0:01, calls StartAudioInner, clears f0:01
30058 StartAudioInner
 - finds 23 in 110, checks !=ff, takes bne to skip early return
                    skips bmi to check 111?
                    compares >= 20, takes bcs to StartSfx
30094 StartSfx
 - selects 18000 @ a000 [misaligned]
 - looks up track from table
 - checks priority 06 against 112, finds ff so updates 112<-06
 - initializes track pointers
    11a,x <- lo
    120,x <- hi+20
    14a,x;150,x <- 1
    156,x <- 0
    y <- 307ac,x track register offset [0,4,8,c,4,c]
    4000,y;4002,y;4003,y <- 0
    168,x;174,x;17a,x <- 0
    4001,y <- 8
    16e,x <- 8
    114,x <- 1
    Negate 115 and 117 (bgm channels co-opted by sfx)

Then ResumeAudio goes
  f0 is 0, so go on
  fd <- 0
  f0 gets :01 set
  f3 <- f0
     (would clear f0:20 if not positive, and ff-out 111 if it was positive
      before silencing all channels)
  shift f3 and _again_ check if it's positive
     (if not, do something similar with 112, but only kill already-off chans???
      i.e. writes ($fb ^ #$0f), then zeros out $fb)




Frame 993
 read addrs from table
 ch4: read 180ef..f4: 95 e7 36 57 8a 2c
 ch5: read 18164..67: 91 8f 66 40

Frame 996 (+3)    ch4: read 180f5: 2e
Frame 999 (+6)    ch4: read 180f6: 2d
Frame 1002 (+9)   ch4: read 180f7: 2f
Frame 1005 (+12)  ch4: read 180f8: 2e
Frame 1008 (+15)  ch4: read 180f9: 20
Frame 1011 (+18)  ch4: read 180fa: 2f
Frame 1014 (+21)  ch4: read 180fb: 2a

Frame 1017 (+24)
 ch4: read 180fc..fd: 84 2c

Frame 1020 (+27)  ch4: read 180fe: 2e
Frame 1023 (+30)  ch4: read 180ff: 2d
Frame 1026 (+33)  ch4: read 18100: 2f
Frame 1029 (+36)  ch4: read 18101: 2e
Frame 1032 (+39)  ch4: read 18102: 20
Frame 1035 (+42)  ch4: read 18103: 2f
Frame 1038 (+45)  ch4: read 18104: 2a

Frame 1041 (+48)
 ch4: read 18105:     20
 ch5: read 18168..69  53 22

Frame 1042 (+49)  ch5: read 1816a: 21
Frame 1043 (+50)  ch5: read 1816b: 20

Frame 1044 (+51)
 ch4: read 18106:     2b
 ch5: read 1816c:     22

Frame 1045 (+52)  ch5: read 1816d: 21
Frame 1046 (+53)  ch5: read 1816e: 20

Frame 1047 (+54)
 ch4: read 18107..0c: 93 e2 8f 53 31 25
 ch5: read 1816f:     53

BGM
===

Let's trace through Bgm01:

this is the part that goes ~ 2 4 6 8 7 6 5 4 (8 notes, up then down)
baseline is 1 3 1 3 2 4 2 4

Frame 4260
 ch0: read 30c6a..70: 93 89 ef f3 a0 (77 8d)
      read 30d77..79: 26 60 2a
 ch1: read 30ddc..e2: 93 89 ef f3 a0 (e8 8e)
      read 30ee8..ea: 62 32 d6 (why stop on d6?)
 ch2: read 30f37..3b: 91 88 a0 (30 90)
      read 31030..34: 62 a1 (02) 32 26
 ch3: read 3106d..75: 91 8f ed a1 (08) d1 80 64 |40

Note: 40 was read on next frame...?

Frame 4272 (+12)
 ch0: read 30d7a..7c: 60 33 2d
 ch1: read 30eeb..ed: 60 33 dd
 ch2: read 31035..36: 33 26

Frame 4278 (+18)
 ch0: read 30d7d:     2f
 ch1: read 30eee:     df

Frame 4284 (+24)
 ch0: read 30d7e:     40
 ch1: read 30eef:     40
 ch2: read 31037:     a4 (1 => back)
      read 31033..34: 32 26
 ch3: read 31076:     2a

Frame 4290 (+30)
 ch0: read 30d7f..80: 69 2a
 ch1: read 30ef0..f1: 69 da

Frame 4296 (+36)
 ch2: read 31035..36: 33 26

Frame 4302 (+42)
 nothing

Frame 4308 (+48)
 ch0: read 30d81..82: 62 20
 ch1: read 30ef2..f3: 62 d0
 ch2: read 31037..3b: a4 (0 => continue) a1 (02) 33 2c
 ch3: read 31077:     40

Frame 4314 (+54)
 nothing

Frame 4320 (+60)
 ch0: read 30d83..84: 60 2f
 ch1: read 30ef4..e5: 60 df
 ch2: read 3103c..3d: 34 2c

Frame 4326 (+66)
 ch0: read 30d85:     2e
 ch1: read 30ef6:     de

Frame 4332 (+72)
 ch0: read 30d86:     40
 ch1: read 30ef7:     40
 ch2: read 3103e:     a4
      read 3103a..3b: 33 2c
 ch3: read 31078:     2a

Frame 4338 (+78)
 ch0: read 30d87..88: 69 2d
 ch1: read 30ef8..f9: 69 dd

Frame 4344 (+84)
 ch2: read 3103c..3d: 34 2c


nes.debug.breakAt([0x30c6a,0x310bc], 'prg', 'r', (a) => void console.log(`${nes.ppu.frame}@${nes.cpu.REG_PC.toString(16)}: ${(a+0x28000).toString(16)} => ${nes.rom.rom[a+0x28000].toString(16).padStart(2,0)}`));
function play(a) { nes.cpu.REG_ACC=a; nes.debug.call(0x7c125); }
play(1);setTimeout(()=>play(0),1500);


=======
Buzzing...

nes.debug.breakAt(0x63b, 'prg', 'x', () => void nes.mmap.apuWrites.push([0, 0, 0, 0, 0]))
pb=nes.mmap.apuWrites;
(function(){let last=-1; for (let i = 0; i < pb.length; i++) { let w=pb[i]; if(w[2]===0){last=-1;pb.slice(i--,1);continue;}if (w[2]!==0x4015)continue; if (w[3]===last){pb.splice(i--,1);}else{last=w[3]}}})()
pb.filter(([,,a])=>a==0x4015).map(v=>v[0]+':'+v[3].toString(16)).join(' ')
nes.apuPlayback=pb;
