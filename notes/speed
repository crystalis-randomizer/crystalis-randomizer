Even the non-trig versions are way too laggy, but we can maybe
fix this by doing large branches.  Two main approaches, depending
on whether we're going for 32 or 64 directions.

32-dir, 32-speed:
 - only need 8 frames of fraction data
 - speeds go smoothly in 1/4 increments from speed(0) = 1/2 to speed(30) = 8,
   potentially leaving eight unused bytes for speed 31
 - store two 256-byte tables for speed(i)*cos(dir(j)) and speed(i)*sin(dir(j))
   vary direction slower, speed fastest
 - slice off the upper two bits of direction and branch -> 3 bits for table
 - trig tables store a "component": %fff0wwww where fff is the 3-bit fraction
   and wwww is an unsigned whole number from 0 to 8
 - fraction table transposed, loaded in from step counter at start
   - only 8 bytes total for fracs since they're packed
 - store a "upper-nibble powers-of-two" table (maybe embedded in sin/cos?
NOTE: we can possibly just store 272 bytes (17*16) and do an EOR in the cos
      branches, with a different base address

64-dir, 32-speed:
 - similar to others, but branch one more time: 4 sin/cos tables that store
   pi/4 each (rather than pi/2).
 - rather than storing packed fractions, we can overload the sign bit of the
   6-bit arctan table (256 bytes, all 0 or 1 here)


Trial results: 32-dir seems to work pretty well, only introducing a small amount
of lag.  We can maybe (over)compensate and reduce lag by updating
ObjectActionJump_57 to use a cached version of ComputeDisplacementVector.
We can utilize $640,x .. $6a0,x to store the cached versions, initializing
with some simple signal to invalidate them (i.e. require one to be negative,
and zero it out when it's invalid).  We then need to change OAJ_16 (and maybe
36, but that's just crystalis shot and shouldn't matter) to invalidate the cache
whenever it changes direction - and also possibly stagger the direction changes
across frames rather than updating 10 caches all at once?

## Projectiles

Call tree for OAJ_57: dyna shots
 - 10: swords, popcorn, etc
 - 11: swords, popcorn, etc
 - 16: mado shurikens (curve)
 - 17: demon wall fire
 - 1e: draygon laser
 - 1f: moth residue
 - 36: crystalis shot

Need 6 (7?) RAM values to optimize motion - what's available?
 300 - metasprite id
 320 - (read by metasprite code)
 340 - speed
 360 - direction
 380 - (read by metasprites and movement)
 3a0 - hitbox
 3c0 - AVAILABLE (HP)
 3e0 - attack
 400 - AVAILABLE (defense)
 420 - sword level for breaking walls
 440 - AVAILABLE (thrown object)
 460 - terrain susceptibility??
 480 - step counter for movement
 4a0 - action
 4c0 - death replacement????
 4e0 - animation step counter
 500 - sword element
 520 - AVAILABLE (exp on death)
 540 - damage type
 560 - used for some things??
 580 - wind2 uses??? otherwise available
 5a0 - must wait to move paralysis counter (ticked centrally)
 5c0 - sprite X coordinate on screen
 5e0 - sprite Y coordinate on screen
 600 - subboss, etc; nonzero for crystalis?; used in 64,
 620 - nonzero for obj $20?
 640 - AVAILABLE?
 660 - AVAILABLE?
 680 - AVAILABLE?
 6a0 - (used for lizardmen flails... probably available?)
 6c0 - directional metasprites? (maybe available?)
 6e0 - ...?

Available: 3c0, 400, 440, 520, 640, 660, 680, 6c0


============= OLD NOTES 2023 AUG ==============

64-direction trig tables are going to be laggy, and will slow down
the inner loop.  Better approach would be to _decouple_ the speed
from the direction.

Current speeds:
 0 - 0.5 px/fr
 1 - 0.75
 2 - 1.0
 3 - 1.25
 4 - 1.5
 5 - 1.75
 6 - 2.0
 7 - 2.5
 8 - 5.0
 9 - 6.5 [could maybe move to 6.25?]
 A - 8.0 [sword shots only, except thunder]
 B - 7.0 (16-dir)
 C - 1.75 (16-dir)
 D - 2.5 (16-dir)
 E - 3.0 (16-dir)
 F - 2.0 (16-dir) [unused?]

New proposal:
 0 - 0.5   [drop??? - used by tomatoes when not rolling]
 1 - 0.75
 2 - 1.0
 3 - 1.25
 4 - 1.5
 5 - 1.75
 6 - 2.0
 7 - 2.5
 8 - 3.0
 9 - [3.5]
 A - [4.0]
 B - [4.5]
 C - 5.0
 D - [5.5]
 E - [6.0]  [drop?]
 F - 6.5    [replace with 6.25?]
///////// no room for the last 3...
 ? - 7.0
 ? - [7.5]  [drop?]
 ? - 8.0

I added 6 speeds, but removed 3 redundant 16-dir speeds (1.75, 2.5, and 2.0)
Can we get away with expanding speed to 5 bits?

Store 16-dir status in DIRECTION:80 rather than using certain speeds?
 - 16-dir objects will _never_ have knockback, so upper nibble is free
 - (given this, we _could_ make it bigger still - how much can we precompute?
    we could take up 2 full rom banks if we needed to?)




=============== OLD NOTES 2022 ==============

bits: 7 => knockback
      5,6 => direction resolution (8/16/32/64)
      0..4 => speed


0 => 1/4
31 => 8

Given step count S (0..7), speed v at 1/4 resolution (0..31)
sin/cos tables at 1/64 resolution c,s (0..63)

dx = c*(S+1)*v


64 directions -> 16 entries to sin table
16 angles * 32 speeds = 512 bytes, on 0..31 scale (1/4)?
  - ultimately need 1/8 resolution => 0..63
Multiply by 0..7 -> 9 bits (use carry?)

  ;; Step should be in the upper 3 bits
  asl Step
  asl Step
  asl Step
  asl Step
  asl Step
  ;; Do the multiplication
  lda Frac  ; 0..63
  sta $61
  lda Step  ; 0..7
  sta $62
  lda #$00
  
  asl $62



Vanilla:
 340 = RRRRSSSS  recoil position, speed
 360 = KKKKDDDD  knockback direction, direction
Proposed:
 340 = RMMSSSSS  recoil position, mode, speed
 360 = KKKDDDDD or 00DDDDDD depending on mode?

But how do we reduce recoil to a single bit???



Note that ComputeDisplacementVector is called 20 times:
 _1e8ff: giant insect
 _1ea37: kelbesque
 BossPatternJump_18: sabera
 _1eeba: mado
 _1f203: draygon
 CheckDirectionAgainstTerrain: player and mobs
 ObjectActionJump_54: following dwarf child
 ObjectActionJump_2b: mimic
 ObjectActionJump_30 (@FinishNpcAction): npc
 ObjectActionJump_32 (@advance_frame): movement script
 ObjectActionJump_38: moving platform
 ObjectActionJump_57: dyna shots (bubble and revenge beam)
 ObjectActionJump_1b: boss popcorn
 ObjectActionJump_12: tornado
 ObjectActionJump_13: blizzard
 ObjectActionJump_15: fire 2
 ObjectActionJump_40: bats/moths
 ObjectActionJump_44: tomato
 ObjectActionJump_45: basic flyer
 FinishRobotMovement: robots (helicopter, maybe?)


There are 196 references (102 writes) to $0340,x (speed) or $0360,x (direction)
 - all of these will need updating...!


# ObjectDirection\|\$0?3[67][0-9a-f]  in 00000..20000
 * call VectorBetweenObjectsXY then read $20 => $360,x
    - vampire 7, kelbeqsue 1
 * call VectorBetweenObjectsXY then transform => $360,x
    - (<<1) (+/-1): _1e96b (kelby rock? action) - 16-dir
    - (<<1) (+1) (+dir) (&f) (index _1ed86 +/-1,0) (+dir) (&f): sabera 1
    - (<<1): sabera 1 
 * read to A before calling ComputeDisplacementVector
    - insect 1 (_1e8ff), kelbesque 1 (_1ea37), sabera 1, mado 3 (_1eeba)
    
 * reverse 8-dir
    - _1e602, kelbesque 3, 
 * initialize to zero
    - sabera 0
 * hardcode 2 or 6
    - insect 1
 * set to ~random 16-dir from a table
    - mado 3 (table 1ef28)
 * special handling for kelbesque 2
    - or w/ #$04
    - write from data table _1ea97 (1, 0, or 7) or _1ea37 (3, 4, or 5) or hardcoded 0
 * _1eb96 (object action 64, kelby rock)
    - adds $20<<1 from a much earlier VectorBetweenObjectsXY (to switch to 16-dir?)
 * _1ed96 (sabera 1)
    - added to ($620>>4)-2, (&f) => y (direction) then call AdHocSpawnObject
 * copy from $1f
    - mado 5, initializing half the adhoc-spawned shurikens (other half from Y)
 * karmine
    - (karmine 1) set to 0 or 4 from $301<<2 (`and #$06` might as well be `and #$04`??)
    - (karmine 2) set to exactly 8?

NOTE: gave up at Draygon 1
NOTE: also need to pay attention to _all_ AdHocSpawnObject calls -> how is Y initialized?

VectorBetweenObjectsXY =>
 - will want to have a high-res version of this?



============

How does knockback play into $360?
 - PlayerHit_CalculateDamage zeroes out the high nibble of 361 and copies 3[46]1 to 3[46]0
 - PlayerHit_ApplyKnockback temporarily replaces player's speed/dir with 2/dir[obj] to bump,
   then restores
 - _35535 temporarily swaps direction to south for statue bump
 - KnockbackObject puts the 8-dir of the $11 object into the upper nibble of $10's dir
    - it's called in three places:
      (1) AttackEnemy_Immune, (2) AttackEnemy_DealDamage, (3) PlayerHit_CalculateDamage
    - the use of x vs y is swapped in these, unfortunately, so there's extra code to save
      and restore...
 - AdHocSpawnObject sets direction from Y
 - MoveObjectWithSpeedAndDirection
    - saves direction in $23, checks against terrain
    - may try adjacent cardinals
    - updates position and direction (if adjacent was needed)
    - restores original at end regardless of how we got there
 - CheckDirectionAgainstTerrain
    - zeros out the upper nibble of direction (in place)
      (but restores it on a double-return and stashes the good direction back into $23)
 - Object Action 03 saves direction and puts it back after MoveObjectWithSpeedAndDirection
    - seems to have to do with descending, may assign $360 from $640 (temporarily?)
 - Some special handling for DYNA? (_361c9), called from Object Action 01
    - just assigns $360,x from $360



TODO - what would go wrong if we initialize ALL the object directions to 0?
     - speeds less doable, since they're less set by code

QUESTION - I see when knockback nibble is _written_, but when is it _read_?
 - test: don't bother writing it, see what changes?
         -> knocks back up


sin/cos tables:
for each speed v, need 16 values of sin(x) for x=pi/32..pi/2
 (we hardcode 0->0 maybe?)
each sin value is 1 byte (129 possible values from 0:1/16:8)
32 speeds from 1/4..8
 => $200 bytes of sin tables  (can use simple double-lookup for that?)
    $200 bytes of fraction tables ????

 ... 128 speeds needs 16*128 bytes just for fraction tables????
     - but we can do better than that - compute them on the fly?
     - some sort of division algorithm?   - probably too slow?

no multiplication needed...

console.log(Array.from({length:32},(_,i)=>Array.from({length:16},(_,x)=>Math.round(Math.sin((x+1)*Math.PI/32)*(i+1)*4)).map(x=>`$${x.toString(16).padStart(2,'0')}`).join(',')).map(x=>`        .byte ${x}\n`).join(''))

        .byte $00,$01,$01,$02,$02,$02,$03,$03,$03,$03,$04,$04,$04,$04,$04,$04
        .byte $01,$02,$02,$03,$04,$04,$05,$06,$06,$07,$07,$07,$08,$08,$08,$08
        .byte $01,$02,$03,$05,$06,$07,$08,$08,$09,$0a,$0b,$0b,$0b,$0c,$0c,$0c
        .byte $02,$03,$05,$06,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f,$0f,$10,$10,$10
        .byte $02,$04,$06,$08,$09,$0b,$0d,$0e,$0f,$11,$12,$12,$13,$14,$14,$14
        .byte $02,$05,$07,$09,$0b,$0d,$0f,$11,$13,$14,$15,$16,$17,$18,$18,$18
        .byte $03,$05,$08,$0b,$0d,$10,$12,$14,$16,$17,$19,$1a,$1b,$1b,$1c,$1c
        .byte $03,$06,$09,$0c,$0f,$12,$14,$17,$19,$1b,$1c,$1e,$1f,$1f,$20,$20
        .byte $04,$07,$0a,$0e,$11,$14,$17,$19,$1c,$1e,$20,$21,$22,$23,$24,$24
        .byte $04,$08,$0c,$0f,$13,$16,$19,$1c,$1f,$21,$23,$25,$26,$27,$28,$28
        .byte $04,$09,$0d,$11,$15,$18,$1c,$1f,$22,$25,$27,$29,$2a,$2b,$2c,$2c
        .byte $05,$09,$0e,$12,$17,$1b,$1e,$22,$25,$28,$2a,$2c,$2e,$2f,$30,$30
        .byte $05,$0a,$0f,$14,$19,$1d,$21,$25,$28,$2b,$2e,$30,$32,$33,$34,$34
        .byte $05,$0b,$10,$15,$1a,$1f,$24,$28,$2b,$2f,$31,$34,$36,$37,$38,$38
        .byte $06,$0c,$11,$17,$1c,$21,$26,$2a,$2e,$32,$35,$37,$39,$3b,$3c,$3c
        .byte $06,$0c,$13,$18,$1e,$24,$29,$2d,$31,$35,$38,$3b,$3d,$3f,$40,$40
        .byte $07,$0d,$14,$1a,$20,$26,$2b,$30,$35,$39,$3c,$3f,$41,$43,$44,$44
        .byte $07,$0e,$15,$1c,$22,$28,$2e,$33,$38,$3c,$3f,$43,$45,$47,$48,$48
        .byte $07,$0f,$16,$1d,$24,$2a,$30,$36,$3b,$3f,$43,$46,$49,$4b,$4c,$4c
        .byte $08,$10,$17,$1f,$26,$2c,$33,$39,$3e,$43,$47,$4a,$4d,$4e,$50,$50
        .byte $08,$10,$18,$20,$28,$2f,$35,$3b,$41,$46,$4a,$4e,$50,$52,$54,$54
        .byte $09,$11,$1a,$22,$29,$31,$38,$3e,$44,$49,$4e,$51,$54,$56,$58,$58
        .byte $09,$12,$1b,$23,$2b,$33,$3a,$41,$47,$4c,$51,$55,$58,$5a,$5c,$5c
        .byte $09,$13,$1c,$25,$2d,$35,$3d,$44,$4a,$50,$55,$59,$5c,$5e,$60,$60
        .byte $0a,$14,$1d,$26,$2f,$38,$3f,$47,$4d,$53,$58,$5c,$60,$62,$64,$64
        .byte $0a,$14,$1e,$28,$31,$3a,$42,$4a,$50,$56,$5c,$60,$64,$66,$67,$68
        .byte $0b,$15,$1f,$29,$33,$3c,$45,$4c,$53,$5a,$5f,$64,$67,$6a,$6b,$6c
        .byte $0b,$16,$21,$2b,$35,$3e,$47,$4f,$57,$5d,$63,$67,$6b,$6e,$6f,$70
        .byte $0b,$17,$22,$2c,$37,$40,$4a,$52,$5a,$60,$66,$6b,$6f,$72,$73,$74
        .byte $0c,$17,$23,$2e,$39,$43,$4c,$55,$5d,$64,$6a,$6f,$73,$76,$77,$78
        .byte $0c,$18,$24,$2f,$3a,$45,$4f,$58,$60,$67,$6d,$73,$77,$7a,$7b,$7c
        .byte $0d,$19,$25,$31,$3c,$47,$51,$5b,$63,$6a,$71,$76,$7a,$7e,$7f,$80

How to do speed updates???
 - 1/16 is smallest increment
 - 8 is biggest
 - to do N+x where 0<=x<1, put N every frame, then add 1 on the frames where
   FractionTable[x] has a nonzero bit
