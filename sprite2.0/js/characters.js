class NssFile {
    constructor(filename, chrdata, palette, rendered) {
        this.filename = filename;
        this.chrdata = Array.from(new Uint8Array(chrdata));
        this.palette = palette;
        this.rendered = Array.from(new Uint8Array(rendered.data));
    }
}
export async function generateThumbnailImage(nss) {
    const offscreenCanvas = document.createElement('canvas');
    offscreenCanvas.width = 112;
    offscreenCanvas.height = 100;
    const ctx = offscreenCanvas.getContext('2d');
    ctx.imageSmoothingEnabled = false;
    ctx.fillStyle = "#155fd9";
    ctx.fillRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);
    const imgData = new ImageData(new Uint8ClampedArray(nss.rendered), 128, 128);
    const imgBitmap = await createImageBitmap(imgData, { resizeQuality: "pixelated" });
    ctx.drawImage(imgBitmap, 0, 0, 16, 24, 24, 2, 16 * 4, 24 * 4);
    return offscreenCanvas.toDataURL('image/png');
}
async function createImageFromCHR(buffer, palette) {
    const tileCount = buffer.byteLength / 16;
    const pixelsPerTile = 8;
    const paletteIdx = 0;
    const offscreenCanvas = document.createElement('canvas');
    offscreenCanvas.width = 128;
    offscreenCanvas.height = 128;
    const ctx = offscreenCanvas.getContext('2d');
    const imageData = ctx.createImageData(128, 128);
    const view = new Uint8ClampedArray(buffer);
    for (let n = 0; n < tileCount; ++n) {
        const offset = n * 16;
        const x = (n % 16) * 8;
        const y = Math.floor(n / 16) * 8;
        for (let j = 0; j < pixelsPerTile; ++j) {
            const plane0 = view[offset + j];
            const plane1 = view[offset + j + 8];
            for (let i = 0; i < pixelsPerTile; ++i) {
                const pixelbit = 7 - i;
                const bit0 = (plane0 >> pixelbit) & 1;
                const bit1 = ((plane1 >> pixelbit) & 1) << 1;
                const color = (bit0 | bit1) + (paletteIdx * 4);
                const appliedColor = basePaletteColors[palette[color]];
                const k = (x + i) * 4 + (y + j) * 4 * 128;
                imageData.data[0 + k] = appliedColor[0];
                imageData.data[1 + k] = appliedColor[1];
                imageData.data[2 + k] = appliedColor[2];
                imageData.data[3 + k] = (color == 0) ? 0 : 255;
            }
        }
    }
    return imageData;
}
export class Sprite {
    constructor(name, converter, nssdata, description) {
        this.name = name;
        this.converter = converter;
        this.nssdata = nssdata;
        this.description = description;
    }
    static async init(name, converter, nssdata, description) {
        const nss = await nssdata;
        return new Sprite(name, converter, nss, description);
    }
    static applyPatch(s, rom, expandedPRG) {
        if (!Sprite.isCustom(s)) {
            return;
        }
        const expandedOffset = expandedPRG ? 0x40000 : 0;
        for (let [src, dsts] of CustomTilesetMapping.getChr(s.converter)) {
            for (let dst of dsts) {
                for (let i = 0; i < 0x10; ++i) {
                    rom[dst + i + expandedOffset] = s.nssdata.chrdata[src * 0x10 + i];
                }
            }
        }
        for (let [src, dsts] of CustomTilesetMapping.getPalette(s.converter)) {
            for (let dst of dsts) {
                switch (src) {
                    case "color0":
                        rom[dst] = s.nssdata.palette[0];
                        break;
                    case "color1":
                        rom[dst] = s.nssdata.palette[1];
                        break;
                    case "color2":
                        rom[dst] = s.nssdata.palette[2];
                        break;
                    case "color3":
                        rom[dst] = s.nssdata.palette[3];
                        break;
                    case "metasprite":
                        rom[dst + expandedOffset] = 0x00;
                        break;
                }
            }
        }
    }
}
Sprite.isCustom = (s) => { return s.name != "Simea"; };
export class CharacterSet {
    constructor() {
        this.simeaReplacements = new Map();
        this.mapping = new Map();
        this.simeaReplacements.set("Simea", Sprite.init("Simea", "simea", loadNssFileFromServer("images/spritesheets/Simea.nss"), "The original main character of Crystalis"));
        this.simeaReplacements.set("Mesia", Sprite.init("Mesia", "simea", loadNssFileFromServer("images/spritesheets/Mesia.nss"), "Secondary protagonist Mesia takes the spotlight! Artwork by jroweboy"));
        this.mapping.set("simea", this.simeaReplacements);
    }
    static get(which) {
        if (!this.instance)
            this.instance = new CharacterSet();
        return this.instance.mapping.get(which);
    }
}
function toChrAddr(chr_page, nametable, tile_number) {
    const baseAddr = 0x40000 + 0x10;
    return baseAddr + chr_page * 0x2000 + nametable * 0x1000 + tile_number * 0x10;
}
export class CustomTilesetMapping {
    constructor() {
        this.chrMapping = new Map();
        this.paletteMapping = new Map();
        this.simeaChrMapping = this.generateSimeaMapping();
        this.simeaPaletteMapping = this.generateSimeaPalette();
        this.chrMapping.set("simea", this.simeaChrMapping);
        this.paletteMapping.set("simea", this.simeaPaletteMapping);
    }
    static getChr(which) {
        if (!this.instance)
            this.instance = new CustomTilesetMapping();
        return this.instance.chrMapping.get(which);
    }
    static getPalette(which) {
        if (!this.instance)
            this.instance = new CustomTilesetMapping();
        return this.instance.paletteMapping.get(which);
    }
    generateSimeaPalette() {
        const mapping = new Map();
        const customCharPaletteAddr = 0x6cf0 + 0x10;
        mapping.set("color0", [customCharPaletteAddr + 0]);
        mapping.set("color1", [customCharPaletteAddr + 1]);
        mapping.set("color2", [customCharPaletteAddr + 2]);
        mapping.set("color3", [customCharPaletteAddr + 3]);
        mapping.set("metasprite", [0x3c054 + 0x10]);
        return mapping;
    }
    generateSimeaMapping() {
        const ARMOR_TILESET_OFFSET = 0x08;
        const CHR_PAGE_OFFSET = 0x400;
        const mapping = new Map();
        mapping.set(0x00, [toChrAddr(8, 0, 0x1a)]);
        mapping.set(0x01, [toChrAddr(8, 0, 0x1b)]);
        mapping.set(0x10, [toChrAddr(8, 0, 0x00)]);
        mapping.set(0x11, [toChrAddr(8, 0, 0x01)]);
        mapping.set(0x20, [toChrAddr(8, 0, 0x20)]);
        mapping.set(0x21, [toChrAddr(8, 0, 0x21)]);
        mapping.set(0x02, [toChrAddr(8, 0, 0x1c)]);
        mapping.set(0x03, [toChrAddr(8, 0, 0x1d)]);
        mapping.set(0x12, [toChrAddr(8, 0, 0x02)]);
        mapping.set(0x13, [toChrAddr(8, 0, 0x03)]);
        mapping.set(0x14, [toChrAddr(8, 0, 0x04)]);
        mapping.set(0x15, [toChrAddr(8, 0, 0x05)]);
        mapping.set(0x22, [toChrAddr(8, 0, 0x22)]);
        mapping.set(0x23, [toChrAddr(8, 0, 0x23)]);
        mapping.set(0x24, [toChrAddr(8, 0, 0x24)]);
        mapping.set(0x25, [toChrAddr(8, 0, 0x25)]);
        mapping.set(0x06, [toChrAddr(8, 0, 0x1e)]);
        mapping.set(0x07, [toChrAddr(8, 0, 0x1f)]);
        mapping.set(0x16, [toChrAddr(8, 0, 0x06)]);
        mapping.set(0x17, [toChrAddr(8, 0, 0x07)]);
        mapping.set(0x26, [toChrAddr(8, 0, 0x26)]);
        mapping.set(0x27, [toChrAddr(8, 0, 0x27)]);
        mapping.set(0x40, [toChrAddr(8, 0, 0x14)]);
        mapping.set(0x41, [toChrAddr(8, 0, 0x15)]);
        mapping.set(0x50, [toChrAddr(8, 0, 0x34)]);
        mapping.set(0x51, [toChrAddr(8, 0, 0x35)]);
        mapping.set(0x32, [toChrAddr(8, 0, 0x3c)]);
        mapping.set(0x33, [toChrAddr(8, 0, 0x3d)]);
        mapping.set(0x42, [toChrAddr(8, 0, 0x18)]);
        mapping.set(0x43, [toChrAddr(8, 0, 0x19)]);
        mapping.set(0x52, [toChrAddr(8, 0, 0x38)]);
        mapping.set(0x53, [toChrAddr(8, 0, 0x27)]);
        mapping.set(0x44, [toChrAddr(8, 0, 0x16)]);
        mapping.set(0x45, [toChrAddr(8, 0, 0x17)]);
        mapping.set(0x54, [toChrAddr(8, 0, 0x36)]);
        mapping.set(0x70, [toChrAddr(8, 0, 0x0e)]);
        mapping.set(0x71, [toChrAddr(8, 0, 0x0f)]);
        mapping.set(0x80, [toChrAddr(8, 0, 0x2e)]);
        mapping.set(0x81, [toChrAddr(8, 0, 0x2f)]);
        mapping.set(0x72, [toChrAddr(8, 0, 0x12)]);
        mapping.set(0x73, [toChrAddr(8, 0, 0x13)]);
        mapping.set(0x82, [toChrAddr(8, 0, 0x30)]);
        mapping.set(0x83, [toChrAddr(8, 0, 0x33)]);
        mapping.set(0x74, [toChrAddr(8, 0, 0x10)]);
        mapping.set(0x75, [toChrAddr(8, 0, 0x11)]);
        mapping.set(0x85, [toChrAddr(8, 0, 0x31)]);
        mapping.set(0xa0, [toChrAddr(8, 0, 0x08)]);
        mapping.set(0xa1, [toChrAddr(8, 0, 0x09)]);
        mapping.set(0xb0, [toChrAddr(8, 0, 0x28)]);
        mapping.set(0x92, [toChrAddr(8, 0, 0x3a)]);
        mapping.set(0x93, [toChrAddr(8, 0, 0x3b)]);
        mapping.set(0xa2, [toChrAddr(8, 0, 0x0c)]);
        mapping.set(0xa3, [toChrAddr(8, 0, 0x0d)]);
        mapping.set(0xb2, [toChrAddr(8, 0, 0x2c)]);
        mapping.set(0xb3, [toChrAddr(8, 0, 0x2d)]);
        mapping.set(0xa4, [toChrAddr(8, 0, 0x0a)]);
        mapping.set(0xa5, [toChrAddr(8, 0, 0x0b)]);
        mapping.set(0xb5, [toChrAddr(8, 0, 0x2b)]);
        const noarmor_mappings = new Map(mapping);
        for (let [key, value] of noarmor_mappings) {
            const armor_key = key + ARMOR_TILESET_OFFSET;
            const armor_val = value.map((k) => k + CHR_PAGE_OFFSET);
            mapping.set(armor_key, armor_val);
        }
        mapping.set(0xc0, [toChrAddr(11, 1, 0x00)]);
        mapping.set(0xc1, [toChrAddr(11, 1, 0x01)]);
        mapping.set(0xd0, [toChrAddr(11, 1, 0x02)]);
        mapping.set(0xd1, [toChrAddr(11, 1, 0x03)]);
        mapping.set(0xe0, [toChrAddr(11, 1, 0x04)]);
        mapping.set(0xe1, [toChrAddr(11, 1, 0x05)]);
        mapping.set(0xc2, [toChrAddr(11, 1, 0x24)]);
        mapping.set(0xc3, [toChrAddr(11, 1, 0x25)]);
        mapping.set(0xd2, [toChrAddr(11, 1, 0x06)]);
        mapping.set(0xd3, [toChrAddr(11, 1, 0x07)]);
        mapping.set(0xe2, [toChrAddr(11, 1, 0x26)]);
        mapping.set(0xe3, [toChrAddr(11, 1, 0x27)]);
        mapping.set(0xc4, [toChrAddr(11, 1, 0x20)]);
        mapping.set(0xc5, [toChrAddr(11, 1, 0x21)]);
        mapping.set(0xd4, [toChrAddr(11, 1, 0x22)]);
        mapping.set(0xd5, [toChrAddr(11, 1, 0x23)]);
        mapping.set(0xd6, [toChrAddr(11, 1, 0x14)]);
        mapping.set(0xd7, [toChrAddr(11, 1, 0x15)]);
        mapping.set(0xe6, [toChrAddr(11, 1, 0x16)]);
        mapping.set(0xe7, [toChrAddr(11, 1, 0x17)]);
        mapping.set(0x36, [toChrAddr(11, 1, 0x0c)]);
        mapping.set(0x37, [toChrAddr(11, 1, 0x0d)]);
        mapping.set(0x46, [toChrAddr(11, 1, 0x32)]);
        mapping.set(0x47, [toChrAddr(11, 1, 0x33)]);
        mapping.set(0x56, [toChrAddr(11, 1, 0x2e)]);
        mapping.set(0x57, [toChrAddr(11, 1, 0x2f)]);
        mapping.set(0x66, [toChrAddr(11, 1, 0x14)]);
        mapping.set(0x67, [toChrAddr(11, 1, 0x15)]);
        mapping.set(0x76, [toChrAddr(11, 1, 0x08)]);
        mapping.set(0x77, [toChrAddr(11, 1, 0x09)]);
        mapping.set(0x86, [toChrAddr(11, 1, 0x28)]);
        mapping.set(0x87, [toChrAddr(11, 1, 0x29)]);
        mapping.set(0xa6, [toChrAddr(11, 1, 0x0a)]);
        mapping.set(0xa7, [toChrAddr(11, 1, 0x0b)]);
        mapping.set(0xb6, [toChrAddr(11, 1, 0x2a)]);
        mapping.set(0xb7, [toChrAddr(11, 1, 0x2b)]);
        let copyToAllWeaponPages = (tile) => {
            return [
                toChrAddr(8, 0, tile) + CHR_PAGE_OFFSET * 2,
                toChrAddr(8, 0, tile) + CHR_PAGE_OFFSET * 3,
                toChrAddr(8, 1, tile),
                toChrAddr(8, 1, tile) + CHR_PAGE_OFFSET,
                toChrAddr(8, 1, tile) + CHR_PAGE_OFFSET * 2,
            ];
        };
        mapping.set(0xf0, copyToAllWeaponPages(0x10));
        mapping.set(0xf1, copyToAllWeaponPages(0x11));
        mapping.set(0xf2, copyToAllWeaponPages(0x12));
        mapping.set(0xf3, copyToAllWeaponPages(0x13));
        mapping.set(0xf4, copyToAllWeaponPages(0x14));
        mapping.set(0xf5, copyToAllWeaponPages(0x15));
        mapping.set(0xf6, copyToAllWeaponPages(0x16));
        mapping.set(0xf7, copyToAllWeaponPages(0x17));
        mapping.set(0xf8, [toChrAddr(8, 1, 0xed)]);
        mapping.set(0xf9, copyToAllWeaponPages(0x19));
        mapping.set(0xfa, copyToAllWeaponPages(0x1a));
        mapping.set(0xfc, copyToAllWeaponPages(0x30));
        mapping.set(0xfd, copyToAllWeaponPages(0x31));
        mapping.set(0xfe, copyToAllWeaponPages(0x32));
        mapping.set(0xff, copyToAllWeaponPages(0x33));
        return mapping;
    }
}
async function loadNssFileFromServer(path) {
    const data = await (await fetch(path)).text();
    const filename = path.replace(/^.*[\\\/]/, '');
    return parseNssFile(filename, data);
}
function unRLE(d) {
    let buffer = "";
    let current = "";
    let i = 0;
    while (i < d.length) {
        if (d[i] === "[") {
            ++i;
            const nextI = d.indexOf("]", i);
            const rle = parseInt(d.slice(i, nextI), 16) - 1;
            buffer += current.repeat(rle);
            i = nextI + 1;
        }
        else {
            current = d.slice(i, i + 2);
            buffer += current;
            i += 2;
        }
    }
    return buffer;
}
function chunk(str, size) {
    return str.match(new RegExp('.{1,' + size + '}', 'g')) || [];
}
function hexstrToBytes(str) {
    const bytes = chunk(str, 2).map(s => parseInt(s, 16));
    return new Uint8Array(bytes);
}
function hex2Num(strs) {
    return strs.map(s => parseInt(s, 16));
}
export async function parseNssFile(filename, data) {
    const nss = new Map(data.split("\n").filter(s => s.includes("=")).map(s => s.split("=")).map(s => [s[0], s[1]]));
    const paletteData = nss.get("Palette") || "";
    const palette = hex2Num(chunk(unRLE(paletteData).slice(0, 32), 2));
    const chrdata = hexstrToBytes(unRLE(nss.get("CHRMain") || ""));
    const rendered = await createImageFromCHR(new Uint8ClampedArray(chrdata), palette);
    return new NssFile(filename, chrdata, palette, rendered);
}
const basePaletteColors = [
    [84, 84, 84], [0, 30, 116], [8, 16, 144], [48, 0, 136], [68, 0, 100], [92, 0, 48], [84, 4, 0], [60, 24, 0], [32, 42, 0], [8, 58, 0], [0, 64, 0], [0, 60, 0], [0, 50, 60], [0, 0, 0], [0, 0, 0], [0, 0, 0],
    [152, 150, 152], [8, 76, 196], [48, 50, 236], [92, 30, 228], [136, 20, 176], [160, 20, 100], [152, 34, 32], [120, 60, 0], [84, 90, 0], [40, 114, 0], [8, 124, 0], [0, 118, 40], [0, 102, 120], [0, 0, 0], [0, 0, 0], [0, 0, 0],
    [236, 238, 236], [76, 154, 236], [120, 124, 236], [176, 98, 236], [228, 84, 236], [236, 88, 180], [236, 106, 100], [212, 136, 32], [160, 170, 0], [116, 196, 0], [76, 208, 32], [56, 204, 108], [56, 180, 204], [60, 60, 60], [0, 0, 0], [0, 0, 0],
    [236, 238, 236], [168, 204, 236], [188, 188, 236], [212, 178, 236], [236, 174, 236], [236, 174, 212], [236, 180, 176], [228, 196, 144], [204, 210, 120], [180, 222, 120], [168, 226, 144], [152, 226, 180], [160, 214, 228], [160, 162, 160], [0, 0, 0], [0, 0, 0],
];
//# sourceMappingURL=data:application/json;base64,