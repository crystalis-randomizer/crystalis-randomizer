function flipSaberaEntrance(exit) {
    console.log(`flip sabera entrance`);
    const loc = exit[0];
    loc.set2d(0x71, [[loc.rom.metascreens.deadEndE_upStair],
        [loc.rom.metascreens.caveEmpty]]);
    loc.moveExits([0x81, 'stair:down', 0x71, 'stair:up']);
    exit[1] = 0x71;
    exit[2] = 'stair:up';
}
function flipKarmineEntrance(exit, random) {
    console.log(`flip karmine entrance`);
    const loc = exit[0];
    const ms = loc.rom.metascreens;
    loc.set2d(0x20, [[ms.caveEmpty, ms.hallNS],
        [ms.deadEndE_upStair, ms.hallNW]]);
    loc.replaceMonsters(random);
    loc.moveExits([0x30, 'stair:down', 0x30, 'stair:up']);
    exit[2] = 'stair:up';
}
function flipKarmineExit(exit) {
    console.log(`flip karmine exit`);
    const loc = exit[0];
    const ms = loc.rom.metascreens;
    loc.set2d(0x01, [[ms.deadEndS_stairs, ms.caveEmpty]]);
    loc.moveExits([0x02, 'stair:down', 0x01, 'stair:up']);
    exit[1] = 0x01;
    exit[2] = 'stair:up';
}
function flipExit(exit) {
    console.log(`flip generic exit`);
    const loc = exit[0];
    const ms = loc.rom.metascreens;
    if (loc.width < 2)
        loc.width = 2;
    loc.set2d(0x00, [[ms.hallSE, ms.deadEndW_downStair]]);
    loc.moveExits([0x00, 'stair:up', 0x01, 'stair:down']);
    exit[1] = 0x01;
    exit[2] = 'stair:down';
}
function flip(e, random) {
    e[3](e, random);
    e[3] = undefined;
}
export function shuffleGoa(rom, random) {
    const $ = rom.locations;
    const floors = [0, 1, 2, 3];
    random.shuffle(floors);
    const entrances = [
        [$.GoaFortress_Kelbesque.meta, 0x83, 'stair:down'],
        [$.GoaFortress_Sabera.meta, 0x81, 'stair:down', flipSaberaEntrance],
        [$.GoaFortress_Mado1.meta, 0x72, 'stair:down'],
        [$.GoaFortress_Karmine1.meta, 0x30, 'stair:down', flipKarmineEntrance],
    ];
    const exits = [
        [$.GoaFortress_Zebu.meta, 0x00, 'stair:up', flipExit],
        [$.GoaFortress_Tornel.meta, 0x00, 'stair:up', flipExit],
        [$.GoaFortress_Asina.meta, 0x00, 'stair:up', flipExit],
        [$.GoaFortress_Kensu.meta, 0x02, 'stair:down', flipKarmineExit],
    ];
    const a = [[$.GoaFortress_Entrance.meta, 0x00, 'edge:top']];
    const b = [];
    let up = true;
    let lastA = a[0];
    for (const f of floors) {
        const flexible = up || entrances[f][3] || a[a.length - 1][3];
        const reverse = flexible ? random.pick([false, true]) : true;
        console.log(`FLOOR ${f}: up ${up} flexible ${!!flexible} reverse ${reverse}`);
        const lastB = reverse ? exits[f] : entrances[f];
        console.log(`push b ${rom.locations[lastB[0].id].name}`);
        b.push(lastB);
        if (up !== (lastB[2] === 'stair:down')) {
            if (lastB[3]) {
                flip(lastB, random);
            }
            else {
                flip(lastA, random);
            }
        }
        a.push(lastA = reverse ? entrances[f] : exits[f]);
        console.log(`push a ${rom.locations[lastA[0].id].name}`);
        up = lastA[2] === 'stair:up';
    }
    if (up)
        flip(lastA, random);
    b.push([$.GoaFortress_Exit.meta, 0x01, 'stair:up']);
    for (let i = 0; i < a.length; i++) {
        a[i][0].attach(a[i][1], b[i][0], b[i][1], a[i][2], b[i][2]);
    }
}
//# sourceMappingURL=data:application/json;base64,