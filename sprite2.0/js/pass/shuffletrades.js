export function shuffleTrades(rom, flags, random) {
    if (!flags.randomizeTrades())
        return;
    const { items: { StatueOfOnyx, FogLamp, LovePendant, KirisaPlant, IvoryStatue }, locations: { Swan_DanceHall }, npcs: { KensuInSwan }, } = rom;
    const map = new Map();
    const items = [
        [StatueOfOnyx, 0, 'Akahana'],
        [FogLamp, 0, 'Fisherman'],
        [LovePendant, 0, 'Kensu'],
        [KirisaPlant, 0, 'Aryllis'],
        [IvoryStatue, 0, 'Slimed Kensu'],
    ];
    const npcs = items.map(([item, trade, npcName]) => {
        if (item.trades.indexOf(trade) < 0 || trade >= item.itemUseData.length) {
            throw new Error(`not a trade: ${item} ${trade}`);
        }
        const use = item.itemUseData[trade];
        return [use, item.id, npcName];
    });
    random.shuffle(npcs);
    for (const [item, trade] of items) {
        const [use, originalItem, npcName] = npcs.pop();
        item.itemUseData[trade] = use;
        if (rom.spoiler)
            rom.spoiler.addTrade(item.id, item.messageName, npcName);
        if (use.want === 0x164 && flags.fogLampNotRequired()) {
            [...rom.npcs[0x64].spawnConditions.values()][0][0] = 0x200 | item.id;
        }
        map.set(originalItem, item.id);
    }
    rom.itemGets.actionGrants =
        new Map([...rom.itemGets.actionGrants]
            .map(([k, v]) => { var _a; return [(_a = map.get(k)) !== null && _a !== void 0 ? _a : k, v]; }));
    const rage = rom.items[random.nextInt(4)];
    rom.npcs[0xc3].localDialogs.get(-1)[0].condition = 0x200 | rage.id;
    if (rom.spoiler)
        rom.spoiler.addTrade(rage.id, rage.messageName, 'Rage');
    rom.npcs.PortoaQueen.localDialogs.get(-1)[3].condition = 0x200 | rage.id;
    const tornel = rom.items[random.nextInt(4) * 2 + 6];
    for (const ds of rom.npcs[0x5f].localDialogs.values()) {
        for (let i = 2; i < ds.length; i++) {
            if (ds[i].message.action === 3) {
                ds[i - 2].condition = ~(0x200 | (tornel.id - 1));
                ds[i - 1].condition = ~(0x200 | tornel.id);
                if (rom.spoiler) {
                    rom.spoiler.addTrade(tornel.id, tornel.messageName, 'Tornel');
                }
                break;
            }
        }
    }
    KensuInSwan.dialog(Swan_DanceHall)[0].message.mid = '13:00';
}
export function buildTradeInMap(rom) {
    const map = new Map();
    for (const item of rom.items) {
        for (const trade of item.trades) {
            map.set(item.itemUseData[trade].want & 0xff, item.id);
        }
    }
    return map;
}
//# sourceMappingURL=data:application/json;base64,