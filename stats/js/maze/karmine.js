import { Grid, E, S, N, W } from './grid.js';
import { OK } from '../maze/maze.js';
import { CaveShuffle } from './cave.js';
export function karmine(upstairs, main, kensu) {
    const u = new KarmineUpstairsShuffle(upstairs);
    const m = new KarmineMainShuffle(main, u);
    const k = new KarmineKensuShuffle(kensu, m);
    return [u, m, k];
}
export class KarmineUpstairsShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.patterns = [
            ['     ',
                ' >cc ',
                '   c ',
                '   b ',
                '   c '],
            ['     ',
                ' cc> ',
                ' c   ',
                ' b   ',
                ' c   '],
            ['   c ',
                '   b ',
                '   c ',
                ' >cc ',
                '     '],
            [' c   ',
                ' b   ',
                ' c   ',
                ' cc> ',
                '     ']
        ];
    }
    initialFill() {
        const pattern = this.random.pick(this.patterns);
        this.count = 3;
        const result = this.insertPattern(pattern, { top: 1, bottom: 1 });
        if (!result.ok)
            return result;
        this.addAllFixed();
        for (let i = 0; i < this.grid.data.length; i++) {
            if (this.grid.data[i] !== '>')
                continue;
            const s = this.grid.coord(i);
            this.stair = (s >>> 8) & 0xf0 | (s >>> 4) & 0xf;
        }
        return OK;
    }
    addEdges() {
        let retries = 10;
        while (this.count < this.size && retries) {
            if (!this.tryAdd())
                retries--;
        }
        return retries ? OK : { ok: false, fail: `addEdges` };
    }
    addEarlyFeatures() {
        let found = false;
        for (const s of this.random.ishuffle(this.grid.screens())) {
            if (this.extract(this.grid, s) !== ' c  c  c ')
                continue;
            this.grid.set(s + 0x808, 'b');
            found = true;
            break;
        }
        if (!found)
            return { ok: false, fail: `could not add bridge` };
        return super.addStairs(0, 2);
    }
    refine() { return OK; }
    addLateFeatures() { return OK; }
    addStairs() { return OK; }
}
export class KarmineMainShuffle extends CaveShuffle {
    constructor(location, upper) {
        super(location);
        this.location = location;
        this.upper = upper;
        this.maxAttempts = 200;
    }
    build() {
        if (this.upper.attempt < this.attempt) {
            this.upper.meta = undefined;
            this.upper.shuffle(this.random);
            if (!this.upper.meta)
                return { ok: false, fail: `dependent failed` };
        }
        return super.build();
    }
    initialFill() {
        const bridges = [];
        let stairDown = true;
        const upstairs = this.upper.meta;
        let stair = this.upper.stair;
        if (!upstairs.get(stair).isEmpty()) {
            stair += 16;
            stairDown = false;
        }
        if (stair == null)
            throw new Error('no stair found');
        for (const pos of upstairs.allPos()) {
            const scr = upstairs.get(pos);
            if (scr.hasFeature('overpass'))
                bridges.push(pos);
        }
        this.random.shuffle(bridges);
        let top = stair >>> 4;
        let left = stair & 0xf;
        let right = left;
        let bottom = top;
        for (const bridge of bridges) {
            const y = bridge >>> 4;
            const x = bridge & 0xf;
            top = Math.min(top, y);
            left = Math.min(left, x);
            right = Math.max(right, x);
            bottom = Math.max(bottom, y);
        }
        const height = bottom - top + 1;
        const width = right - left + 1;
        const origin = top << 4 | left;
        const outX = 1 + this.random.nextInt(this.w - width - 2);
        const outY = this.random.nextInt(this.h - height - (stairDown ? 1 : 0));
        const delta = (outY << 4 | outX) - origin;
        const stairRight = (stair & 0xf) - left < width / 2;
        stair += delta;
        for (let i = 0; i < bridges.length; i++) {
            bridges[i] += delta;
        }
        const stairTile = stairDown ? '    <  c ' : stairRight ? '    <c   ' : '   c<    ';
        if (!this.insertTile(bridges[0], '   cbc   ') ||
            !this.insertTile(bridges[1], '   cbc   ')) {
            throw new Error(`Could not insert bridge tile`);
        }
        if (!this.insertTile(stair, stairTile)) {
            const deltas = [-1, 1, 16, -16, 15, 17, -15, -17];
            let found = false;
            for (const ds of this.random.ishuffle(deltas)) {
                if (this.insertTile(stair + ds, stairTile)) {
                    stair += ds;
                    found = true;
                    break;
                }
            }
            if (!found)
                throw new Error(`Could not insert stair`);
        }
        this.stair = stair;
        this.addAllFixed();
        this.count = 3;
        const dx = stairRight ? 1 : -1;
        const ds = stairDown ? 0x10 : dx;
        if (!bridges.includes(stair + dx) &&
            !this.tryConnect(this.posToGrid(stair + ds, 0x808), this.posToGrid(bridges[0] - dx, 0x808), 'c', 10)) {
            return { ok: false, fail: `could not connect stair to bridge` };
        }
        if (!this.tryConnect(this.posToGrid(bridges[0] + dx, 0x808), this.posToGrid(bridges[1] + dx, 0x808), 'c', 10)) {
            return { ok: false, fail: `could not connect bridges` };
        }
        return OK;
    }
    addEdges() {
        let attempts = 100;
        while (this.count < this.size - 4 && attempts) {
            if (!this.tryAdd())
                attempts--;
        }
        return attempts ? OK : { ok: false, fail: `could not populate` };
    }
    refine() { return OK; }
    refineEdges() { return true; }
    addUnderpasses() { return true; }
    addArenas() {
        for (const s of this.random.ishuffle(this.grid.screens())) {
            if (!(s & 0xf000))
                continue;
            const c = s + 0x808;
            if (this.fixed.has(c) || this.grid.get(c))
                continue;
            if (this.grid.get(W(c, 2)) || this.grid.get(E(c, 2)))
                continue;
            if (this.grid.get(S(c, 2)) !== 'c')
                continue;
            if (!this.canSetAll(new Map([[S(c), 'c'], [c, 'a'],
                [N(c), 'c'], [N(c, 2), 'c']]))) {
                continue;
            }
            this.grid.set(S(c), 'c');
            this.grid.set(c, 'a');
            this.grid.set(N(c), 'c');
            this.fixed.add(c);
            this.fixed.add(N(c, 2));
            return true;
        }
        return false;
    }
    addStairs(up = 0, down = 0) {
        return super.addStairs(up - 1, down);
    }
    finishInternal() {
        if (!this.meta)
            throw new Error(`impossible`);
        this.upper.finish();
        super.finishInternal();
        const upperMeta = this.upper.meta;
        const upperPos = this.upper.stair;
        const mainPos = this.stair;
        if (upperPos != null && mainPos != null) {
            this.meta.attach(mainPos, upperMeta, upperPos, 'stair:up', 'stair:down');
        }
    }
}
export class KarmineKensuShuffle extends CaveShuffle {
    constructor(loc, main) {
        super(loc);
        this.main = main;
    }
    build() {
        if (this.main.attempt < this.attempt) {
            this.main.meta = undefined;
            this.main.shuffle(this.random);
            if (!this.main.meta)
                return { ok: false, fail: `dependent failed` };
        }
        return super.build();
    }
    findArena(meta) {
        for (const pos of meta.allPos()) {
            if (meta.get(pos).hasFeature('arena')) {
                return pos;
            }
        }
        throw new Error(`never found arena`);
    }
    initialFill() {
        const main = this.main.meta;
        const arena = this.findArena(main);
        const c = this.posToGrid(arena, 0x808);
        this.grid.set(c, 'a');
        this.grid.set(N(c), 'c');
        this.grid.set(S(c), 'c');
        this.fixed.add(c);
        this.fixed.add(S(c));
        this.fixed.add(S(c, 2));
        return OK;
    }
    addEdges() {
        let retries = 10;
        const size = 2 + this.random.nextInt(2);
        while (this.count < size && retries) {
            if (!this.tryAdd())
                retries--;
        }
        return retries ? OK : { ok: false, fail: `addEdges` };
    }
    refine() { return OK; }
    addLateFeatures() { return OK; }
    inferScreens() {
        const result = super.inferScreens();
        if (!result.ok)
            return result;
        const meta = result.value;
        const arena = this.findArena(meta);
        const main = this.main.meta;
        meta.set(arena + 0x0f, this.orig.tileset.unreachableVariant(main.get(arena + 0x0f)));
        meta.set(arena + 0x10, this.orig.tileset.unreachableVariant(main.get(arena + 0x10)));
        meta.set(arena + 0x11, this.orig.tileset.unreachableVariant(main.get(arena + 0x11)));
        return result;
    }
    finishInternal() {
        if (!this.meta)
            throw new Error(`impossible`);
        this.main.finish();
        const main = this.main.meta;
        const arena = this.findArena(this.meta);
        super.finishInternal();
        main.setExit(arena, 'seamless:up', [this.meta.id << 8 | arena, 'seamless:down']);
        this.meta.freeFlags = new Set(main.freeFlags);
    }
    reportFailure() {
        throw new Error(`Completely failed to shuffle Karmine Kensu map`);
    }
}
export class KarmineBasementShuffle extends CaveShuffle {
    constructor() {
        super(...arguments);
        this.looseRefine = true;
    }
    pickWidth() { return 8; }
    pickHeight() { return 5; }
    initialFill() {
        if (this.grid.height !== 5 || this.grid.width !== 8)
            throw new Error('bad size');
        Grid.writeGrid2d(this.grid, 0, KarmineBasementShuffle.PATTERN);
        this.count = 36;
        return OK;
    }
    addSpikes() {
        const dropped = this.random.nextInt(4);
        for (let y = 1; y < 10; y++) {
            for (let x = 0; x < 4; x++) {
                const i = 2 * x + 5 + y * 17;
                if (x === dropped) {
                    this.grid.data[i] = 'c';
                }
                else {
                    const c = this.grid.coord(i);
                    this.fixed.add(c);
                    if (y === 5) {
                        this.fixed.add(c + 8);
                        this.fixed.add(c + 16);
                        this.fixed.add(c - 8);
                        this.fixed.add(c - 16);
                    }
                }
            }
        }
        let stairs = 0;
        for (const c of this.random.ishuffle(this.grid.screens())) {
            if (stairs === 3)
                break;
            const mid = (c | 0x808);
            const up = N(mid);
            const up2 = N(mid, 2);
            const down = S(mid);
            const down2 = S(mid, 2);
            const left = W(mid);
            const right = E(mid);
            if (this.grid.get(mid) !== 'c')
                continue;
            if (this.grid.get(up) === 's')
                continue;
            if (this.grid.get(up2) === 's')
                continue;
            if (this.grid.get(down) === 's')
                continue;
            if (this.grid.get(down2) === 's')
                continue;
            const neighbors = [];
            const fixedNeighbors = [];
            for (const n of [down, left, right]) {
                if (this.grid.get(n) !== 'c')
                    continue;
                if (this.grid.get(2 * n - mid) === 's') {
                    fixedNeighbors.push(n);
                }
                else {
                    neighbors.push(n);
                }
            }
            if (fixedNeighbors.length > 1)
                continue;
            if (!neighbors.length && !fixedNeighbors.length)
                continue;
            while (neighbors.length + fixedNeighbors.length > 1) {
                if (neighbors.length + fixedNeighbors.length === 2 &&
                    !neighbors.includes(down) && !fixedNeighbors.includes(down))
                    break;
                const [n] = neighbors.splice(this.random.nextInt(neighbors.length), 1);
                this.grid.set(n, '');
            }
            this.grid.set(up, '');
            this.fixed.add(mid);
            this.grid.set(mid, '<');
            stairs++;
        }
        const partitions = new Set(this.grid.partition().values());
        return partitions.size === 1;
    }
    addStairs() { return OK; }
}
KarmineBasementShuffle.PATTERN = [
    '                 ',
    '   ccccccccccc   ',
    '   c c c c c c   ',
    ' ccc s s s s ccc ',
    ' c c s s s s c c ',
    ' ccccscscscscccc ',
    ' c c s s s s c c ',
    ' ccc s s s s ccc ',
    '   c c c c c c   ',
    '   ccccccccccc   ',
    '                 ',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FybWluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9qcy9tYXplL2thcm1pbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBd0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25FLE9BQU8sRUFBVSxFQUFFLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBSXhDLE1BQU0sVUFBVSxPQUFPLENBQUMsUUFBa0IsRUFBRSxJQUFjLEVBQ2xDLEtBQWU7SUFDckMsTUFBTSxDQUFDLEdBQUcsSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUMsR0FBRyxJQUFJLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQixDQUFDO0FBU0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFdBQVc7SUFBdkQ7O1FBQ1csYUFBUSxHQUFHO1lBQ2xCLENBQUMsT0FBTztnQkFDUCxPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxPQUFPLENBQUM7WUFDVCxDQUFDLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsT0FBTyxDQUFDO1lBQ1QsQ0FBQyxPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxPQUFPO2dCQUNQLE9BQU8sQ0FBQztZQUNULENBQUMsT0FBTztnQkFDUCxPQUFPO2dCQUNQLE9BQU87Z0JBQ1AsT0FBTztnQkFDUCxPQUFPLENBQUM7U0FBQyxDQUFDO0lB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b250ZW50IjpbImltcG9ydCB7IEdyaWQsIEdyaWRDb29yZCwgR3JpZEluZGV4LCBFLCBTLCBOLCBXIH0gZnJvbSAnLi9ncmlkLmpzJztcbmltcG9ydCB7IFJlc3VsdCwgT0sgfSBmcm9tICcuLi9tYXplL21hemUuanMnO1xuaW1wb3J0IHsgQ2F2ZVNodWZmbGUgfSBmcm9tICcuL2NhdmUuanMnO1xuaW1wb3J0IHsgUG9zLCBNZXRhbG9jYXRpb24gfSBmcm9tICcuLi9yb20vbWV0YWxvY2F0aW9uLmpzJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnLi4vcm9tL2xvY2F0aW9uLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGthcm1pbmUodXBzdGFpcnM6IExvY2F0aW9uLCBtYWluOiBMb2NhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGtlbnN1OiBMb2NhdGlvbik6IENhdmVTaHVmZmxlW10ge1xuICBjb25zdCB1ID0gbmV3IEthcm1pbmVVcHN0YWlyc1NodWZmbGUodXBzdGFpcnMpO1xuICBjb25zdCBtID0gbmV3IEthcm1pbmVNYWluU2h1ZmZsZShtYWluLCB1KTtcbiAgY29uc3QgayA9IG5ldyBLYXJtaW5lS2Vuc3VTaHVmZmxlKGtlbnN1LCBtKTtcbiAgcmV0dXJuIFt1LCBtLCBrXTtcbn1cblxuLy8gQmFzaWMgcGxhbjogdGhpcyBpcyBzaW1wbGUgZW5vdWdoIHRoYXQgd2UgX3Nob3VsZF8gYmUgYWJsZSB0byB3b3JrXG4vLyB3aXRoIHdoYXRldmVyIGhhcHBlbnMuICBEbyB0aGUgc2h1ZmZsZSBvbmNlIGFuZCB0aGVuIG5ldmVyIGxvb2sgYmFjay5cbi8vIEhPV0VWRVIsIGl0IHdvdWxkIGJlIG5pY2UgaWYgdGhlcmUgd2VyZSBhIHdheSB0byBkbyB0aGlzIG1vcmVcbi8vIGdlbmVyYWxseSBhbmQgYXV0b21hdGljYWxseSBmb3JjZSBhIHJldHJ5IGFmdGVyIHNvbWUgYW1vdW50IG9mIHRpbWUuXG4vLyBJZGVhbGx5LCB3ZSBkZWNvdXBsZSBfYWxsXyB0aGUgZmluaXNoZXMgZnJvbSBfYWxsXyB0aGUgc2h1ZmZsZXMgYW5kXG4vLyByZXRhaW4gdGhlIGdyaWQgYW5kIG1ldGFzY3JlZW5zIGFzIGFjY2Vzc2libGUgYnkgYWxsIGxhdGVyIHNodWZmbGVzLFxuLy8gYWxsb3dpbmcgZm9yIGNvbm5lY3RlZCByZXRyaWVzIGFzIG5lZWRlZC4gIEJ1dCBmb3Igbm93IHRoaXMgd2lsbCBkby5cbmV4cG9ydCBjbGFzcyBLYXJtaW5lVXBzdGFpcnNTaHVmZmxlIGV4dGVuZHMgQ2F2ZVNodWZmbGUge1xuICByZWFkb25seSBwYXR0ZXJucyA9IFtcbiAgICBbJyAgICAgJyxcbiAgICAgJyA+Y2MgJyxcbiAgICAgJyAgIGMgJyxcbiAgICAgJyAgIGIgJyxcbiAgICAgJyAgIGMgJ10sXG4gICAgWycgICAgICcsXG4gICAgICcgY2M+ICcsXG4gICAgICcgYyAgICcsXG4gICAgICcgYiAgICcsXG4gICAgICcgYyAgICddLFxuICAgIFsnICAgYyAnLFxuICAgICAnICAgYiAnLFxuICAgICAnICAgYyAnLFxuICAgICAnID5jYyAnLFxuICAgICAnICAgICAnXSxcbiAgICBbJyBjICAgJyxcbiAgICAgJyBiICAgJyxcbiAgICAgJyBjICAgJyxcbiAgICAgJyBjYz4gJyxcbiAgICAgJyAgICAgJ11dO1xuXG4gIHN0YWlyOiBQb3N8dW5kZWZpbmVkO1xuXG4gIGluaXRpYWxGaWxsKCk6IFJlc3VsdDx2b2lkPiB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMucmFuZG9tLnBpY2sodGhpcy5wYXR0ZXJucyk7XG4gICAgdGhpcy5jb3VudCA9IDM7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5pbnNlcnRQYXR0ZXJuKHBhdHRlcm4sIHt0b3A6IDEsIGJvdHRvbTogMX0pO1xuICAgIGlmICghcmVzdWx0Lm9rKSByZXR1cm4gcmVzdWx0O1xuICAgIHRoaXMuYWRkQWxsRml4ZWQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JpZC5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5ncmlkLmRhdGFbaV0gIT09ICc+JykgY29udGludWU7XG4gICAgICBjb25zdCBzID0gdGhpcy5ncmlkLmNvb3JkKGkgYXMgR3JpZEluZGV4KTtcbiAgICAgIHRoaXMuc3RhaXIgPSAocyA+Pj4gOCkgJiAweGYwIHwgKHMgPj4+IDQpICYgMHhmO1xuICAgIH1cbiAgICByZXR1cm4gT0s7XG4gIH1cblxuICBhZGRFZGdlcygpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGxldCByZXRyaWVzID0gMTA7XG4gICAgd2hpbGUgKHRoaXMuY291bnQgPCB0aGlzLnNpemUgJiYgcmV0cmllcykge1xuICAgICAgaWYgKCF0aGlzLnRyeUFkZCgpKSByZXRyaWVzLS07XG4gICAgfVxuICAgIHJldHVybiByZXRyaWVzID8gT0sgOiB7b2s6IGZhbHNlLCBmYWlsOiBgYWRkRWRnZXNgfTtcbiAgfVxuXG4gIGFkZEVhcmx5RmVhdHVyZXMoKTogUmVzdWx0PHZvaWQ+IHtcbiAgICAvLyBMb29rIGZvciBhIE4tUyBoYWxsd2F5IHRvIGFkZCBhIGJyaWRnZS5cbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5yYW5kb20uaXNodWZmbGUodGhpcy5ncmlkLnNjcmVlbnMoKSkpIHtcbiAgICAgIGlmICh0aGlzLmV4dHJhY3QodGhpcy5ncmlkLCBzKSAhPT0gJyBjICBjICBjICcpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5ncmlkLnNldChzICsgMHg4MDggYXMgR3JpZENvb3JkLCAnYicpO1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghZm91bmQpIHJldHVybiB7b2s6IGZhbHNlLCBmYWlsOiBgY291bGQgbm90IGFkZCBicmlkZ2VgfTtcbiAgICByZXR1cm4gc3VwZXIuYWRkU3RhaXJzKDAsIDIpO1xuICB9XG5cbiAgcmVmaW5lKCkgeyByZXR1cm4gT0s7IH1cbiAgYWRkTGF0ZUZlYXR1cmVzKCkgeyByZXR1cm4gT0s7IH1cbiAgYWRkU3RhaXJzKCkgeyByZXR1cm4gT0s7IH1cbn1cblxuZXhwb3J0IGNsYXNzIEthcm1pbmVNYWluU2h1ZmZsZSBleHRlbmRzIENhdmVTaHVmZmxlIHtcblxuICBtYXhBdHRlbXB0cyA9IDIwMDtcbiAgc3RhaXI6IFBvc3x1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgbG9jYXRpb246IExvY2F0aW9uLFxuICAgICAgICAgICAgICByZWFkb25seSB1cHBlcjogS2FybWluZVVwc3RhaXJzU2h1ZmZsZSkgeyBzdXBlcihsb2NhdGlvbik7IH1cblxuICBidWlsZCgpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGlmICh0aGlzLnVwcGVyLmF0dGVtcHQgPCB0aGlzLmF0dGVtcHQpIHtcbiAgICAgIHRoaXMudXBwZXIubWV0YSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMudXBwZXIuc2h1ZmZsZSh0aGlzLnJhbmRvbSk7XG4gICAgICBpZiAoIXRoaXMudXBwZXIubWV0YSkgcmV0dXJuIHtvazogZmFsc2UsIGZhaWw6IGBkZXBlbmRlbnQgZmFpbGVkYH07XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5idWlsZCgpO1xuICB9XG5cbiAgaW5pdGlhbEZpbGwoKTogUmVzdWx0PHZvaWQ+IHtcbiAgICAvLyBGaW5kIHRoZSBzdGFpciBmcm9tIFVwc3RhaXJzLCBjb3B5IHRoZSBicmlkZ2VzIG92ZXIuXG4gICAgY29uc3QgYnJpZGdlczogUG9zW10gPSBbXTtcbiAgICBsZXQgc3RhaXJEb3duID0gdHJ1ZTtcbiAgICBjb25zdCB1cHN0YWlycyA9IHRoaXMudXBwZXIubWV0YSE7XG4gICAgbGV0IHN0YWlyID0gdGhpcy51cHBlci5zdGFpciE7XG4gICAgLy8gT2Zmc2V0IGlmIGl0J3Mgbm90IHRoZSBzaW5nbGUtdGlsZSB1cC1kb3duIHN0YWlycy5cbiAgICBpZiAoIXVwc3RhaXJzLmdldChzdGFpcikuaXNFbXB0eSgpKSB7XG4gICAgICBzdGFpciArPSAxNjtcbiAgICAgIHN0YWlyRG93biA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RhaXIgPT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdubyBzdGFpciBmb3VuZCcpO1xuICAgIGZvciAoY29uc3QgcG9zIG9mIHVwc3RhaXJzLmFsbFBvcygpKSB7XG4gICAgICBjb25zdCBzY3IgPSB1cHN0YWlycy5nZXQocG9zKTtcbiAgICAgIGlmIChzY3IuaGFzRmVhdHVyZSgnb3ZlcnBhc3MnKSkgYnJpZGdlcy5wdXNoKHBvcyk7XG4gICAgfVxuICAgIHRoaXMucmFuZG9tLnNodWZmbGUoYnJpZGdlcyk7XG5cbiAgICAvLyBSZWxhdGl2aXplXG4gICAgbGV0IHRvcCA9IHN0YWlyID4+PiA0O1xuICAgIGxldCBsZWZ0ID0gc3RhaXIgJiAweGY7XG4gICAgbGV0IHJpZ2h0ID0gbGVmdDtcbiAgICBsZXQgYm90dG9tID0gdG9wO1xuICAgIGZvciAoY29uc3QgYnJpZGdlIG9mIGJyaWRnZXMpIHtcbiAgICAgIGNvbnN0IHkgPSBicmlkZ2UgPj4+IDQ7XG4gICAgICBjb25zdCB4ID0gYnJpZGdlICYgMHhmO1xuICAgICAgdG9wID0gTWF0aC5taW4odG9wLCB5KTtcbiAgICAgIGxlZnQgPSBNYXRoLm1pbihsZWZ0LCB4KTtcbiAgICAgIHJpZ2h0ID0gTWF0aC5tYXgocmlnaHQsIHgpO1xuICAgICAgYm90dG9tID0gTWF0aC5tYXgoYm90dG9tLCB5KTtcbiAgICB9XG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wICsgMTtcbiAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdCArIDE7XG4gICAgY29uc3Qgb3JpZ2luID0gdG9wIDw8IDQgfCBsZWZ0O1xuXG4gICAgLy8gUGxhY2UgdGhlIGJyaWRnZXMgYW5kIHN0YWlyIGluIGEgcmFuZG9tIGxvY2F0aW9uLlxuICAgIGNvbnN0IG91dFggPSAxICsgdGhpcy5yYW5kb20ubmV4dEludCh0aGlzLncgLSB3aWR0aCAtIDIpO1xuICAgIGNvbnN0IG91dFkgPSB0aGlzLnJhbmRvbS5uZXh0SW50KHRoaXMuaCAtIGhlaWdodCAtIChzdGFpckRvd24gPyAxIDogMCkpO1xuICAgIGNvbnN0IGRlbHRhID0gKG91dFkgPDwgNCB8IG91dFgpIC0gb3JpZ2luO1xuICAgIGNvbnN0IHN0YWlyUmlnaHQgPSAoc3RhaXIgJiAweGYpIC0gbGVmdCA8IHdpZHRoIC8gMjtcbiAgICBzdGFpciArPSBkZWx0YTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJyaWRnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJyaWRnZXNbaV0gKz0gZGVsdGE7XG4gICAgfVxuICAgIGNvbnN0IHN0YWlyVGlsZSA9XG4gICAgICAgIHN0YWlyRG93biA/ICcgICAgPCAgYyAnIDogc3RhaXJSaWdodCA/ICcgICAgPGMgICAnIDogJyAgIGM8ICAgICc7XG4gICAgaWYgKCF0aGlzLmluc2VydFRpbGUoYnJpZGdlc1swXSwgJyAgIGNiYyAgICcpIHx8XG4gICAgICAgICF0aGlzLmluc2VydFRpbGUoYnJpZGdlc1sxXSwgJyAgIGNiYyAgICcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBpbnNlcnQgYnJpZGdlIHRpbGVgKTtcbiAgICB9XG4gICAgLy8gUHJvYmxlbTogaXQncyBwb3NzaWJsZSB0aGUgc3RhaXIgZG9lc24ndCBmaXQuICBJZiB0aGF0J3MgdGhlIGNhc2UsXG4gICAgLy8gZ2l2ZSB1cCBhbmQgdHJ5IGp1c3QgbW92aW5nIGl0IHNvbWV3aGVyZSBlbHNlLiAgSWRlYWxseSB3ZSdkIGluc3RlYWRcbiAgICAvLyBqdXN0IGluaXRpYXRlIGEgcmV0cnkgb24gdGhlIGRlcGVuZGVudCBsZXZlbCwgYnV0IHRoYXQgc3RydWN0dXJlXG4gICAgLy8gaXMgbm90IHlldCBpbiBwbGFjZS4uLlxuICAgIGlmICghdGhpcy5pbnNlcnRUaWxlKHN0YWlyLCBzdGFpclRpbGUpKSB7XG4gICAgICBjb25zdCBkZWx0YXMgPSBbLTEsIDEsIDE2LCAtMTYsIDE1LCAxNywgLTE1LCAtMTddO1xuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IGRzIG9mIHRoaXMucmFuZG9tLmlzaHVmZmxlKGRlbHRhcykpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5zZXJ0VGlsZShzdGFpciArIGRzLCBzdGFpclRpbGUpKSB7XG4gICAgICAgICAgc3RhaXIgKz0gZHM7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kKSB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBpbnNlcnQgc3RhaXJgKTtcbiAgICB9XG4gICAgdGhpcy5zdGFpciA9IHN0YWlyO1xuICAgIC8vIHRoaXMuZml4ZWQuYWRkKHRoaXMucG9zVG9HcmlkKHN0YWlyLCAweDgwOCkpO1xuICAgIC8vIHRoaXMuZml4ZWQuYWRkKHRoaXMucG9zVG9HcmlkKGJyaWRnZXNbMF0sIDB4ODA4KSk7XG4gICAgLy8gdGhpcy5maXhlZC5hZGQodGhpcy5wb3NUb0dyaWQoYnJpZGdlc1sxXSwgMHg4MDgpKTtcbiAgICB0aGlzLmFkZEFsbEZpeGVkKCk7XG4gICAgdGhpcy5jb3VudCA9IDM7XG5cbiAgICBjb25zdCBkeCA9IHN0YWlyUmlnaHQgPyAxIDogLTE7XG4gICAgY29uc3QgZHMgPSBzdGFpckRvd24gPyAweDEwIDogZHg7XG4gICAgaWYgKCFicmlkZ2VzLmluY2x1ZGVzKHN0YWlyICsgZHgpICYmXG4gICAgICAgICF0aGlzLnRyeUNvbm5lY3QodGhpcy5wb3NUb0dyaWQoc3RhaXIgKyBkcywgMHg4MDgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zVG9HcmlkKGJyaWRnZXNbMF0gLSBkeCwgMHg4MDgpLCAnYycsIDEwKSkge1xuICAgICAgcmV0dXJuIHtvazogZmFsc2UsIGZhaWw6IGBjb3VsZCBub3QgY29ubmVjdCBzdGFpciB0byBicmlkZ2VgfTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnRyeUNvbm5lY3QodGhpcy5wb3NUb0dyaWQoYnJpZGdlc1swXSArIGR4LCAweDgwOCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NUb0dyaWQoYnJpZGdlc1sxXSArIGR4LCAweDgwOCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ2MnLCAxMCkpIHtcbiAgICAgIHJldHVybiB7b2s6IGZhbHNlLCBmYWlsOiBgY291bGQgbm90IGNvbm5lY3QgYnJpZGdlc2B9O1xuICAgIH1cbiAgICByZXR1cm4gT0s7XG4gIH1cblxuICBhZGRFZGdlcygpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGxldCBhdHRlbXB0cyA9IDEwMDtcbiAgICB3aGlsZSAodGhpcy5jb3VudCA8IHRoaXMuc2l6ZSAtIDQgJiYgYXR0ZW1wdHMpIHtcbiAgICAgIGlmICghdGhpcy50cnlBZGQoKSkgYXR0ZW1wdHMtLTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dGVtcHRzID8gT0sgOiB7b2s6IGZhbHNlLCBmYWlsOiBgY291bGQgbm90IHBvcHVsYXRlYH07XG4gIH1cblxuICByZWZpbmUoKSB7IHJldHVybiBPSzsgfVxuICByZWZpbmVFZGdlcygpIHsgcmV0dXJuIHRydWU7IH1cbiAgYWRkVW5kZXJwYXNzZXMoKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgYWRkQXJlbmFzKCk6IGJvb2xlYW4ge1xuICAgIC8vIFRyeSB0byBhZGQga2Vuc3UncyBhcmVuYS4gIExvb2sgZm9yIGEgcGxhY2Ugd2UgY2FuIGFkZCAnIGMgfCBhIHwgYyAnLlxuICAgIC8vIERvbid0IGJvdGhlciBhZGRpbmcgdGhlIHN0YWlyIG9uIHRoZSBvdGhlciBzaWRlLCBzaW5jZSBpdCBkb2Vzbid0XG4gICAgLy8gYWN0dWFsbHkgbWF0dGVyIGhlcmUuICBCdXQgdG8gbWFrZSB0aGUgc2VhbWxlc3Mgd29yaywgd2UgZG8gbmVlZCB0b1xuICAgIC8vIGhhdmUgX3NwYWNlXyBmb3IgaXQuXG4gICAgZm9yIChjb25zdCBzIG9mIHRoaXMucmFuZG9tLmlzaHVmZmxlKHRoaXMuZ3JpZC5zY3JlZW5zKCkpKSB7XG4gICAgICBpZiAoIShzICYgMHhmMDAwKSkgY29udGludWU7IC8vIHRvcCByb3cgbm90IGFsbG93ZWRcbiAgICAgIGNvbnN0IGMgPSBzICsgMHg4MDggYXMgR3JpZENvb3JkO1xuICAgICAgaWYgKHRoaXMuZml4ZWQuaGFzKGMpIHx8IHRoaXMuZ3JpZC5nZXQoYykpIGNvbnRpbnVlO1xuICAgICAgaWYgKHRoaXMuZ3JpZC5nZXQoVyhjLCAyKSkgfHwgdGhpcy5ncmlkLmdldChFKGMsIDIpKSkgY29udGludWU7XG4gICAgICBpZiAodGhpcy5ncmlkLmdldChTKGMsIDIpKSAhPT0gJ2MnKSBjb250aW51ZTtcbiAgICAgIGlmICghdGhpcy5jYW5TZXRBbGwobmV3IE1hcChbW1MoYyksICdjJ10sIFtjLCAnYSddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbTihjKSwgJ2MnXSwgW04oYywgMiksICdjJ11dKSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBBZGQgdGhlIGFyZW5hIHdpdGggYSBkZWFkIGVuZC5cbiAgICAgIHRoaXMuZ3JpZC5zZXQoUyhjKSwgJ2MnKTtcbiAgICAgIHRoaXMuZ3JpZC5zZXQoYywgJ2EnKTtcbiAgICAgIHRoaXMuZ3JpZC5zZXQoTihjKSwgJ2MnKTtcbiAgICAgIC8vdGhpcy5ncmlkLnNldChOKGMsIDIpLCAnYycpO1xuICAgICAgdGhpcy5maXhlZC5hZGQoYyk7XG4gICAgICB0aGlzLmZpeGVkLmFkZChOKGMsIDIpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBhZGRTdGFpcnModXAgPSAwLCBkb3duID0gMCkge1xuICAgIHJldHVybiBzdXBlci5hZGRTdGFpcnModXAgLSAxLCBkb3duKTtcbiAgfVxuXG4gIGZpbmlzaEludGVybmFsKCkge1xuICAgIGlmICghdGhpcy5tZXRhKSB0aHJvdyBuZXcgRXJyb3IoYGltcG9zc2libGVgKTtcbiAgICB0aGlzLnVwcGVyLmZpbmlzaCgpO1xuICAgIC8vIC8vIFRoZSBzZWFtbGVzcyBleGl0IGlzIHByb2JsZW1hdGljIGJlZm9yZSB0aGUgb3RoZXIgc2lkZSBtb3Zlcy5cbiAgICAvLyAvLyBTbyBkZWxldGUgaXQgZm9yIG5vdywgYW5kIGFkZCBpdCBiYWNrIGxhdGVyLlxuICAgIC8vIGZvciAoY29uc3QgW3BvcywgdHlwZV0gb2YgdGhpcy5vcmlnLmV4aXRzKCkpIHtcbiAgICAvLyAgIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ3NlYW1sZXNzJykpIHRoaXMub3JpZy5kZWxldGVFeGl0KHBvcywgdHlwZSk7XG4gICAgLy8gfVxuICAgIHN1cGVyLmZpbmlzaEludGVybmFsKCk7XG4gICAgLy8gTWFrZSBzdXJlIHRoZSByaWdodCBzdGFpcnMgY29ubmVjdCB0byB0aGUgdXBwZXIgZmxvb3IuXG4gICAgY29uc3QgdXBwZXJNZXRhID0gdGhpcy51cHBlci5tZXRhITtcbiAgICBjb25zdCB1cHBlclBvcyA9IHRoaXMudXBwZXIuc3RhaXIhO1xuICAgIGNvbnN0IG1haW5Qb3MgPSB0aGlzLnN0YWlyITtcbiAgICBpZiAodXBwZXJQb3MgIT0gbnVsbCAmJiBtYWluUG9zICE9IG51bGwpIHtcbiAgICAgIHRoaXMubWV0YS5hdHRhY2gobWFpblBvcywgdXBwZXJNZXRhLCB1cHBlclBvcywgJ3N0YWlyOnVwJywgJ3N0YWlyOmRvd24nKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEthcm1pbmVLZW5zdVNodWZmbGUgZXh0ZW5kcyBDYXZlU2h1ZmZsZSB7XG5cbiAgY29uc3RydWN0b3IobG9jOiBMb2NhdGlvbiwgcmVhZG9ubHkgbWFpbjogS2FybWluZU1haW5TaHVmZmxlKSB7IHN1cGVyKGxvYyk7IH1cblxuICBidWlsZCgpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGlmICh0aGlzLm1haW4uYXR0ZW1wdCA8IHRoaXMuYXR0ZW1wdCkge1xuICAgICAgdGhpcy5tYWluLm1ldGEgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLm1haW4uc2h1ZmZsZSh0aGlzLnJhbmRvbSk7XG4gICAgICBpZiAoIXRoaXMubWFpbi5tZXRhKSByZXR1cm4ge29rOiBmYWxzZSwgZmFpbDogYGRlcGVuZGVudCBmYWlsZWRgfTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmJ1aWxkKCk7XG4gIH1cblxuICBmaW5kQXJlbmEobWV0YTogTWV0YWxvY2F0aW9uKTogUG9zIHtcbiAgICBmb3IgKGNvbnN0IHBvcyBvZiBtZXRhLmFsbFBvcygpKSB7XG4gICAgICBpZiAobWV0YS5nZXQocG9zKS5oYXNGZWF0dXJlKCdhcmVuYScpKSB7XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgbmV2ZXIgZm91bmQgYXJlbmFgKTtcbiAgfVxuXG4gIGluaXRpYWxGaWxsKCk6IFJlc3VsdDx2b2lkPiB7XG4gICAgY29uc3QgbWFpbiA9IHRoaXMubWFpbi5tZXRhITtcbiAgICBjb25zdCBhcmVuYSA9IHRoaXMuZmluZEFyZW5hKG1haW4pO1xuICAgIGNvbnN0IGMgPSB0aGlzLnBvc1RvR3JpZChhcmVuYSwgMHg4MDgpO1xuICAgIHRoaXMuZ3JpZC5zZXQoYywgJ2EnKTtcbiAgICB0aGlzLmdyaWQuc2V0KE4oYyksICdjJyk7XG4gICAgdGhpcy5ncmlkLnNldChTKGMpLCAnYycpO1xuICAgIHRoaXMuZml4ZWQuYWRkKGMpO1xuICAgIHRoaXMuZml4ZWQuYWRkKFMoYykpO1xuICAgIHRoaXMuZml4ZWQuYWRkKFMoYywgMikpO1xuICAgIHJldHVybiBPSztcbiAgfVxuXG4gIGFkZEVkZ2VzKCk6IFJlc3VsdDx2b2lkPiB7XG4gICAgbGV0IHJldHJpZXMgPSAxMDtcbiAgICBjb25zdCBzaXplID0gMiArIHRoaXMucmFuZG9tLm5leHRJbnQoMik7XG4gICAgd2hpbGUgKHRoaXMuY291bnQgPCBzaXplICYmIHJldHJpZXMpIHtcbiAgICAgIGlmICghdGhpcy50cnlBZGQoKSkgcmV0cmllcy0tO1xuICAgIH1cbiAgICByZXR1cm4gcmV0cmllcyA/IE9LIDoge29rOiBmYWxzZSwgZmFpbDogYGFkZEVkZ2VzYH07XG4gIH1cblxuICByZWZpbmUoKSB7IHJldHVybiBPSzsgfVxuICBhZGRMYXRlRmVhdHVyZXMoKSB7IHJldHVybiBPSzsgfVxuXG4gIGluZmVyU2NyZWVucygpOiBSZXN1bHQ8TWV0YWxvY2F0aW9uPiB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuaW5mZXJTY3JlZW5zKCk7XG4gICAgaWYgKCFyZXN1bHQub2spIHJldHVybiByZXN1bHQ7XG4gICAgY29uc3QgbWV0YSA9IHJlc3VsdC52YWx1ZTtcbiAgICBjb25zdCBhcmVuYSA9IHRoaXMuZmluZEFyZW5hKG1ldGEpO1xuICAgIC8vIE1vdmUgdGhlIG5laWdoYm9ycyAoaW5jbHVkaW5nIGtpdHR5IGNvcm5lcilcbiAgICBjb25zdCBtYWluID0gdGhpcy5tYWluLm1ldGEhO1xuICAgIG1ldGEuc2V0KGFyZW5hICsgMHgwZixcbiAgICAgICAgICAgICB0aGlzLm9yaWcudGlsZXNldC51bnJlYWNoYWJsZVZhcmlhbnQobWFpbi5nZXQoYXJlbmEgKyAweDBmKSkpO1xuICAgIG1ldGEuc2V0KGFyZW5hICsgMHgxMCxcbiAgICAgICAgICAgICB0aGlzLm9yaWcudGlsZXNldC51bnJlYWNoYWJsZVZhcmlhbnQobWFpbi5nZXQoYXJlbmEgKyAweDEwKSkpO1xuICAgIG1ldGEuc2V0KGFyZW5hICsgMHgxMSxcbiAgICAgICAgICAgICB0aGlzLm9yaWcudGlsZXNldC51bnJlYWNoYWJsZVZhcmlhbnQobWFpbi5nZXQoYXJlbmEgKyAweDExKSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmaW5pc2hJbnRlcm5hbCgpIHtcbiAgICBpZiAoIXRoaXMubWV0YSkgdGhyb3cgbmV3IEVycm9yKGBpbXBvc3NpYmxlYCk7XG4gICAgdGhpcy5tYWluLmZpbmlzaCgpO1xuICAgIGNvbnN0IG1haW4gPSB0aGlzLm1haW4ubWV0YSE7XG4gICAgY29uc3QgYXJlbmEgPSB0aGlzLmZpbmRBcmVuYSh0aGlzLm1ldGEpO1xuICAgIHN1cGVyLmZpbmlzaEludGVybmFsKCk7XG4gICAgbWFpbi5zZXRFeGl0KGFyZW5hLCAnc2VhbWxlc3M6dXAnLFxuICAgICAgICAgICAgICAgICBbdGhpcy5tZXRhLmlkIDw8IDggfCBhcmVuYSwgJ3NlYW1sZXNzOmRvd24nXSk7XG4gICAgLy8gTWFrZSBzdXJlIHRoZXNlIHNoYXJlIGEgZmxhZywgaW4gY2FzZSB0aGUgbmVpZ2hib3IgaXMgYSB3YWxsLlxuICAgIHRoaXMubWV0YS5mcmVlRmxhZ3MgPSBuZXcgU2V0KG1haW4uZnJlZUZsYWdzKTtcbiAgfVxuXG4gIHJlcG9ydEZhaWx1cmUoKSB7XG4gICAgLy8gVGhpcyBpcyBmYXRhbCBiZWNhdXNlIG9mIHRoZSBzZWFtbGVzcyBleGl0IHRoYXQgd29uJ3Qgd29yay5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBsZXRlbHkgZmFpbGVkIHRvIHNodWZmbGUgS2FybWluZSBLZW5zdSBtYXBgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgS2FybWluZUJhc2VtZW50U2h1ZmZsZSBleHRlbmRzIENhdmVTaHVmZmxlIHtcbiAgbG9vc2VSZWZpbmUgPSB0cnVlO1xuXG4gIHBpY2tXaWR0aCgpIHsgcmV0dXJuIDg7IH1cbiAgcGlja0hlaWdodCgpIHsgcmV0dXJuIDU7IH1cblxuICBpbml0aWFsRmlsbCgpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIC8vIFNldCB1cCB0aGUgYmFzaWMgZnJhbWV3b3JrOlxuICAgIC8vICAqIGEgc2luZ2xlIHJvdyBvZiBjcm9zcy1jdXR0aW5nIGNvcnJpZG9yLCB3aXRoIHRocmVlIG9mIHRoZVxuICAgIC8vICAgIGZvdXIgY29sdW1ucyBhcyBzcGlrZXMsIGFuZCBmdWxsIGNvbm5lY3Rpb25zIGFyb3VuZCB0aGVcbiAgICAvLyAgICBlZGdlcy5cbiAgICBpZiAodGhpcy5ncmlkLmhlaWdodCAhPT0gNSB8fCB0aGlzLmdyaWQud2lkdGggIT09IDgpIHRocm93IG5ldyBFcnJvcignYmFkIHNpemUnKTtcbiAgICBHcmlkLndyaXRlR3JpZDJkKHRoaXMuZ3JpZCwgMCBhcyBHcmlkQ29vcmQsIEthcm1pbmVCYXNlbWVudFNodWZmbGUuUEFUVEVSTik7XG4gICAgdGhpcy5jb3VudCA9IDM2O1xuICAgIHJldHVybiBPSztcbiAgfVxuXG4gIGFkZFNwaWtlcygpOiBib29sZWFuIHtcbiAgICAvLyBDaGFuZ2Ugb25lIGNvbHVtbiBvZiBzcGlrZXMgaW50byBub3JtYWwgY2F2ZSxcbiAgICAvLyBtYXJrIHRoZSByZXN0IGFzIGZpeGVkLlxuICAgIGNvbnN0IGRyb3BwZWQgPSB0aGlzLnJhbmRvbS5uZXh0SW50KDQpO1xuICAgIGZvciAobGV0IHkgPSAxOyB5IDwgMTA7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCA0OyB4KyspIHtcbiAgICAgICAgY29uc3QgaSA9IDIgKiB4ICsgNSArIHkgKiAxNztcbiAgICAgICAgaWYgKHggPT09IGRyb3BwZWQpIHtcbiAgICAgICAgICB0aGlzLmdyaWQuZGF0YVtpXSA9ICdjJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBjID0gdGhpcy5ncmlkLmNvb3JkKGkgYXMgR3JpZEluZGV4KTtcbiAgICAgICAgICB0aGlzLmZpeGVkLmFkZChjKTtcbiAgICAgICAgICBpZiAoeSA9PT0gNSkge1xuICAgICAgICAgICAgdGhpcy5maXhlZC5hZGQoYyArIDggYXMgR3JpZENvb3JkKTtcbiAgICAgICAgICAgIHRoaXMuZml4ZWQuYWRkKGMgKyAxNiBhcyBHcmlkQ29vcmQpO1xuICAgICAgICAgICAgdGhpcy5maXhlZC5hZGQoYyAtIDggYXMgR3JpZENvb3JkKTtcbiAgICAgICAgICAgIHRoaXMuZml4ZWQuYWRkKGMgLSAxNiBhcyBHcmlkQ29vcmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdyBwaWNrIHJhbmRvbSBwbGFjZXMgZm9yIHRoZSBzdGFpcnMuXG4gICAgbGV0IHN0YWlycyA9IDA7XG4gICAgZm9yIChjb25zdCBjIG9mIHRoaXMucmFuZG9tLmlzaHVmZmxlKHRoaXMuZ3JpZC5zY3JlZW5zKCkpKSB7XG4gICAgICBpZiAoc3RhaXJzID09PSAzKSBicmVhaztcbiAgICAgIGNvbnN0IG1pZCA9IChjIHwgMHg4MDgpIGFzIEdyaWRDb29yZDtcbiAgICAgIGNvbnN0IHVwID0gTihtaWQpO1xuICAgICAgY29uc3QgdXAyID0gTihtaWQsIDIpO1xuICAgICAgY29uc3QgZG93biA9IFMobWlkKTtcbiAgICAgIGNvbnN0IGRvd24yID0gUyhtaWQsIDIpO1xuICAgICAgY29uc3QgbGVmdCA9IFcobWlkKTtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gRShtaWQpO1xuICAgICAgaWYgKHRoaXMuZ3JpZC5nZXQobWlkKSAhPT0gJ2MnKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLmdyaWQuZ2V0KHVwKSA9PT0gJ3MnKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLmdyaWQuZ2V0KHVwMikgPT09ICdzJykgY29udGludWU7XG4gICAgICBpZiAodGhpcy5ncmlkLmdldChkb3duKSA9PT0gJ3MnKSBjb250aW51ZTtcbiAgICAgIGlmICh0aGlzLmdyaWQuZ2V0KGRvd24yKSA9PT0gJ3MnKSBjb250aW51ZTtcbiAgICAgIGNvbnN0IG5laWdoYm9ycyA9IFtdO1xuICAgICAgY29uc3QgZml4ZWROZWlnaGJvcnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgbiBvZiBbZG93biwgbGVmdCwgcmlnaHRdKSB7XG4gICAgICAgIGlmICh0aGlzLmdyaWQuZ2V0KG4pICE9PSAnYycpIGNvbnRpbnVlO1xuICAgICAgICBpZiAodGhpcy5ncmlkLmdldCgyICogbiAtIG1pZCBhcyBHcmlkQ29vcmQpID09PSAncycpIHtcbiAgICAgICAgICBmaXhlZE5laWdoYm9ycy5wdXNoKG4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5laWdoYm9ycy5wdXNoKG4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZml4ZWROZWlnaGJvcnMubGVuZ3RoID4gMSkgY29udGludWU7XG4gICAgICBpZiAoIW5laWdoYm9ycy5sZW5ndGggJiYgIWZpeGVkTmVpZ2hib3JzLmxlbmd0aCkgY29udGludWU7XG4gICAgICB3aGlsZSAobmVpZ2hib3JzLmxlbmd0aCArIGZpeGVkTmVpZ2hib3JzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKG5laWdoYm9ycy5sZW5ndGggKyBmaXhlZE5laWdoYm9ycy5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgICAgICFuZWlnaGJvcnMuaW5jbHVkZXMoZG93bikgJiYgIWZpeGVkTmVpZ2hib3JzLmluY2x1ZGVzKGRvd24pKSBicmVhaztcbiAgICAgICAgY29uc3QgW25dID0gbmVpZ2hib3JzLnNwbGljZSh0aGlzLnJhbmRvbS5uZXh0SW50KG5laWdoYm9ycy5sZW5ndGgpLCAxKTtcbiAgICAgICAgdGhpcy5ncmlkLnNldChuLCAnJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmdyaWQuc2V0KHVwLCAnJyk7XG4gICAgICB0aGlzLmZpeGVkLmFkZChtaWQpO1xuICAgICAgdGhpcy5ncmlkLnNldChtaWQsICc8Jyk7XG4gICAgICBzdGFpcnMrKztcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgZXZlcnl0aGluZyBpcyBzdGlsbCBhY2Nlc3NpYmxlLlxuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBuZXcgU2V0KHRoaXMuZ3JpZC5wYXJ0aXRpb24oKS52YWx1ZXMoKSk7XG4gICAgcmV0dXJuIHBhcnRpdGlvbnMuc2l6ZSA9PT0gMTtcbiAgfVxuXG4gIGFkZFN0YWlycygpIHsgcmV0dXJuIE9LOyB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IFBBVFRFUk4gPSBbXG4gICAgJyAgICAgICAgICAgICAgICAgJyxcbiAgICAnICAgY2NjY2NjY2NjY2MgICAnLFxuICAgICcgICBjIGMgYyBjIGMgYyAgICcsXG4gICAgJyBjY2MgcyBzIHMgcyBjY2MgJyxcbiAgICAnIGMgYyBzIHMgcyBzIGMgYyAnLFxuICAgICcgY2NjY3Njc2NzY3NjY2NjICcsXG4gICAgJyBjIGMgcyBzIHMgcyBjIGMgJyxcbiAgICAnIGNjYyBzIHMgcyBzIGNjYyAnLFxuICAgICcgICBjIGMgYyBjIGMgYyAgICcsXG4gICAgJyAgIGNjY2NjY2NjY2NjICAgJyxcbiAgICAnICAgICAgICAgICAgICAgICAnLFxuICBdO1xufVxuIl19