import { Spawn } from '../rom/location.js';
import { MessageId } from '../rom/messageid.js';
import { GlobalDialog, LocalDialog } from '../rom/npc.js';
import { ShopType } from '../rom/shop.js';
import { hex } from '../rom/util.js';
import { assert } from '../util.js';
import { Monster } from '../rom/monster.js';
import { Patterns } from '../rom/pattern.js';
const [] = [hex];
function write(arr, start, ...data) {
    let j = start;
    let i = 0;
    let value;
    while ((value = data[i++]) != null) {
        if (typeof value === 'number') {
            arr[j++] = value;
        }
        else if (typeof value === 'string') {
            for (const c of value) {
                arr[j++] = c.charCodeAt(0);
            }
        }
        else {
            throw new Error('bad data');
        }
    }
}
export function deterministicPreParse(prg) {
    prg[0x1a594] = 0xff;
    prg[0x1cdc5] = 0xa8;
    prg[0x1a176] = 0xff;
    prg[0x1a84c] = 0xff;
    prg[0x1d843] = 0xa0;
    prg[0x1e06b] &= 7;
    prg[0x1e06f] &= 7;
    prg[0x1e073] &= 7;
    prg[0x1e077] &= 7;
    prg[0x1e07b] &= 7;
    prg[0x1e084] &= 7;
    prg[0x1e09b] &= 7;
    prg[0x1e0b9] &= 7;
    prg[0x1e105] = 0x2f;
    prg[0x1e277] = 0x00;
    prg[0x1e366] = 0x40;
    prg[0x1e371] = 0x00;
    prg[0x1e387] = 0x00;
    prg[0x1e391] = 0x00;
    write(prg, 0x1a168, 0x33, 0x33);
    write(prg, 0x1a48e, 0x33, 0x33);
    prg[0x19bb1] = 0x70;
    prg[0x19bb5] = 0x71;
    prg[0x19a77] = 0x72;
    prg[0x19deb] = 0x73;
    prg[0x1a045] = 0x74;
    prg[0x1a0e1] = 0x75;
    prg[0x1a0e5] = 0x76;
    prg[0x1a0e9] = 0x77;
    prg[0x1a605] = 0x78;
    prg[0x1a3c1] = 0x79;
    prg[0x1a3c5] = 0x7a;
    prg[0x1a3c9] = 0x7b;
    write(prg, 0x1e0b7, 0xc0, 0x00);
    write(prg, 0x1e32a, 0xc0, 0x00);
    write(prg, 0x1e330, 0xc0, 0x00);
    write(prg, 0x1e336, 0xc0, 0x00);
    write(prg, 0x1e0e0, 0xc0, 0x00);
    write(prg, 0x1e0e6, 0xc0, 0x00);
    prg[0x1c803] = 0x00;
    write(prg, 0x1c80d, 0xa2, 0xb3);
    prg[0x1aa86] = 0xfe;
    write(prg, 0x3d6d5, 0x25, 0x29, 0x39, 0x3a, 0x3b, 0x47, 0x3c, 0x3e, 0x84, 0x46, 0xb2, 0x42, 0xb4, 0x41, 0xff);
    for (const addr of [0x38757, 0x38777, 0x3877b, 0x38797, 0x3879b,
        0x387db, 0x387df, 0x387fb, 0x387ff, 0x3881b, 0x3881f,
        0x38865, 0x38885, 0x38889, 0x388a5]) {
        prg[addr] |= 1;
    }
    write(prg, 0x2656e, "Simea", 0x10, 0, "     ", 0x10, 0);
}
export function deterministic(rom, flags) {
    addZombieWarp(rom);
    removeWarpTriggers(rom);
    consolidateItemGrants(rom);
    addMezameTrigger(rom);
    normalizeSwords(rom, flags);
    fixFlyableWalls(rom);
    fixMonsterTerrain(rom);
    fixCrystalis(rom);
    fixOpelStatue(rom);
    fixCoinSprites(rom);
    fixChests(rom);
    preventBossSoftlocks(rom);
    makeBraceletsProgressive(rom);
    adjustGoaFortressTriggers(rom);
    preventNpcDespawns(rom, flags);
    leafElderInSabreHeals(rom);
    if (flags.requireHealedDolphinToRide())
        requireHealedDolphin(rom);
    if (flags.saharaRabbitsRequireTelepathy())
        requireTelepathyForDeo(rom);
    adjustItemNames(rom, flags);
    alarmFluteIsKeyItem(rom, flags);
    brokahanaWantsMado1(rom);
    if (flags.teleportOnThunderSword()) {
        teleportOnThunderSword(rom);
        rom.townWarp.thunderSwordWarp = [rom.locations.Shyron.id, 0x41];
    }
    else {
        noTeleportOnThunderSword(rom);
    }
    undergroundChannelLandBridge(rom);
    if (flags.fogLampNotRequired())
        fogLampNotRequired(rom, flags);
    evilSpiritIslandRequiresDolphin(rom);
    simplifyInvisibleChests(rom);
    addCordelWestTriggers(rom, flags);
    if (flags.disableRabbitSkip())
        fixRabbitSkip(rom);
    if (flags.disableFlightStatueSkip())
        fixFlightStatueSkip(rom);
    if (flags.disableRageSkip())
        patchLimeTreeLake(rom);
    fixReverseWalls(rom);
    if (flags.chargeShotsOnly())
        disableStabs(rom);
    if (flags.orbsOptional())
        orbsOptional(rom);
    if (flags.noBowMode())
        noBowMode(rom);
    patchTooManyItemsMessage(rom);
    if (flags.hardcoreMode())
        hardcoreMode(rom);
    if (flags.shouldUpdateHud()) {
        useNewStatusBarGraphics(rom);
        rom.writeMonsterNames = true;
    }
    if (flags.shouldColorSwordElements())
        useElementSwordColors(rom);
    if (flags.hasStatTracking())
        updateGraphicsForStatTracking(rom);
}
function updateGraphicsForStatTracking(rom) {
    rom.prg[0x22eea] = 0x28;
    const page = 0x54 << 6;
    const tileOffset = 0x29;
    for (let i = 0; i < 4; i++) {
        rom.patterns.set(page, tileOffset + i, Patterns.BLANK_TILES[i]);
    }
    const startAddr = 0x23004;
    const endAddr = 0x23304;
    const blankOffset = 0x80 - 1;
    for (let addr = startAddr; addr < endAddr; addr++) {
        if (rom.prg[addr] >= 0x29 && rom.prg[addr] <= 0x2d) {
            rom.prg[addr] += blankOffset;
        }
    }
    const origBlankSquare = 0x2a;
    const newBlankOffset = 0xa0;
    for (let addr = startAddr; addr < endAddr; addr += 0xc0) {
        rom.prg[addr + newBlankOffset] = origBlankSquare;
    }
    const newTileOffsetMapping = new Map([
        [0x42, newBlankOffset],
    ]);
    const draygon2StartAddr = 0x22c85;
    const draygon2EndAddr = 0x22cd2;
    for (let addr = draygon2StartAddr; addr < draygon2EndAddr; addr++) {
        if (newTileOffsetMapping.has(rom.prg[addr]))
            rom.prg[addr] = newTileOffsetMapping.get(rom.prg[addr]);
    }
    for (let addr = startAddr; addr < endAddr; addr += 0xc0) {
        for (let offset = 0x7b; offset <= 0x7f; offset++)
            if (rom.prg[addr + offset] == origBlankSquare + blankOffset)
                rom.prg[addr + offset] = origBlankSquare;
    }
    const replacePalette = 0x3;
    const withPalette = 0x2;
    const theendAttrOffset = 0x233f8;
    const theendAttrEnd = 0x23438;
    for (let addr = theendAttrOffset; addr < theendAttrEnd; addr++) {
        let newAttr = rom.prg[addr];
        for (let j = 0; j < 8; j += 2) {
            const oldPal = replacePalette << j;
            const newPal = withPalette << j;
            if ((newAttr & oldPal) == oldPal) {
                newAttr = (newAttr & (0xff ^ (0b11 << j))) | newPal;
            }
        }
        rom.prg[addr] = newAttr;
    }
    const theendPaletteOffset = 0x23438;
    const replacedPaletteAddr = 0x4 * replacePalette;
    const hudPalette = [0x0f, 0x30, 0x0f, 0x11];
    for (let i = 0; i < hudPalette.length; i++) {
        rom.prg[theendPaletteOffset + replacedPaletteAddr + i] = hudPalette[i];
    }
    rom.prg[theendPaletteOffset + withPalette * 4 + 0x3] = 0x8;
    const theendSpriteXStartAddr = 0x236da;
    const theendSpriteEndAddr = 0x23746;
    for (let addr = theendSpriteXStartAddr; addr < theendSpriteEndAddr; addr += 4) {
        rom.prg[addr] += 0x80;
    }
}
function useElementSwordColors(rom) {
    function swapTiles(start, thunder) {
        for (let addr = 0; addr <= 0xa; addr++) {
            if (addr === 8)
                continue;
            const p = rom.patterns.get(addr | start);
            const orig = [...p.pixels];
            for (let i = 0; i < p.pixels.length; i++) {
                p.pixels[i] = orig[i ^ 8];
                if ((i >>> 3) === thunder)
                    p.pixels[i] |= orig[i];
            }
        }
    }
    swapTiles(0x1090);
    swapTiles(0x10d0);
    swapTiles(0x1110);
    swapTiles(0x1150);
    swapTiles(0x1190);
}
function useNewStatusBarGraphics(rom) {
    const page = 0x38 << 6;
    rom.patterns.set(page, 0x0, Patterns.HUD_LF);
    rom.patterns.set(page, 0x1, Patterns.HUD_PW);
    rom.patterns.set(page, 0x2, Patterns.HUD_EY);
    rom.patterns.set(page, 0x3, Patterns.HUD_LV);
    rom.patterns.set(page, 0x4, Patterns.HUD_DL);
    rom.patterns.set(page, 0x5, Patterns.HUD_MP);
    rom.patterns.set(page, 0x6, Patterns.HUD_EX);
    rom.patterns.set(page, 0x1a, Patterns.HUD_CLOSE_LEFT);
    rom.patterns.set(page, 0x1b, Patterns.HUD_CLOSE_RIGHT);
}
function consolidateItemGrants(rom) {
    rom.items.GlowingLamp.itemUseData[0].message.action = 0x0b;
}
function addMezameTrigger(rom) {
    const trigger = rom.nextFreeTrigger('mezame');
    trigger.used = true;
    trigger.conditions = [~rom.flags.AlwaysTrue.id];
    trigger.message = MessageId.of({ action: 4 });
    trigger.flags = [rom.flags.AlwaysTrue.id];
    const mezame = rom.locations.MezameShrine;
    mezame.spawns.push(Spawn.of({ tile: 0x88, type: 2, id: trigger.id }));
}
function removeWarpTriggers(rom) {
    const warpTriggers = new Set([
        0x81,
        0x8b,
        0x90,
        0x99,
        0xa6,
        0xa7,
        0xa8,
        0xa9,
        0xaa,
        0xab,
        0xac,
        rom.allocatedTriggers.get('zombie warp'),
    ]);
    for (const location of rom.locations) {
        if (!location.used)
            continue;
        location.spawns = location.spawns.filter(spawn => !spawn.isTrigger() || !warpTriggers.has(spawn.id));
    }
}
function normalizeSwords(rom, flags) {
    rom.objects[0x10].atk = 3;
    rom.objects[0x11].atk = 6;
    rom.objects[0x12].atk = 8;
    rom.objects[0x18].atk = 3;
    rom.objects[0x13].atk = 5;
    rom.objects[0x19].atk = 5;
    rom.objects[0x17].atk = 7;
    rom.objects[0x1a].atk = 7;
    rom.objects[0x14].atk = 3;
    rom.objects[0x15].atk = 6;
    rom.objects[0x16].atk = 8;
    rom.objects[0x1c].atk = 3;
    rom.objects[0x1d].atk = 3;
    rom.objects[0x1e].atk = 5;
    rom.objects[0x1b].atk = 7;
    rom.objects[0x1f].atk = 7;
    if (flags.slowDownTornado()) {
        const tornado = rom.objects[0x12];
        tornado.speed = 0x07;
        tornado.data[0x0c] = 0x60;
    }
}
function preventBossSoftlocks(rom) {
    const trigger = rom.trigger(0xa0);
    trigger.used = true;
    trigger.conditions = [];
    trigger.flags = [];
    trigger.message = MessageId.of({ part: 0, index: 0, action: 0x15 });
    rom.objects[0x5e].data[0xd] = 0xfe;
    rom.items.InsectFlute.itemUseData[0].flags = [rom.flags.UsedInsectFlute.id];
}
function fixOpelStatue(rom) {
    rom.items.OpelStatue.selectedItemValue = 0;
}
function fixCoinSprites(rom) {
    for (const page of [0x60, 0x64, 0x65, 0x66, 0x67, 0x68,
        0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6f]) {
        for (const pat of [0, 1, 2]) {
            rom.patterns.set(page << 6, pat, rom.patterns.get(0x5e << 6, pat).pixels);
        }
    }
    rom.objects[0x0c].metasprite = 0xa9;
}
function fixReverseWalls(rom) {
    for (const t in [0x04, 0x05, 0x08, 0x09]) {
        rom.tileEffects[0xbc - 0xb3].effects[t] = 0x18;
        rom.tileEffects[0xb5 - 0xb3].effects[t] = 0x18;
    }
}
function undergroundChannelLandBridge(rom) {
    const { tiles } = rom.screens[0xa1];
    tiles[0x28] = 0x9f;
    tiles[0x37] = 0x23;
    tiles[0x38] = 0x23;
    tiles[0x39] = 0x21;
    tiles[0x47] = 0x8d;
    tiles[0x48] = 0x8f;
    tiles[0x56] = 0x99;
    tiles[0x57] = 0x9a;
    tiles[0x58] = 0x8c;
}
function fogLampNotRequired(rom, flags) {
    const { flags: { AlwaysTrue, InjuredDolphin, FogLamp, KensuInCabin, ReturnedFogLamp }, items: { ShellFlute }, locations: { BoatHouse, Portoa_FishermanHouse }, npcs, } = rom;
    const requireHealed = flags.requireHealedDolphinToRide();
    ShellFlute.itemUseData[0].want =
        requireHealed ? InjuredDolphin.id : AlwaysTrue.id;
    npcs.KensuInCabin.data[0] = 0x67;
    npcs.KensuInCabin.localDialogs.get(-1)[0].message.action = 0x0a;
    npcs.KensuInCabin.localDialogs.get(-1)[0].flags = [];
    npcs.KensuInCabin.spawnConditions.set(BoatHouse.id, [ReturnedFogLamp.id, ~KensuInCabin.id]);
    npcs.Fisherman.spawnConditions.set(Portoa_FishermanHouse.id, [FogLamp.id]);
    rom.itemGets[0x64].flags = [];
    rom.itemGets[0x67].copyFrom(rom.itemGets[0x64]);
}
function fixChests(rom) {
    for (const loc of rom.locations) {
        for (const s of loc.spawns) {
            if (s.isChest())
                s.timed = false;
        }
    }
}
function adjustGoaFortressTriggers(rom) {
    const l = rom.locations;
    l.GoaFortress_Kelbesque.spawns[0].x -= 16;
    l.GoaFortress_Zebu.spawns.splice(1, 1);
    l.GoaFortress_Tornel.spawns.splice(2, 1);
    l.GoaFortress_Asina.spawns.splice(2, 1);
    l.GoaFortress_Kensu.spawns.splice(3, 1);
    l.GoaFortress_Kensu.spawns.splice(1, 1);
}
function alarmFluteIsKeyItem(rom, flags) {
    const { items: { AlarmFlute }, flags: { TalkedToZebuStudent, ZebuStudent }, locations: { MezameShrine, Leaf_StudentHouse, WaterfallCave4, ZebuCave }, npcs: { WindmillGuard, Zebu }, } = rom;
    rom.itemGets[0x31].inventoryRowStart = 0x20;
    AlarmFlute.unique = true;
    AlarmFlute.basePrice = 0;
    if (flags.zebuStudentGivesItem()) {
        WindmillGuard.data[1] = 0x31;
    }
    else {
        WindmillGuard.data[1] = 0xff;
        const dialog = WindmillGuard.dialog(Leaf_StudentHouse)[0];
        dialog.condition = ~TalkedToZebuStudent.id;
        dialog.flags.push(TalkedToZebuStudent.id);
        replace(Zebu.spawns(ZebuCave), ZebuStudent.id, TalkedToZebuStudent.id);
        MezameShrine.spawns.push(Spawn.of({ screen: 0, tile: 0x9b, type: 2, id: 0x31 }));
        MezameShrine.spawns.push(Spawn.of({ screen: 0, tile: 0x95, type: 2, id: 0x49 }));
        rom.itemGets[0x49].itemId = rom.items.MedicalHerb.id;
    }
    const replacements = [
        [0x21, 0.72],
        [0x1f, 0.9],
    ];
    let j = 0;
    for (const shop of rom.shops) {
        if (shop.type !== ShopType.TOOL)
            continue;
        for (let i = 0, len = shop.contents.length; i < len; i++) {
            if (shop.contents[i] !== 0x31)
                continue;
            const [item, priceRatio] = replacements[(j++) % replacements.length];
            shop.contents[i] = item;
            if (rom.shopDataTablesAddress) {
                shop.prices[i] = Math.round(shop.prices[i] * priceRatio);
            }
        }
    }
    rom.itemGets[0x5b].itemId = 0x1d;
    WaterfallCave4.spawn(0x19).id = 0x10;
}
function brokahanaWantsMado1(rom) {
    const { flags: { Karmine, Mado1 }, npcs: { Brokahana } } = rom;
    const dialog = assert(Brokahana.localDialogs.get(-1))[0];
    if (dialog.condition !== ~Karmine.id) {
        throw new Error(`Bad brokahana condition: ${dialog.condition}`);
    }
    dialog.condition = ~Mado1.id;
}
function requireHealedDolphin(rom) {
    const { flags: { InjuredDolphin, ShellFlute }, npcs: { Fisherman, FishermanDaughter }, } = rom;
    Fisherman.spawnConditions.set(0xd6, [ShellFlute.id, InjuredDolphin.id]);
    const daughterDialog = FishermanDaughter.localDialogs.get(-1);
    daughterDialog.unshift(daughterDialog[0].clone());
    daughterDialog[0].condition = ~InjuredDolphin.id;
    daughterDialog[1].condition = ~ShellFlute.id;
}
function requireTelepathyForDeo(rom) {
    const { flags: { Telepathy }, npcs: { Deo, SaharaBunny }, } = rom;
    SaharaBunny.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x12]));
    Deo.globalDialogs.push(GlobalDialog.of(~Telepathy.id, [0x1a, 0x13]));
}
function teleportOnThunderSword(rom) {
    const { flags: { WarpShyron }, } = rom;
    rom.itemGets[0x03].flags.push(WarpShyron.id);
}
function noTeleportOnThunderSword(rom) {
    rom.itemGets[0x03].acquisitionAction.action = 0x16;
}
function adjustItemNames(rom, flags) {
    if (flags.leatherBootsGiveSpeed()) {
        const leatherBoots = rom.items[0x2f];
        leatherBoots.menuName = 'Speed Boots';
        leatherBoots.messageName = 'Speed Boots';
        if (flags.changeGasMaskToHazmatSuit()) {
            const gasMask = rom.items[0x29];
            gasMask.menuName = 'Hazmat Suit';
            gasMask.messageName = 'Hazmat Suit';
        }
    }
    for (let i = 0x05; i < 0x0c; i += 2) {
        rom.items[i].menuName = rom.items[i].menuName.replace('Ball', 'Orb');
        rom.items[i].messageName = rom.items[i].messageName.replace('Ball', 'Orb');
    }
}
function makeBraceletsProgressive(rom) {
    const { flags: { BallOfWind, TornadoBracelet }, npcs: { Tornel }, } = rom;
    const vanilla = Tornel.localDialogs.get(0x21);
    const patched = [
        vanilla[0],
        vanilla[2],
        vanilla[2].clone(),
        vanilla[1],
    ];
    patched[1].condition = ~TornadoBracelet.id;
    patched[2].condition = ~BallOfWind.id;
    patched[3].condition = ~0;
    Tornel.localDialogs.set(0x21, patched);
}
function simplifyInvisibleChests(rom) {
    const { CordelPlainEast, KirisaMeadow, UndergroundChannel } = rom.locations;
    for (const location of [CordelPlainEast, KirisaMeadow, UndergroundChannel]) {
        for (const spawn of location.spawns) {
            if (spawn.isChest())
                spawn.data[2] |= 0x20;
        }
    }
}
function addCordelWestTriggers(rom, flags) {
    const { CordelPlainEast, CordelPlainWest } = rom.locations;
    for (const spawn of CordelPlainEast.spawns) {
        if (spawn.isChest() || (flags.disableTeleportSkip() && spawn.isTrigger())) {
            CordelPlainWest.spawns.push(spawn.clone());
        }
    }
}
function fixRabbitSkip(rom) {
    for (const spawn of rom.locations.MtSabreNorth_Main.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x86) {
            if (spawn.x === 0x740) {
                spawn.x += 16;
                spawn.y += 16;
            }
        }
    }
}
function fixFlightStatueSkip(rom) {
    const oldHitbox = rom.hitboxes[rom.objects.guardianStatueMissile.hitbox];
    const newHitbox = rom.hitboxes[6];
    rom.objects.guardianStatueMissile.hitbox = newHitbox.id;
    newHitbox.x0 = oldHitbox.x0 - 6;
    newHitbox.w = oldHitbox.w + 12;
    newHitbox.y0 = oldHitbox.y0 - 2;
    newHitbox.h = oldHitbox.h + 4;
}
function patchTooManyItemsMessage(rom) {
    rom.messages.parts[0x20][0x0f].text += '\nItem: [:ITEM:]';
}
function addZombieWarp(rom) {
    const { flags: { WarpZombie }, locations: { ZombieTown }, } = rom;
    rom.flags.insertZombieWarpFlag();
    const message = rom.messages.parts[0x21][0];
    message.text = [
        ' {1a:Leaf}      {16:Brynmaer} {1d:Oak} ',
        '{0c:Nadare}\'s  {1e:Portoa}   {14:Amazones} ',
        '{19:Joel}      Zombie   {20:Swan} ',
        '{23:Shyron}    {18:Goa}      {21:Sahara}',
    ].join('\n');
    const trigger = rom.nextFreeTrigger('zombie warp');
    trigger.used = true;
    trigger.conditions = [];
    trigger.message = MessageId.of({});
    trigger.flags = [WarpZombie.id];
    for (const spawn of ZombieTown.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8a)
            spawn.id = trigger.id;
    }
    rom.townWarp.locations.splice(7, 0, ZombieTown.id);
    if (rom.townWarp.locations.pop() !== 0xff)
        throw new Error('unexpected');
}
function evilSpiritIslandRequiresDolphin(rom) {
    rom.trigger(0x8a).conditions = [~rom.flags.CurrentlyRidingDolphin.id];
    rom.messages.parts[0x1d][0x10].text = `The cave entrance appears
to be underwater. You'll
need to swim.`;
}
function leafElderInSabreHeals(rom) {
    const leafElder = rom.npcs[0x0d];
    const summitDialog = leafElder.localDialogs.get(0x35)[0];
    summitDialog.message.action = 0x17;
}
function patchLimeTreeLake(rom) {
    rom.metatilesets.lime.getTile(0x7c).setEffects(6);
    rom.metatilesets.lime.getTile(0x7f).setEffects(6);
    rom.metatilesets.lime.getTile(0x7b).setTiles([0x7f, 0x7f, 0x7f, 0x7f])
        .setAttrs(0).setEffects(6);
    rom.screens[0x74].set2d(0x90, [
        [0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, null, null,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b],
        [0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, null, null,
            0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b, 0x7b],
    ]);
}
function preventNpcDespawns(rom, opts) {
    function remove(arr, elem) {
        const index = arr.indexOf(elem);
        if (index < 0)
            throw new Error(`Could not find element ${elem} in ${arr}`);
        arr.splice(index, 1);
    }
    function removeIf(arr, pred) {
        const index = arr.findIndex(pred);
        if (index < 0)
            throw new Error(`Could not find element in ${arr}`);
        arr.splice(index, 1);
    }
    const { locations: { BoatHouse, Brynmaer, Crypt_Draygon2, Joel_Shed, Leaf_ElderHouse, MtSabreNorth_SummitCave, MtSabreWest_Upper, PortoaPalace_ThroneRoom, Portoa_PalaceEntrance, Portoa_AsinaRoom, Portoa_FortuneTeller, Shyron_Temple, StomHouse, Swan_DanceHall, Swan_Tavern, WindmillCave, WaterfallCave4, WaterfallValleyNorth, ZebuCave, ZombieTown_HouseBasement, }, items: { GlowingLamp, KeyToPrison, LovePendant, StatueOfOnyx, }, npcs: { Akahana, AkahanaInBrynmaer, Asina, AztecaInShyron, Clark, Draygon, FortuneTeller, Kensu, KensuInCabin, KensuInSwan, LeafElder, LeafRabbit, OakChild, OakElder, OakMother, PortoaPalaceFrontGuard, PortoaQueen, PortoaThroneRoomBackDoorGuard, Rage, Stom, StonedAkahana, Tornel, WindmillGuard, Zebu, }, flags, } = rom;
    Kensu.localDialogs.delete(Swan_Tavern.id);
    KensuInSwan.link(Kensu.id);
    KensuInSwan.used = true;
    KensuInSwan.data = [...Kensu.data];
    Kensu.data[0] = GlowingLamp.id;
    Swan_DanceHall.spawns.find(s => s.isNpc() && s.id === Kensu.id).id =
        KensuInSwan.id;
    LovePendant.itemUseData[0].want = 0x100 | KensuInSwan.id;
    StonedAkahana.linkDialog(Akahana.id);
    AkahanaInBrynmaer.used = true;
    AkahanaInBrynmaer.link(Akahana.id);
    AkahanaInBrynmaer.data = [...Akahana.data];
    Brynmaer.spawns.find(s => s.isNpc() && s.id === Akahana.id).id =
        AkahanaInBrynmaer.id;
    StatueOfOnyx.itemUseData[0].want = 0x100 | AkahanaInBrynmaer.id;
    LeafElder.dialog(Leaf_ElderHouse)
        .splice(0, 0, ...LeafElder.dialog(Leaf_ElderHouse).splice(2, 1));
    LeafRabbit.dialog()[2].condition = flags.RescuedLeafElder.id;
    LeafRabbit.dialog()[2].flags.push(flags.TalkedToLeafRabbit.id);
    LeafRabbit.dialog()[3].flags.push(flags.TalkedToLeafRabbit.id);
    WindmillGuard.spawns(WindmillCave)[1] =
        ~flags.WindmillGuardAlarmFluteTradein.id;
    remove(Akahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    remove(StonedAkahana.spawns(WaterfallCave4), ~flags.BehindWhirlpool.id);
    function reverseDialog(ds) {
        ds.reverse();
        for (let i = 0; i < ds.length; i++) {
            const next = ds[i + 1];
            ds[i].condition = next ? ~next.condition : ~0;
        }
    }
    ;
    for (let i = 0; i < 4; i++) {
        const dlg = OakElder.dialog()[i];
        if (dlg.condition !== rom.flags.OakElder.id)
            dlg.message.action = 0x03;
    }
    (() => {
        const [killedInsect, gotItem, getItem, findChild] = OakMother.dialog();
        findChild.condition = ~flags.RescuedChild.id;
        gotItem.condition = ~0;
        OakMother.dialog().splice(0, 4, findChild, getItem, killedInsect, gotItem);
    })();
    for (const i of [0x20, 0x21, 0x22, 0x7c, 0x7d]) {
        reverseDialog(rom.npcs[i].dialog());
    }
    OakChild.dialog().unshift(...OakChild.dialog().splice(1, 1));
    PortoaThroneRoomBackDoorGuard.spawnConditions.set(PortoaPalace_ThroneRoom.id, [~flags.QueenNotInThroneRoom.id, ~flags.MesiaRecording.id]);
    PortoaPalaceFrontGuard.dialog()[1].condition = flags.MesiaRecording.id;
    PortoaQueen.dialog()[3].condition = flags.SwordOfWater.id;
    PortoaQueen.dialog()[3].message.action = 0x03;
    PortoaQueen.dialog()[4].flags.push(flags.PortoaQueenGoingAway.id);
    PortoaQueen.spawns(PortoaPalace_ThroneRoom)[1] = ~flags.MesiaRecording.id;
    PortoaQueen.spawns(Portoa_AsinaRoom)[0] = flags.MesiaRecording.id;
    PortoaQueen.dialog()[1].condition = flags.MesiaRecording.id;
    FortuneTeller.spawns(Portoa_FortuneTeller)[1] = ~flags.MesiaRecording.id;
    Clark.spawnConditions.set(ZombieTown_HouseBasement.id, [~flags.Clark.id]);
    Clark.spawnConditions.set(Joel_Shed.id, [flags.Clark.id]);
    Zebu.localDialogs.set(ZebuCave.id, [
        LocalDialog.of(~flags.TalkedToZebuInCave.id, [0x00, 0x1a], [flags.TalkedToZebuInCave.id]),
        LocalDialog.of(flags.LeafVillagersRescued.id, [0x00, 0x1d]),
        LocalDialog.of(flags.LeafAbduction.id, [0x00, 0x1c]),
        LocalDialog.of(flags.ZebuAtWindmill.id, [0x00, 0x1d]),
        LocalDialog.of(flags.UsedWindmillKey.id, [0x00, 0x1b, 0x03]),
        LocalDialog.of(~0, [0x00, 0x1d]),
    ]);
    remove(Zebu.spawns(ZebuCave), ~flags.BehindWhirlpool.id);
    Tornel.spawnConditions.delete(MtSabreWest_Upper.id);
    Stom.spawnConditions.delete(StomHouse.id);
    remove(Asina.spawns(Portoa_AsinaRoom), ~flags.CalmedAngrySea.id);
    const guard2 = rom.npcs[0x34];
    guard2.spawnConditions.set(PortoaPalace_ThroneRoom.id, [flags.MesiaRecording.id,
        ~flags.PortoaQueen.id]);
    guard2.localDialogs.set(Portoa_PalaceEntrance.id, guard2.localDialogs.get(-1));
    guard2.data[0] = rom.items.FluteOfLime.id;
    const guard2Message = rom.messages.alloc();
    guard2Message.text = "The queen left this for you.";
    guard2.localDialogs.set(PortoaPalace_ThroneRoom.id, [
        LocalDialog.of(~flags.PortoaQueen.id, [guard2Message.part,
            guard2Message.id, 0x03]),
        LocalDialog.of(~0, [0x0a, 0x0e]),
    ]);
    PortoaPalace_ThroneRoom.spawns.push(Spawn.of({ yt: 3, xt: 12, type: 1,
        patternBank: 1,
        id: guard2.id }));
    KensuInCabin.spawnConditions.set(BoatHouse.id, [~flags.AbleToRideDolphin.id,
        flags.ReturnedFogLamp.id]);
    KensuInCabin.dialog()[0].message.action = 0x02;
    AztecaInShyron.spawns(Shyron_Temple).push(~flags.ShyronMassacre.id);
    rom.trigger(0x82).conditions.push(~flags.ShyronMassacre.id);
    Rage.dialog()[0].condition = flags.SwordOfWater.id;
    Draygon.spawnConditions.set(Crypt_Draygon2.id, [~flags.Draygon2.id]);
    Zebu.dialog(Shyron_Temple)
        .unshift(...Zebu.dialog(Shyron_Temple).splice(1, 1));
    rom.trigger(0x80).conditions = [
        ~flags.ShyronMassacre.id,
        flags.TalkedToZebuInShyron.id,
        flags.SwordOfThunder.id,
    ];
    rom.trigger(0x81).conditions = [];
    if (opts.barrierRequiresCalmSea()) {
        rom.trigger(0x84).conditions.push(flags.CalmedAngrySea.id);
    }
    rom.trigger(0x8c).conditions.push(flags.TalkedToZebuInCave.id);
    rom.trigger(0x8d).used = false;
    for (const spawn of MtSabreNorth_SummitCave.spawns) {
        if (spawn.isTrigger() && spawn.id === 0x8d)
            spawn.id = 0xb2;
    }
    removeIf(WaterfallValleyNorth.spawns, spawn => spawn.isTrigger() && spawn.id === 0x8d);
    rom.trigger(0xb2).conditions.push(flags.Kelbesque1.id);
    rom.trigger(0xb2).flags.push(~flags.LeafVillagersCurrentlyAbducted.id, ~flags.LeafElderCurrentlyAbducted.id, flags.LeafVillagersRescued.id);
    rom.trigger(0x8c).conditions.push(~flags.Kelbesque1.id);
    rom.trigger(0x86).conditions.push(~flags.Kelbesque1.id);
    remove(KeyToPrison.itemUseData[0].flags, ~flags.LeafVillagersCurrentlyAbducted.id);
    replace(rom.trigger(0xbb).conditions, ~flags.Rage.id, ~flags.MesiaRecording.id);
}
function disableStabs(rom) {
    for (const o of [0x08, 0x09, 0x27]) {
        rom.objects[o].collisionPlane = 0;
    }
    rom.npcs.Brokahana.data[0] = rom.items.FruitOfLime.id;
}
function orbsOptional(rom) {
    for (const obj of [0x10, 0x14, 0x18, 0x1d]) {
        rom.objects[obj].terrainSusceptibility &= ~0x04;
        rom.objects[obj].level = 2;
    }
}
function noBowMode(rom) {
    const { flags: { UsedBowOfTruth }, locations: { Crypt_Draygon2, MezameShrine }, } = rom;
    let trigger;
    for (const spawn of MezameShrine.spawns) {
        if (spawn.isTrigger() && spawn.tile === 0x88) {
            trigger = rom.trigger(spawn.id);
        }
    }
    if (!trigger)
        throw new Error(`Could not find start trigger`);
    trigger.flags.push(UsedBowOfTruth.id);
    rom.tileEffects[0xb9 - 0xb3].effects[0x58] = 0;
    MezameShrine.meta.setExit(0, 'door', [Crypt_Draygon2.meta.id << 8 | 0x10, 'edge:bottom']);
}
function fixCrystalis(rom) {
    rom.objects[0x33].elements = 0xf;
}
function fixFlyableWalls(rom) {
    rom.tileEffects[0xb5 - 0xb3].effects[0x74] = 6;
    rom.tileEffects[0xb6 - 0xb3].effects[0x46] = 6;
}
function fixMonsterTerrain(rom) {
    for (const obj of rom.objects) {
        if (!(obj instanceof Monster))
            continue;
        if (obj.isProjectile() || obj.isBoss() || obj.isFlyer())
            continue;
        if (obj === rom.objects.mimic)
            continue;
        obj.terrainSusceptibility |= 0x3;
    }
}
function replace(array, old, replacement) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] !== old)
            continue;
        array[i] = replacement;
        return;
    }
    throw new Error(`Could not find ${old} in ${array.join(',')}`);
}
function hardcoreMode(rom) {
    for (const loc of rom.locations) {
        loc.checkpoint = loc.saveable = false;
    }
}
//# sourceMappingURL=data:application/json;base64,