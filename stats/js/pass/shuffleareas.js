import { Location } from '../rom/location.js';
import { DefaultMap } from '../util.js';
import { UnionFind } from '../unionfind.js';
const connMap = new Map([
    ['stair:up', 'C'],
    ['edge:top', 'N'],
    ['edge:left', 'W'],
    ['edge:right', 'E'],
    ['cave', 'C'],
    ['door', 'C'],
    ['door2', 'C'],
    ['door3', 'C'],
    ['fortress', 'F'],
]);
const connInverse = new Map([
    ['N', 'S'],
    ['S', 'N'],
    ['E', 'W'],
    ['W', 'E'],
    ['C', 'X'],
    ['X', 'C'],
    ['F', 'O'],
    ['O', 'F'],
]);
function makeExit(loc, [pos, type, [revLocPos, revType]]) {
    let conn = connMap.get(type) || connInverse.get(connMap.get(revType));
    let shuffle = false;
    const area = loc.id.toString(16);
    const key = (loc.id << 8 | pos).toString(16) + ' ' + type;
    const revLoc = loc.rom.locations[revLocPos >>> 8];
    const revPos = revLocPos & 0xff;
    const revKey = revLocPos.toString(16) + ' ' + revType;
    const revArea = revLoc.id.toString(16);
    const reverse = {
        loc: revLoc, pos: revPos, type: revType,
        area: revArea, key: revKey,
        reverse: null, origRev: null,
        get conn() { return connInverse.get(conn); },
        set conn(c) { conn = connInverse.get(c); },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    const exit = {
        loc, pos, type, key, reverse, area, origRev: reverse,
        get conn() { return conn; },
        set conn(c) { conn = c; },
        get shuffle() { return shuffle; },
        set shuffle(s) {
            if (s && !conn)
                throw new Error(`shuffle without conn`);
            shuffle = s;
        },
    };
    reverse.reverse = reverse.origRev = exit;
    return exit;
}
function matchExit(exit, finder) {
    if (typeof finder === 'string')
        return exit.type === finder;
    if (typeof finder === 'number')
        return exit.pos === finder;
    if (finder instanceof Location)
        return exit.reverse.loc === finder;
    return finder.every(f => matchExit(exit, f));
}
export function shuffleAreas(rom, flags, random) {
    if (!flags.shuffleAreas())
        return;
    const { locations: loc } = rom;
    const exits = new Map();
    const exitsByLocation = new DefaultMap(() => []);
    for (const location of rom.locations) {
        for (const exitSpec of location.meta.exits()) {
            if (location === loc.CordelPlainEast && (exitSpec[0] & 0x0f) < 5)
                continue;
            if (location === loc.CordelPlainWest && (exitSpec[0] & 0x0f) > 4)
                continue;
            if (location.isTower())
                continue;
            const exit = makeExit(location, exitSpec);
            if (exit.loc === loc.Portoa_FortuneTeller)
                continue;
            if (exit.reverse.loc === loc.Portoa_FortuneTeller)
                continue;
            if (exits.has(exit.key))
                continue;
            if (exits.has(exit.reverse.key)) {
                throw new Error(`Inconsistent exits: ${exit.key} | ${exit.reverse.key}`);
            }
            exits.set(exit.key, exit);
            exits.set(exit.reverse.key, exit.reverse);
            exitsByLocation.get(exit.loc).push(exit);
            exitsByLocation.get(exit.reverse.loc).push(exit.reverse);
        }
    }
    function findExits(location, ...finders) {
        const out = [];
        for (const exit of exitsByLocation.get(location)) {
            for (const finder of finders) {
                if (matchExit(exit, finder)) {
                    out.push(exit);
                    break;
                }
            }
        }
        return out;
    }
    for (const exit of findExits(loc.ValleyOfWind, 'door', 'windmill')) {
        exit.area = 'windmill';
    }
    for (const exit of findExits(loc.AngrySea, 0x64)) {
        exit.area = 'lighthouse';
    }
    findExits(loc.Portoa_FishermanIsland, 'edge:right')[0].oneWay = true;
    function mark(loc, ...exits) {
        for (const exit of findExits(loc, ...exits)) {
            exit.shuffle = true;
        }
    }
    function markOutside(...locs) {
        const set = new Set(locs);
        for (const loc of locs) {
            for (const exit of exitsByLocation.get(loc)) {
                if (!set.has(exit.reverse.loc))
                    exit.shuffle = true;
            }
        }
    }
    markOutside(loc.Leaf_OutsideStart);
    mark(loc.ValleyOfWind, 'cave', 'door', 'edge:bottom', 'edge:top', 'edge:left', 'edge:right');
    markOutside(loc.WindmillCave);
    markOutside(loc.EastCave1, loc.EastCave2, loc.EastCave3);
    markOutside(loc.ZebuCave, loc.MtSabreWest_Cave1);
    markOutside(loc.CordelPlainWest, loc.CordelPlainEast);
    markOutside(loc.WaterfallValleyNorth, loc.WaterfallValleySouth);
    markOutside(loc.KirisaMeadow);
    markOutside(loc.LimeTreeLake);
    mark(loc.Portoa_FishermanIsland, 'edge:right');
    mark(loc.PortoaPalace_ThroneRoom, 'door');
    mark(loc.Joel, 'edge:bottom');
    markOutside(loc.JoelSecretPassage);
    mark(loc.EvilSpiritIsland1, 'stair:up');
    mark(loc.ZombieTown, 'cave');
    mark(loc.AngrySea, 'edge:top');
    markOutside(loc.SwanGate);
    mark(loc.GoaValley, 'edge:left');
    markOutside(loc.Desert1);
    markOutside(loc.GoaFortressBasement);
    markOutside(loc.DesertCave1);
    markOutside(loc.SaharaOutsideCave);
    markOutside(loc.DesertCave2);
    mark(loc.Desert2, 'stair:down');
    if (!flags.shuffleHouses()) {
        const palaces = [
            [loc.ZombieTown, 'fortress'],
            [loc.MtHydra, 'gate'],
            [loc.Desert2, 'fortress'],
            [loc.Goa, 'edge:top'],
            [loc.Portoa, 'fortress'],
            [loc.Shyron, 'fortress'],
            [loc.GoaValley, 'fortress'],
            [loc.OasisCave_Entrance, 'stair:up'],
            [loc.MtHydra_OutsideShyron, 'gate'],
            [loc.Crypt_Entrance, 'crypt'],
        ];
        for (const [outside, inside] of palaces) {
            const [exit] = findExits(outside, inside);
            exit.conn = 'F';
            exit.shuffle = true;
        }
    }
    {
        const [exit] = findExits(loc.Oak, 'edge:bottom');
        exit.conn = 'X';
        exit.shuffle = true;
    }
    const uf = new UnionFind();
    for (const exit of exits.values()) {
        if (exit.shuffle)
            continue;
        uf.union([exit.area, exit.reverse.area]);
    }
    const areaExits = new DefaultMap(() => []);
    for (const exit of exits.values()) {
        if (!exit.shuffle)
            continue;
        areaExits.get(exit.area = uf.find(exit.area)).push(exit);
    }
    const start = exitsByLocation.get(loc.MezameShrine)[0].area;
    function traverse() {
        const seen = new Set();
        const map = new Map();
        const partitions = [];
        for (const area of [start, ...areaExits.keys()]) {
            if (seen.has(area))
                continue;
            const queue = new Set([area]);
            const partition = [];
            for (const next of queue) {
                seen.add(next);
                for (const exit of areaExits.get(next)) {
                    map.set(exit, partitions.length);
                    partition.push(exit);
                    if (exit.oneWay || seen.has(exit.reverse.area))
                        continue;
                    queue.add(exit.reverse.area);
                }
            }
            partitions.push(partition);
        }
        let min = 0;
        for (let i = 1; i < partitions.length; i++) {
            if (partitions[i].length < partitions[min].length)
                min = i;
        }
        return [partitions.length, map, partitions[min]];
    }
    const exitsByConn = new DefaultMap(() => []);
    for (const exit of exits.values()) {
        if (!exit.shuffle || !exit.conn)
            continue;
        exitsByConn.get(exit.conn).push(exit);
    }
    for (const c of 'NWCF') {
        const original = exitsByConn.get(c);
        const shuffled = random.shuffle([...original]).map(e => e.reverse);
        for (let i = 0; i < shuffled.length; i++) {
            const exit1 = original[i];
            const exit2 = shuffled[i];
            [exit1.reverse, exit2.reverse] = [exit2, exit1];
        }
    }
    let iterations = 0;
    let [count, traversal, pool] = traverse();
    while (iterations-- > 0 || count > 1) {
        const exit1 = random.pick(pool);
        let eligible = exitsByConn.get(exit1.conn);
        if (count > 1) {
            const avoid = traversal.get(exit1);
            eligible = eligible.filter(e => traversal.get(e) !== avoid);
        }
        const exit2 = random.pick(eligible);
        const rev1 = exit1.reverse;
        const rev2 = exit2.reverse;
        exit1.reverse = rev2;
        rev2.reverse = exit1;
        exit2.reverse = rev1;
        rev1.reverse = exit2;
        [count, traversal, pool] = traverse();
        if (iterations < -10)
            debugger;
    }
    for (const exit of exits.values()) {
        if (exit.reverse !== exit.origRev) {
            function showExit(e) { return `${e.loc.name} ${e.type}(${e.pos.toString(16)})`; }
            console.log(`${showExit(exit)}  =>  ${showExit(exit.reverse)}  (was ${showExit(exit.origRev)})`);
        }
        exit.loc.meta.attach(exit.pos, exit.reverse.loc.meta, exit.reverse.pos, exit.type, exit.reverse.type);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2h1ZmZsZWFyZWFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3Bhc3Mvc2h1ZmZsZWFyZWFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVdBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUc5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQTRCNUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQWlDO0lBQ3RELENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQztJQUNqQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUM7SUFDakIsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDO0lBQ2xCLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQztJQUNuQixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDYixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDYixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDZCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7SUFDZCxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUM7Q0FDbEIsQ0FBQyxDQUFDO0FBTUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQWlDO0lBQzFELENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNWLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQztDQUNYLENBQUMsQ0FBQztBQUVILFNBQVMsUUFBUSxDQUFDLEdBQWEsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQWlCO0lBQ2hGLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUM7SUFDdkUsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3BCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDMUQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sTUFBTSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDaEMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDO0lBQ3RELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sT0FBTyxHQUFTO1FBQ3BCLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTztRQUN2QyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNO1FBQUUsT0FBTyxFQUFFLElBQUssRUFBRSxPQUFPLEVBQUUsSUFBSztRQUMxRCxJQUFJLElBQUksS0FBSyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxPQUFPLEtBQUssT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksT0FBTyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDO0tBQ0YsQ0FBQztJQUNGLE1BQU0sSUFBSSxHQUFTO1FBQ2pCLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPO1FBQ3BELElBQUksSUFBSSxLQUFLLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxPQUFPLEtBQUssT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksT0FBTyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDZCxDQUFDO0tBQ0YsQ0FBQztJQUNGLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDekMsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBVSxFQUFFLE1BQWtCO0lBQy9DLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtRQUFFLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUM7SUFDNUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRO1FBQUUsT0FBTyxJQUFJLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQztJQUMzRCxJQUFJLE1BQU0sWUFBWSxRQUFRO1FBQUUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsS0FBSyxNQUFNLENBQUM7SUFDbkUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEdBQVEsRUFBRSxLQUFjLEVBQUUsTUFBYztJQUNuRSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtRQUFFLE9BQU87SUFDbEMsTUFBTSxFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUMsR0FBRyxHQUFHLENBQUM7SUFHN0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFDdEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxVQUFVLENBQW1CLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLEtBQUssTUFBTSxRQUFRLElBQUksR0FBRyxDQUFDLFNBQVMsRUFBRTtRQUNwQyxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFJNUMsSUFBSSxRQUFRLEtBQUssR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUFFLFNBQVM7WUFDM0UsSUFBSSxRQUFRLEtBQUssR0FBRyxDQUFDLGVBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUFFLFNBQVM7WUFDM0UsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO2dCQUFFLFNBQVM7WUFDakMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUkxQyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLG9CQUFvQjtnQkFBRSxTQUFTO1lBQ3BELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLG9CQUFvQjtnQkFBRSxTQUFTO1lBQzVELElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO2dCQUFFLFNBQVM7WUFDbEMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2FBQzFFO1lBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzFCLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxRDtLQUNGO0lBR0QsU0FBUyxTQUFTLENBQUMsUUFBa0IsRUFBRSxHQUFHLE9BQXFCO1FBQzdELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNmLEtBQUssTUFBTSxJQUFJLElBQUksZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNoRCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtnQkFDNUIsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFO29CQUMzQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNmLE1BQU07aUJBQ1A7YUFDRjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ0QsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQUU7UUFDbEUsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7S0FDeEI7SUFDRCxLQUFLLE1BQU0sSUFBSSxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFO1FBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO0tBQzFCO0lBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBR3JFLFNBQVMsSUFBSSxDQUFDLEdBQWEsRUFBRSxHQUFHLEtBQW1CO1FBQ2pELEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUNELFNBQVMsV0FBVyxDQUFDLEdBQUcsSUFBZ0I7UUFDdEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDdEIsS0FBSyxNQUFNLElBQUksSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztvQkFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQzthQUNyRDtTQUNGO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVuQyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzlELFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDN0QsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RELFdBQVcsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDaEUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QixXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM5QixXQUFXLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvQixXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25DLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsRUFBRTtRQUUxQixNQUFNLE9BQU8sR0FBNkI7WUFFeEMsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztZQUM1QixDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQ3JCLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7WUFDekIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQztZQUNyQixDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDO1lBQ3hCLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUM7WUFHeEIsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQztZQUMzQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUM7WUFDcEMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDO1lBQ25DLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUM7U0FDOUIsQ0FBQztRQUNGLEtBQUssTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDdkMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDckI7S0FDRjtJQUVEO1FBRUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0tBSXJCO0lBWUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxTQUFTLEVBQVUsQ0FBQztJQUNuQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNqQyxJQUFJLElBQUksQ0FBQyxPQUFPO1lBQUUsU0FBUztRQUMzQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLFVBQVUsQ0FBaUIsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUUsU0FBUztRQUM1QixTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDMUQ7SUFXRCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDNUQsU0FBUyxRQUFRO1FBQ2YsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN2QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBZ0IsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQy9DLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQUUsU0FBUztZQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQVcsRUFBRSxDQUFDO1lBQzdCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO2dCQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDdEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO29CQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFBRSxTQUFTO29CQUN6RCxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlCO2FBQ0Y7WUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ1osS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNO2dCQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQVFELE1BQU0sV0FBVyxHQUFHLElBQUksVUFBVSxDQUF5QixHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyRSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO1lBQUUsU0FBUztRQUMxQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDdkM7SUFFRCxLQUFLLE1BQU0sQ0FBQyxJQUFLLE1BQW1DLEVBQUU7UUFDcEQsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUUsQ0FBQztRQUNyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDakQ7S0FDRjtJQUdELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUNuQixJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQztJQUMxQyxPQUFPLFVBQVUsRUFBRSxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQ2IsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUM7U0FDN0Q7UUFDRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUMzQixLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDdEMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxFQUFFO1lBQUUsUUFBUSxDQUFDO0tBQ2hDO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDakMsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakMsU0FBUyxRQUFRLENBQUMsQ0FBTyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZGLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsRztRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDakQsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0FBSUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFNodWZmbGUgYXJlYXMuXG4vLyBUaGlzIGlzIGRvbmUgX2FmdGVyXyBzaHVmZmxpbmcgaG91c2VzLiAgVGhlcmUncyBhIGZldyBwb3NzaWJsZVxuLy8gYXBwcm9hY2hlcyB0byB0aGlzLiAgSGVyZSB3ZSBzaW1wbHkgZW51bWVyYXRlIHRoZSBhcmVhcyAobm90XG4vLyB1c2luZyB0aGUgZGF0YSBpbiByb20vbG9jYXRpb24sIHNpbmNlIHdlIGFjdHVhbGx5IHdhbnQgdG8gYmFzZVxuLy8gdGhpbmdzIG9uIHRoZSBleGl0cyByYXRoZXIgdGhhbiB0aGUgbG9jYXRpb25zKSBhbmQgZG8gc3dhcHMgb25cbi8vIHBhaXJzIG9mIGV4aXRzLCBtYWludGFpbmluZyBhIGdyYXBoIG9mIGFyZWFzLiAgQnkgZGVmaW5pbmcgdGhlXG4vLyBhcmVhcyBjb2Fyc2VyIG9yIGZpbmVyLCB3ZSBjYW4gY29udHJvbCB0aGUgY3JhemluZXNzLlxuXG5pbXBvcnQgeyBSYW5kb20gfSBmcm9tICcuLi9yYW5kb20uanMnO1xuaW1wb3J0IHsgUm9tIH0gZnJvbSAnLi4vcm9tLmpzJztcbmltcG9ydCB7IEV4aXRTcGVjLCBQb3MgfSBmcm9tICcuLi9yb20vbWV0YWxvY2F0aW9uLmpzJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnLi4vcm9tL2xvY2F0aW9uLmpzJztcbmltcG9ydCB7IENvbm5lY3Rpb25UeXBlIH0gZnJvbSAnLi4vcm9tL21ldGFzY3JlZW5kYXRhLmpzJztcbmltcG9ydCB7IEZsYWdTZXQgfSBmcm9tICcuLi9mbGFnc2V0LmpzJztcbmltcG9ydCB7IERlZmF1bHRNYXAgfSBmcm9tICcuLi91dGlsLmpzJztcbmltcG9ydCB7IFVuaW9uRmluZCB9IGZyb20gJy4uL3VuaW9uZmluZC5qcyc7XG5cbmludGVyZmFjZSBBcmVhIHtcbiAgbmFtZTogc3RyaW5nO1xuICBleGl0czogTWFwPHN0cmluZywgQXJlYUV4aXQ+O1xuICAvL2V4cGVjdGVkRXhpdHM6IG51bWJlcjtcbn1cbmludGVyZmFjZSBBcmVhRXhpdCB7XG4gIGNvbm46IEFyZWFDb25uZWN0aW9uO1xuICBkZXN0OiBBcmVhO1xuICBkZXN0S2V5OiBzdHJpbmc7XG4gIGxvY1BvczogbnVtYmVyO1xuICBleGl0VHlwZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgRXhpdCB7XG4gIHJlYWRvbmx5IGxvYzogTG9jYXRpb247XG4gIHJlYWRvbmx5IHBvczogUG9zO1xuICByZWFkb25seSB0eXBlOiBDb25uZWN0aW9uVHlwZTtcbiAgcmVhZG9ubHkga2V5OiBzdHJpbmc7XG4gIGNvbm46IEFyZWFDb25uZWN0aW9ufHVuZGVmaW5lZDsgLy8gY2Fubm90IHNodWZmbGUgd2l0aG91dFxuICByZXZlcnNlOiBFeGl0O1xuICBzaHVmZmxlOiBib29sZWFuO1xuICBhcmVhOiBzdHJpbmc7XG4gIG9uZVdheT86IGJvb2xlYW47IC8vIGNhbid0IGdvIHRoaXMgd2F5XG4gIG9yaWdSZXY6IEV4aXQ7XG59XG5cbmNvbnN0IGNvbm5NYXAgPSBuZXcgTWFwPENvbm5lY3Rpb25UeXBlLCBBcmVhQ29ubmVjdGlvbj4oW1xuICBbJ3N0YWlyOnVwJywgJ0MnXSxcbiAgWydlZGdlOnRvcCcsICdOJ10sXG4gIFsnZWRnZTpsZWZ0JywgJ1cnXSxcbiAgWydlZGdlOnJpZ2h0JywgJ0UnXSxcbiAgWydjYXZlJywgJ0MnXSxcbiAgWydkb29yJywgJ0MnXSxcbiAgWydkb29yMicsICdDJ10sXG4gIFsnZG9vcjMnLCAnQyddLFxuICBbJ2ZvcnRyZXNzJywgJ0YnXSxcbl0pO1xuXG50eXBlIEV4aXREZXNjcmlwdG9yID0gcmVhZG9ubHkgW1BvcywgQ29ubmVjdGlvblR5cGUsIEV4aXRTcGVjXTtcbnR5cGUgRXhpdEZpbmRlciA9IFBvc3xDb25uZWN0aW9uVHlwZXxyZWFkb25seSBFeGl0RmluZGVyW107XG50eXBlIEFyZWFDb25uZWN0aW9uID0gJ04nfCdTJ3wnVyd8J0UnfCdDJ3wnWCd8J0YnfCdPJztcbi8vdHlwZSBBcmVhRXhpdFNwZWMgPSByZWFkb25seSBbQXJlYUNvbm5lY3Rpb24sIEV4aXRGaW5kZXIsIEFyZWEsIGJvb2xlYW4/XTtcbmNvbnN0IGNvbm5JbnZlcnNlID0gbmV3IE1hcDxBcmVhQ29ubmVjdGlvbiwgQXJlYUNvbm5lY3Rpb24+KFtcbiAgWydOJywgJ1MnXSxcbiAgWydTJywgJ04nXSxcbiAgWydFJywgJ1cnXSxcbiAgWydXJywgJ0UnXSxcbiAgWydDJywgJ1gnXSxcbiAgWydYJywgJ0MnXSxcbiAgWydGJywgJ08nXSxcbiAgWydPJywgJ0YnXSxcbl0pO1xuXG5mdW5jdGlvbiBtYWtlRXhpdChsb2M6IExvY2F0aW9uLCBbcG9zLCB0eXBlLCBbcmV2TG9jUG9zLCByZXZUeXBlXV06IEV4aXREZXNjcmlwdG9yKTogRXhpdCB7XG4gIGxldCBjb25uID0gY29ubk1hcC5nZXQodHlwZSkgfHwgY29ubkludmVyc2UuZ2V0KGNvbm5NYXAuZ2V0KHJldlR5cGUpISk7XG4gIGxldCBzaHVmZmxlID0gZmFsc2U7XG4gIGNvbnN0IGFyZWEgPSBsb2MuaWQudG9TdHJpbmcoMTYpO1xuICBjb25zdCBrZXkgPSAobG9jLmlkIDw8IDggfCBwb3MpLnRvU3RyaW5nKDE2KSArICcgJyArIHR5cGU7XG4gIGNvbnN0IHJldkxvYyA9IGxvYy5yb20ubG9jYXRpb25zW3JldkxvY1BvcyA+Pj4gOF07XG4gIGNvbnN0IHJldlBvcyA9IHJldkxvY1BvcyAmIDB4ZmY7XG4gIGNvbnN0IHJldktleSA9IHJldkxvY1Bvcy50b1N0cmluZygxNikgKyAnICcgKyByZXZUeXBlO1xuICBjb25zdCByZXZBcmVhID0gcmV2TG9jLmlkLnRvU3RyaW5nKDE2KTtcbiAgY29uc3QgcmV2ZXJzZTogRXhpdCA9IHtcbiAgICBsb2M6IHJldkxvYywgcG9zOiByZXZQb3MsIHR5cGU6IHJldlR5cGUsXG4gICAgYXJlYTogcmV2QXJlYSwga2V5OiByZXZLZXksIHJldmVyc2U6IG51bGwhLCBvcmlnUmV2OiBudWxsISxcbiAgICBnZXQgY29ubigpIHsgcmV0dXJuIGNvbm5JbnZlcnNlLmdldChjb25uISk7IH0sXG4gICAgc2V0IGNvbm4oYykgeyBjb25uID0gY29ubkludmVyc2UuZ2V0KGMhKTsgfSxcbiAgICBnZXQgc2h1ZmZsZSgpIHsgcmV0dXJuIHNodWZmbGU7IH0sXG4gICAgc2V0IHNodWZmbGUocykge1xuICAgICAgaWYgKHMgJiYgIWNvbm4pIHRocm93IG5ldyBFcnJvcihgc2h1ZmZsZSB3aXRob3V0IGNvbm5gKTtcbiAgICAgIHNodWZmbGUgPSBzO1xuICAgIH0sXG4gIH07XG4gIGNvbnN0IGV4aXQ6IEV4aXQgPSB7XG4gICAgbG9jLCBwb3MsIHR5cGUsIGtleSwgcmV2ZXJzZSwgYXJlYSwgb3JpZ1JldjogcmV2ZXJzZSxcbiAgICBnZXQgY29ubigpIHsgcmV0dXJuIGNvbm47IH0sXG4gICAgc2V0IGNvbm4oYykgeyBjb25uID0gYzsgfSxcbiAgICBnZXQgc2h1ZmZsZSgpIHsgcmV0dXJuIHNodWZmbGU7IH0sXG4gICAgc2V0IHNodWZmbGUocykge1xuICAgICAgaWYgKHMgJiYgIWNvbm4pIHRocm93IG5ldyBFcnJvcihgc2h1ZmZsZSB3aXRob3V0IGNvbm5gKTtcbiAgICAgIHNodWZmbGUgPSBzO1xuICAgIH0sXG4gIH07XG4gIHJldmVyc2UucmV2ZXJzZSA9IHJldmVyc2Uub3JpZ1JldiA9IGV4aXQ7XG4gIHJldHVybiBleGl0O1xufVxuXG5mdW5jdGlvbiBtYXRjaEV4aXQoZXhpdDogRXhpdCwgZmluZGVyOiBFeGl0RmluZGVyKTogYm9vbGVhbiB7XG4gIGlmICh0eXBlb2YgZmluZGVyID09PSAnc3RyaW5nJykgcmV0dXJuIGV4aXQudHlwZSA9PT0gZmluZGVyO1xuICBpZiAodHlwZW9mIGZpbmRlciA9PT0gJ251bWJlcicpIHJldHVybiBleGl0LnBvcyA9PT0gZmluZGVyO1xuICBpZiAoZmluZGVyIGluc3RhbmNlb2YgTG9jYXRpb24pIHJldHVybiBleGl0LnJldmVyc2UubG9jID09PSBmaW5kZXI7XG4gIHJldHVybiBmaW5kZXIuZXZlcnkoZiA9PiBtYXRjaEV4aXQoZXhpdCwgZikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZUFyZWFzKHJvbTogUm9tLCBmbGFnczogRmxhZ1NldCwgcmFuZG9tOiBSYW5kb20pIHtcbiAgaWYgKCFmbGFncy5zaHVmZmxlQXJlYXMoKSkgcmV0dXJuO1xuICBjb25zdCB7bG9jYXRpb25zOiBsb2N9ID0gcm9tO1xuXG4gIC8vIENhdGFsb2d1ZSBhbGwgdGhlIGV4aXRzIGluIHRoZSBnYW1lXG4gIGNvbnN0IGV4aXRzID0gbmV3IE1hcDxzdHJpbmcsIEV4aXQ+KCk7XG4gIGNvbnN0IGV4aXRzQnlMb2NhdGlvbiA9IG5ldyBEZWZhdWx0TWFwPExvY2F0aW9uLCBFeGl0W10+KCgpID0+IFtdKTtcbiAgZm9yIChjb25zdCBsb2NhdGlvbiBvZiByb20ubG9jYXRpb25zKSB7XG4gICAgZm9yIChjb25zdCBleGl0U3BlYyBvZiBsb2NhdGlvbi5tZXRhLmV4aXRzKCkpIHtcbiAgICAgIC8vIE5PVEU6IENvcmRlbCBhbmQgVG93ZXIgYm90aCBicmVhayB0aGUgMToxIG1hcHBpbmcgYmV0d2VlbiBleGl0cy5cbiAgICAgIC8vIEZvciBDb3JkZWwsIHVzZSB0aGUgWC1jb29yZGluYXRlIHRvIG9ubHkgcGljayB0aGUgXCJyZWFsXCIgZXhpdC5cbiAgICAgIC8vIFNraXAgVG93ZXIgZW50aXJlbHksIHNpbmNlIHdlIGRvbid0IHNodWZmbGUgaXQuXG4gICAgICBpZiAobG9jYXRpb24gPT09IGxvYy5Db3JkZWxQbGFpbkVhc3QgJiYgKGV4aXRTcGVjWzBdICYgMHgwZikgPCA1KSBjb250aW51ZTtcbiAgICAgIGlmIChsb2NhdGlvbiA9PT0gbG9jLkNvcmRlbFBsYWluV2VzdCAmJiAoZXhpdFNwZWNbMF0gJiAweDBmKSA+IDQpIGNvbnRpbnVlO1xuICAgICAgaWYgKGxvY2F0aW9uLmlzVG93ZXIoKSkgY29udGludWU7XG4gICAgICBjb25zdCBleGl0ID0gbWFrZUV4aXQobG9jYXRpb24sIGV4aXRTcGVjKTtcbiAgICAgIC8vIFNraXAgdGhlIEZvcnR1bmUgVGVsbGVyIGVudGlyZWx5IHNpbmNlIGl0IGNvbmZ1c2VzIHRoZSBsb2dpYzpcbiAgICAgIC8vIHNoZSBkb2Vzbid0IGFjdHVhbGx5IGNvbm5lY3QgdGhlIHVuZGVyZ3JvdW5kIGNhdmUgdG8gcG9ydG9hLFxuICAgICAgLy8gYW5kIGl0J3MgaXJyZWxldmFudCBhbnl3YXkgc2luY2UgaXQncyBub3QgcmVxdWlyZWQgdG8gZ28gdGhlcmUuXG4gICAgICBpZiAoZXhpdC5sb2MgPT09IGxvYy5Qb3J0b2FfRm9ydHVuZVRlbGxlcikgY29udGludWU7XG4gICAgICBpZiAoZXhpdC5yZXZlcnNlLmxvYyA9PT0gbG9jLlBvcnRvYV9Gb3J0dW5lVGVsbGVyKSBjb250aW51ZTtcbiAgICAgIGlmIChleGl0cy5oYXMoZXhpdC5rZXkpKSBjb250aW51ZTtcbiAgICAgIGlmIChleGl0cy5oYXMoZXhpdC5yZXZlcnNlLmtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmNvbnNpc3RlbnQgZXhpdHM6ICR7ZXhpdC5rZXl9IHwgJHtleGl0LnJldmVyc2Uua2V5fWApO1xuICAgICAgfVxuICAgICAgZXhpdHMuc2V0KGV4aXQua2V5LCBleGl0KTtcbiAgICAgIGV4aXRzLnNldChleGl0LnJldmVyc2Uua2V5LCBleGl0LnJldmVyc2UpO1xuICAgICAgZXhpdHNCeUxvY2F0aW9uLmdldChleGl0LmxvYykucHVzaChleGl0KTtcbiAgICAgIGV4aXRzQnlMb2NhdGlvbi5nZXQoZXhpdC5yZXZlcnNlLmxvYykucHVzaChleGl0LnJldmVyc2UpO1xuICAgIH1cbiAgfVxuXG4gIC8vIE1ha2Ugc2VwYXJhdGUgYXJlYXMgZm9yIHdpbmRtaWxsIGFuZCBsaWdodGhvdXNlXG4gIGZ1bmN0aW9uIGZpbmRFeGl0cyhsb2NhdGlvbjogTG9jYXRpb24sIC4uLmZpbmRlcnM6IEV4aXRGaW5kZXJbXSk6IEV4aXRbXSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgZm9yIChjb25zdCBleGl0IG9mIGV4aXRzQnlMb2NhdGlvbi5nZXQobG9jYXRpb24pKSB7XG4gICAgICBmb3IgKGNvbnN0IGZpbmRlciBvZiBmaW5kZXJzKSB7XG4gICAgICAgIGlmIChtYXRjaEV4aXQoZXhpdCwgZmluZGVyKSkge1xuICAgICAgICAgIG91dC5wdXNoKGV4aXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbiAgZm9yIChjb25zdCBleGl0IG9mIGZpbmRFeGl0cyhsb2MuVmFsbGV5T2ZXaW5kLCAnZG9vcicsICd3aW5kbWlsbCcpKSB7XG4gICAgZXhpdC5hcmVhID0gJ3dpbmRtaWxsJztcbiAgfVxuICBmb3IgKGNvbnN0IGV4aXQgb2YgZmluZEV4aXRzKGxvYy5BbmdyeVNlYSwgMHg2NCkpIHtcbiAgICBleGl0LmFyZWEgPSAnbGlnaHRob3VzZSc7XG4gIH1cbiAgZmluZEV4aXRzKGxvYy5Qb3J0b2FfRmlzaGVybWFuSXNsYW5kLCAnZWRnZTpyaWdodCcpWzBdLm9uZVdheSA9IHRydWU7XG4gIFxuICAvLyBNYXJrIHRoZSBleGl0cyB0aGF0IGFyZSBlbGlnaWJsZSB0byBiZSBzaHVmZmxlZC5cbiAgZnVuY3Rpb24gbWFyayhsb2M6IExvY2F0aW9uLCAuLi5leGl0czogRXhpdEZpbmRlcltdKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBleGl0IG9mIGZpbmRFeGl0cyhsb2MsIC4uLmV4aXRzKSkge1xuICAgICAgZXhpdC5zaHVmZmxlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya091dHNpZGUoLi4ubG9jczogTG9jYXRpb25bXSk6IHZvaWQge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQobG9jcyk7XG4gICAgZm9yIChjb25zdCBsb2Mgb2YgbG9jcykge1xuICAgICAgZm9yIChjb25zdCBleGl0IG9mIGV4aXRzQnlMb2NhdGlvbi5nZXQobG9jKSkge1xuICAgICAgICBpZiAoIXNldC5oYXMoZXhpdC5yZXZlcnNlLmxvYykpIGV4aXQuc2h1ZmZsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWFya091dHNpZGUobG9jLkxlYWZfT3V0c2lkZVN0YXJ0KTtcbiAgLy9tYXJrKGxvYy5MZWFmLCBsb2MuTGVhZl9PdXRzaWRlU3RhcnQpO1xuICBtYXJrKGxvYy5WYWxsZXlPZldpbmQsICdjYXZlJywgJ2Rvb3InLCAnZWRnZTpib3R0b20nLCAnZWRnZTp0b3AnLCAnZWRnZTpsZWZ0JywgJ2VkZ2U6cmlnaHQnKTtcbiAgLyppZiAoZmxhZ3Muc2h1ZmZsZUhvdXNlcygpKSovIG1hcmtPdXRzaWRlKGxvYy5XaW5kbWlsbENhdmUpO1xuICBtYXJrT3V0c2lkZShsb2MuRWFzdENhdmUxLCBsb2MuRWFzdENhdmUyLCBsb2MuRWFzdENhdmUzKTtcbiAgbWFya091dHNpZGUobG9jLlplYnVDYXZlLCBsb2MuTXRTYWJyZVdlc3RfQ2F2ZTEpO1xuICBtYXJrT3V0c2lkZShsb2MuQ29yZGVsUGxhaW5XZXN0LCBsb2MuQ29yZGVsUGxhaW5FYXN0KTtcbiAgbWFya091dHNpZGUobG9jLldhdGVyZmFsbFZhbGxleU5vcnRoLCBsb2MuV2F0ZXJmYWxsVmFsbGV5U291dGgpO1xuICBtYXJrT3V0c2lkZShsb2MuS2lyaXNhTWVhZG93KTtcbiAgbWFya091dHNpZGUobG9jLkxpbWVUcmVlTGFrZSk7XG4gIG1hcmsobG9jLlBvcnRvYV9GaXNoZXJtYW5Jc2xhbmQsICdlZGdlOnJpZ2h0Jyk7IC8vIChQb3J0b2EpXG4gIG1hcmsobG9jLlBvcnRvYVBhbGFjZV9UaHJvbmVSb29tLCAnZG9vcicpOyAvLyAodW5kZXJncm91bmQgY2hhbm5lbClcbiAgbWFyayhsb2MuSm9lbCwgJ2VkZ2U6Ym90dG9tJyk7IC8vIChhbmdyeSBzZWEpXG4gIG1hcmtPdXRzaWRlKGxvYy5Kb2VsU2VjcmV0UGFzc2FnZSk7IC8vIG1heWJlIG5vdD9cbiAgLy9maW5kRXhpdHMobG9jLkV2aWxTcGlyaXRJc2xhbmQxLCBsb2MuRXZpbFNwaXJpdElzbGFuZDIpWzBdLmNvbm4gPSAnQyc7XG4gIG1hcmsobG9jLkV2aWxTcGlyaXRJc2xhbmQxLCAnc3RhaXI6dXAnKTsgLy8gKEVTSSAyKVxuICBtYXJrKGxvYy5ab21iaWVUb3duLCAnY2F2ZScpOyAvLyAoRVNJIDMpXG4gIG1hcmsobG9jLkFuZ3J5U2VhLCAnZWRnZTp0b3AnKTtcbiAgbWFya091dHNpZGUobG9jLlN3YW5HYXRlKTtcbiAgbWFyayhsb2MuR29hVmFsbGV5LCAnZWRnZTpsZWZ0Jyk7IC8vIChNdCBIeWRyYSlcbiAgbWFya091dHNpZGUobG9jLkRlc2VydDEpO1xuICBtYXJrT3V0c2lkZShsb2MuR29hRm9ydHJlc3NCYXNlbWVudCk7XG4gIG1hcmtPdXRzaWRlKGxvYy5EZXNlcnRDYXZlMSk7XG4gIG1hcmtPdXRzaWRlKGxvYy5TYWhhcmFPdXRzaWRlQ2F2ZSk7XG4gIG1hcmtPdXRzaWRlKGxvYy5EZXNlcnRDYXZlMik7XG4gIG1hcmsobG9jLkRlc2VydDIsICdzdGFpcjpkb3duJyk7XG4gIGlmICghZmxhZ3Muc2h1ZmZsZUhvdXNlcygpKSB7XG4gICAgLy8gQWxzbyBtYXJrIHRoZSBmb3J0cmVzc2VzL3BhbGFjZXNcbiAgICBjb25zdCBwYWxhY2VzOiBbTG9jYXRpb24sIEV4aXRGaW5kZXJdW10gPSBbXG4gICAgICAvLyBOb3JtYWwgcGFsYWNlc1xuICAgICAgW2xvYy5ab21iaWVUb3duLCAnZm9ydHJlc3MnXSwgLy8gU2FiZXJhXG4gICAgICBbbG9jLk10SHlkcmEsICdnYXRlJ10sIC8vIFN0eXhcbiAgICAgIFtsb2MuRGVzZXJ0MiwgJ2ZvcnRyZXNzJ10sIC8vIFB5cmFtaWRcbiAgICAgIFtsb2MuR29hLCAnZWRnZTp0b3AnXSwgLy8gR29hIEZvcnRyZXNzXG4gICAgICBbbG9jLlBvcnRvYSwgJ2ZvcnRyZXNzJ10sIC8vIFBhbGFjZVxuICAgICAgW2xvYy5TaHlyb24sICdmb3J0cmVzcyddLCAvLyBUZW1wbGVcbiAgICAgIC8vIFtsb2MuVW5kZXJncm91bmRDaGFubmVsLCBsb2MuUG9ydG9hX0FzaW5hUm9vbV0sID8/XG4gICAgICAvLyBFeHRyYXNcbiAgICAgIFtsb2MuR29hVmFsbGV5LCAnZm9ydHJlc3MnXSwgLy8gR29hIFRvd25cbiAgICAgIFtsb2MuT2FzaXNDYXZlX0VudHJhbmNlLCAnc3RhaXI6dXAnXSwgLy8gR29hIEZvcnRyZXNzIGJhY2tkb29yXG4gICAgICBbbG9jLk10SHlkcmFfT3V0c2lkZVNoeXJvbiwgJ2dhdGUnXSwgLy8gU2h5cm9uXG4gICAgICBbbG9jLkNyeXB0X0VudHJhbmNlLCAnY3J5cHQnXSxcbiAgICBdO1xuICAgIGZvciAoY29uc3QgW291dHNpZGUsIGluc2lkZV0gb2YgcGFsYWNlcykge1xuICAgICAgY29uc3QgW2V4aXRdID0gZmluZEV4aXRzKG91dHNpZGUsIGluc2lkZSk7XG4gICAgICBleGl0LmNvbm4gPSAnRic7XG4gICAgICBleGl0LnNodWZmbGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICAvLyBOT1RFOiBvYWsgY2hpbGQgY2FuIG5vdyBiZSB0YWtlbiBhbnl3aGVyZVxuICAgIGNvbnN0IFtleGl0XSA9IGZpbmRFeGl0cyhsb2MuT2FrLCAnZWRnZTpib3R0b20nKTtcbiAgICBleGl0LmNvbm4gPSAnWCc7IC8vIFRPRE8gLSBjb25zaWRlciBtYWtpbmcgdGhpcyAnUyc/IG9yIHNvbWUgY29tYm8/XG4gICAgZXhpdC5zaHVmZmxlID0gdHJ1ZTtcblxuICAgIC8vIFRPRE8gLSBtYXJrIGNvbm4gYXMgJ0MvWCdcbiAgICAvLyBUT0RPIC0gdGVzdCB0aGF0IGNoaWxkIGNhbiBiZSB0YWtlbiBvdXQgb2Ygc3dhbXBcbiAgfVxuXG4gIC8vIERJQUdOT1NUSUM6IGNoZWNrIHRoYXQgYWxsIHRoZSBleGl0cyBhcmUgY29ycmVjdFxuICAvLyBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICAvLyBmb3IgKGNvbnN0IGV4aXQgb2YgZXhpdHMudmFsdWVzKCkpIHtcbiAgLy8gICBpZiAoIWV4aXQuc2h1ZmZsZSkgY29udGludWU7XG4gIC8vICAgaWYgKHNlZW4uaGFzKGV4aXQpKSBjb250aW51ZTtcbiAgLy8gICBzZWVuLmFkZChleGl0LnJldmVyc2UpO1xuICAvLyAgIGNvbnNvbGUubG9nKGAoJHtleGl0LmNvbm59KSAke2V4aXQubG9jLm5hbWV9ICA8PT0+ICAke2V4aXQucmV2ZXJzZS5sb2MubmFtZX0gKCR7ZXhpdC5yZXZlcnNlLmNvbm59KWApO1xuICAvLyB9XG5cbiAgLy8gTmV4dCBmaW5kIGFsbCB0aGUgbm9uLXNodWZmbGVkIGV4aXRzIGFuZCBVbmlvbkZpbmQgdGhlbSFcbiAgY29uc3QgdWYgPSBuZXcgVW5pb25GaW5kPHN0cmluZz4oKTtcbiAgZm9yIChjb25zdCBleGl0IG9mIGV4aXRzLnZhbHVlcygpKSB7XG4gICAgaWYgKGV4aXQuc2h1ZmZsZSkgY29udGludWU7XG4gICAgdWYudW5pb24oW2V4aXQuYXJlYSwgZXhpdC5yZXZlcnNlLmFyZWFdKTtcbiAgfVxuICAvL2NvbnN0IGFyZWFUb0xvY2F0aW9uTWFwID0gbmV3IE1hcCgpO1xuICBjb25zdCBhcmVhRXhpdHMgPSBuZXcgRGVmYXVsdE1hcDxzdHJpbmcsIEV4aXRbXT4oKCkgPT4gW10pO1xuICBmb3IgKGNvbnN0IGV4aXQgb2YgZXhpdHMudmFsdWVzKCkpIHtcbiAgICAvL2FyZWFUb0xvY2F0aW9uTWFwLnNldChleGl0LmFyZWEsIGV4aXQubG9jLm5hbWUpO1xuICAgIGlmICghZXhpdC5zaHVmZmxlKSBjb250aW51ZTtcbiAgICBhcmVhRXhpdHMuZ2V0KGV4aXQuYXJlYSA9IHVmLmZpbmQoZXhpdC5hcmVhKSkucHVzaChleGl0KTtcbiAgfVxuXG4gIC8vIERJQUdOT1NUSUM6IGNoZWNrIHRoYXQgdGhlIGFyZWFzIGFyZSBjb3JyZWN0XG4gIC8vIGZvciAoY29uc3Qgc2V0IG9mIHVmLnNldHMoKSkge1xuICAvLyAgIGNvbnNvbGUubG9nKGBBcmVhOiAke1suLi5zZXRdLm1hcChsID0+IGFyZWFUb0xvY2F0aW9uTWFwLmdldChsKSkuam9pbignLCAnKX1gKTtcbiAgLy8gfVxuXG4gIC8vIFBhcnRpdGlvbnMgYXJlYSBrZXlzLiAgUmV0dXJucyB0aGUgbnVtYmVyIG9mIHBhcnRpdGlvbnMgKD4xIG1lYW5zXG4gIC8vIHRoZSBtYXAgaXMgZGlzY29ubmVjdGlvbiksIGEgbWFwIGZyb20gZXhpdCB0byBwYXJ0aXRpb24gbnVtYmVyLCBhbmRcbiAgLy8gdGhlIGxpc3Qgb2YgZXhpdHMgaW4gdGhlIHNtYWxsZXN0IHBhcnRpdGlvbiwgdG8gYmUgdXNlZCBhcyBhIHBvb2xcbiAgLy8gb2YgZXhpdHMgdG8gc3dhcCBuZXh0IHRvIGhhdmUgdGhlIGJlc3QgY2hhbmNlIHRvIHJlY29ubmVjdGluZy5cbiAgY29uc3Qgc3RhcnQgPSBleGl0c0J5TG9jYXRpb24uZ2V0KGxvYy5NZXphbWVTaHJpbmUpWzBdLmFyZWE7XG4gIGZ1bmN0aW9uIHRyYXZlcnNlKCk6IFtudW1iZXIsIE1hcDxFeGl0LCBudW1iZXI+LCBFeGl0W11dIHtcbiAgICBjb25zdCBzZWVuID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXA8RXhpdCwgbnVtYmVyPigpO1xuICAgIGNvbnN0IHBhcnRpdGlvbnM6IEV4aXRbXVtdID0gW107XG4gICAgZm9yIChjb25zdCBhcmVhIG9mIFtzdGFydCwgLi4uYXJlYUV4aXRzLmtleXMoKV0pIHtcbiAgICAgIGlmIChzZWVuLmhhcyhhcmVhKSkgY29udGludWU7XG4gICAgICBjb25zdCBxdWV1ZSA9IG5ldyBTZXQoW2FyZWFdKTtcbiAgICAgIGNvbnN0IHBhcnRpdGlvbjogRXhpdFtdID0gW107XG4gICAgICBmb3IgKGNvbnN0IG5leHQgb2YgcXVldWUpIHtcbiAgICAgICAgc2Vlbi5hZGQobmV4dCk7XG4gICAgICAgIGZvciAoY29uc3QgZXhpdCBvZiBhcmVhRXhpdHMuZ2V0KG5leHQpKSB7XG4gICAgICAgICAgbWFwLnNldChleGl0LCBwYXJ0aXRpb25zLmxlbmd0aCk7XG4gICAgICAgICAgcGFydGl0aW9uLnB1c2goZXhpdCk7XG4gICAgICAgICAgaWYgKGV4aXQub25lV2F5IHx8IHNlZW4uaGFzKGV4aXQucmV2ZXJzZS5hcmVhKSkgY29udGludWU7XG4gICAgICAgICAgcXVldWUuYWRkKGV4aXQucmV2ZXJzZS5hcmVhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGFydGl0aW9ucy5wdXNoKHBhcnRpdGlvbik7XG4gICAgfVxuICAgIGxldCBtaW4gPSAwO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGFydGl0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBhcnRpdGlvbnNbaV0ubGVuZ3RoIDwgcGFydGl0aW9uc1ttaW5dLmxlbmd0aCkgbWluID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIFtwYXJ0aXRpb25zLmxlbmd0aCwgbWFwLCBwYXJ0aXRpb25zW21pbl1dO1xuICB9XG5cbiAgLy8gVE9ETyAtIGNvbnNpZGVyIHN3YXBwaW5nICdYJyBhbmQgJ1MnIHRvd24gZXhpdHM/XG4gIC8vICAtIFM6IFN3YW4sIFNoeXJvbiwgR29hXG4gIC8vICAtIFg6IE9haywgSm9lbFxuXG4gIC8vIFRPRE8gLSBjb25zaWRlciBhbGxvd2luZyBhIGZldyB3cm9uZyBleGl0IHBhaXJzIGJ5IGFkZGluZyBzbWFsbCBjb25uZWN0b3JzP1xuXG4gIGNvbnN0IGV4aXRzQnlDb25uID0gbmV3IERlZmF1bHRNYXA8QXJlYUNvbm5lY3Rpb24sIEV4aXRbXT4oKCkgPT4gW10pO1xuICBmb3IgKGNvbnN0IGV4aXQgb2YgZXhpdHMudmFsdWVzKCkpIHtcbiAgICBpZiAoIWV4aXQuc2h1ZmZsZSB8fCAhZXhpdC5jb25uKSBjb250aW51ZTtcbiAgICBleGl0c0J5Q29ubi5nZXQoZXhpdC5jb25uKS5wdXNoKGV4aXQpO1xuICB9XG5cbiAgZm9yIChjb25zdCBjIG9mICgnTldDRicgYXMgSXRlcmFibGU8QXJlYUNvbm5lY3Rpb24+KSkge1xuICAgIGNvbnN0IG9yaWdpbmFsID0gZXhpdHNCeUNvbm4uZ2V0KGMpITtcbiAgICBjb25zdCBzaHVmZmxlZCA9IHJhbmRvbS5zaHVmZmxlKFsuLi5vcmlnaW5hbF0pLm1hcChlID0+IGUucmV2ZXJzZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaHVmZmxlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZXhpdDEgPSBvcmlnaW5hbFtpXTtcbiAgICAgIGNvbnN0IGV4aXQyID0gc2h1ZmZsZWRbaV07XG4gICAgICBbZXhpdDEucmV2ZXJzZSwgZXhpdDIucmV2ZXJzZV0gPSBbZXhpdDIsIGV4aXQxXTtcbiAgICB9XG4gIH1cblxuICAvLyBSZWNvbm5lY3QgYW55IGRpc2Nvbm5lY3RlZCBwaWVjZXNcbiAgbGV0IGl0ZXJhdGlvbnMgPSAwO1xuICBsZXQgW2NvdW50LCB0cmF2ZXJzYWwsIHBvb2xdID0gdHJhdmVyc2UoKTtcbiAgd2hpbGUgKGl0ZXJhdGlvbnMtLSA+IDAgfHwgY291bnQgPiAxKSB7IC8vIGNvdWxkIHN3aXRjaCBvcmRlcj9cbiAgICBjb25zdCBleGl0MSA9IHJhbmRvbS5waWNrKHBvb2wpO1xuICAgIGxldCBlbGlnaWJsZSA9IGV4aXRzQnlDb25uLmdldChleGl0MS5jb25uISk7XG4gICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgY29uc3QgYXZvaWQgPSB0cmF2ZXJzYWwuZ2V0KGV4aXQxKTtcbiAgICAgIGVsaWdpYmxlID0gZWxpZ2libGUuZmlsdGVyKGUgPT4gdHJhdmVyc2FsLmdldChlKSAhPT0gYXZvaWQpO1xuICAgIH1cbiAgICBjb25zdCBleGl0MiA9IHJhbmRvbS5waWNrKGVsaWdpYmxlKTtcbiAgICBjb25zdCByZXYxID0gZXhpdDEucmV2ZXJzZTtcbiAgICBjb25zdCByZXYyID0gZXhpdDIucmV2ZXJzZTtcbiAgICBleGl0MS5yZXZlcnNlID0gcmV2MjtcbiAgICByZXYyLnJldmVyc2UgPSBleGl0MTtcbiAgICBleGl0Mi5yZXZlcnNlID0gcmV2MTtcbiAgICByZXYxLnJldmVyc2UgPSBleGl0MjtcbiAgICBbY291bnQsIHRyYXZlcnNhbCwgcG9vbF0gPSB0cmF2ZXJzZSgpO1xuICAgIGlmIChpdGVyYXRpb25zIDwgLTEwKSBkZWJ1Z2dlcjtcbiAgfVxuXG4gIGZvciAoY29uc3QgZXhpdCBvZiBleGl0cy52YWx1ZXMoKSkge1xuICAgIGlmIChleGl0LnJldmVyc2UgIT09IGV4aXQub3JpZ1Jldikge1xuICAgICAgZnVuY3Rpb24gc2hvd0V4aXQoZTogRXhpdCkgeyByZXR1cm4gYCR7ZS5sb2MubmFtZX0gJHtlLnR5cGV9KCR7ZS5wb3MudG9TdHJpbmcoMTYpfSlgOyB9XG4gICAgICBjb25zb2xlLmxvZyhgJHtzaG93RXhpdChleGl0KX0gID0+ICAke3Nob3dFeGl0KGV4aXQucmV2ZXJzZSl9ICAod2FzICR7c2hvd0V4aXQoZXhpdC5vcmlnUmV2KX0pYCk7XG4gICAgfVxuXG4gICAgZXhpdC5sb2MubWV0YS5hdHRhY2goZXhpdC5wb3MsIGV4aXQucmV2ZXJzZS5sb2MubWV0YSwgZXhpdC5yZXZlcnNlLnBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBleGl0LnR5cGUsIGV4aXQucmV2ZXJzZS50eXBlKTtcbiAgfVxuXG4gIC8vY29uc29sZS5sb2codHJhdmVyc2UoKSk7XG4gIC8vZGVidWdnZXI7XG59XG5cbi8vIGZ1bmN0aW9uIG1hdGNoRXhpdChmaW5kZXI6IEV4aXRGaW5kZXIpOlxuLy8gICAgICAgKGU6IHJlYWRvbmx5IFtudW1iZXIsIENvbm5lY3Rpb25UeXBlLCBFeGl0U3BlY10pID0+IGJvb2xlYW4ge1xuLy8gICBpZiAodHlwZW9mIGZpbmRlciA9PT0gJ3N0cmluZycpIHJldHVybiAoWywgdF0pID0+IHQgPT09IGZpbmRlcjtcbi8vICAgaWYgKHR5cGVvZiBmaW5kZXIgPT09ICdudW1iZXInKSByZXR1cm4gKFtwXSkgPT4gcCA9PT0gZmluZGVyO1xuLy8gICBpZiAoZmluZGVyIGluc3RhbmNlb2YgTG9jYXRpb24pIHJldHVybiAoWywsIFtsXV0pID0+IChsID4+PiA4KSA9PT0gZmluZGVyLmlkO1xuLy8gICBjb25zdCBtYXRjaGVycyA9IGZpbmRlci5tYXAobWF0Y2hFeGl0KTtcbi8vICAgcmV0dXJuIChlKSA9PiBtYXRjaGVycy5ldmVyeShmID0+IGYoZSkpO1xuLy8gfVxuXG4vLyBmdW5jdGlvbiBleGl0S2V5KGxvY1BvczogbnVtYmVyLCBleGl0VHlwZTogQ29ubmVjdGlvblR5cGUpIHtcbi8vICAgcmV0dXJuIGxvY1Bvcy50b1N0cmluZygxNikgKyAnICcgKyBleGl0VHlwZTtcbi8vIH1cblxuLy8gZnVuY3Rpb24gYWRkRXhpdHMoZnJvbUxvYzogTG9jYXRpb24sXG4vLyAgICAgICAgICAgICAgICAgICAuLi5leGl0U3BlY3M6IEFyZWFFeGl0U3BlY1tdKTogdm9pZCB7XG4vLyAgIGNvbnN0IGV4aXRzID0gWy4uLmZyb21Mb2MubWV0YS5leGl0cygpXTtcbi8vICAgZm9yIChjb25zdCBbY29ubmVjdGlvbiwgZmluZGVyLCB0b0FyZWEsIG9uZVdheV0gb2YgZXhpdFNwZWNzKSB7XG4vLyAgICAgY29uc3QgW2V4aXQsIC4uLnJlc3RdID0gZXhpdHMuZmlsdGVyKG1hdGNoRXhpdChmaW5kZXIpKTtcbi8vICAgICBpZiAoIWV4aXQpIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBleGl0OiAke2ZpbmRlcn0gaW4gJHtmcm9tTG9jfWApO1xuLy8gICAgIGlmIChyZXN0Lmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKGBBbWJpZ3VvdXMgZXhpdDogJHtmaW5kZXJ9IGluICR7ZnJvbUxvY31gKTtcbi8vICAgICBjb25zdCBmcm9tTG9jUG9zID0gZnJvbUxvYy5pZCA8PCA4IHwgZXhpdFswXTtcbi8vICAgICBjb25zdCBmcm9tVHlwZSA9IGV4aXRbMV07XG4vLyAgICAgY29uc3QgZnJvbUtleSA9IGV4aXRLZXkoZnJvbUxvY1BvcywgZnJvbVR5cGUpO1xuLy8gICAgIGNvbnN0IFt0b0xvY1BvcywgdG9UeXBlXSA9IGV4aXRbMl07XG4vLyAgICAgY29uc3QgdG9LZXkgPSBleGl0S2V5KHRvTG9jUG9zLCB0b1R5cGUpO1xuLy8gICAgIGNvbnN0IGZyb21FeGl0ID0ge1xuLy8gICAgICAgY29ubjogY29ubmVjdGlvbixcbi8vICAgICAgIGRlc3Q6IHRvQXJlYSxcbi8vICAgICAgIGRlc3RLZXk6IHRvS2V5LFxuLy8gICAgICAgbG9jUG9zOiBmcm9tTG9jUG9zLFxuLy8gICAgICAgZXhpdFR5cGU6IGZyb21UeXBlLFxuLy8gICAgIH07XG4vLyAgICAgY29uc3QgdG9FeGl0ID0ge1xuLy8gICAgICAgY29ubjogY29ubkludmVyc2UuZ2V0KGNvbm5lY3Rpb24pISxcbi8vICAgICAgIGRlc3Q6IGZyb21BcmVhLFxuLy8gICAgICAgZGVzdEtleTogZnJvbUtleSxcbi8vICAgICAgIGxvY1BvczogdG9Mb2NQb3MsXG4vLyAgICAgICBleGl0VHlwZTogdG9UeXBlLFxuLy8gICAgIH07XG4vLyAgICAgZnJvbUFyZWEuZXhpdHMuc2V0KGZyb21LZXksIGZyb21FeGl0KTtcbi8vICAgICBpZiAoIW9uZVdheSkgdG9BcmVhLmV4aXRzLnNldCh0b0tleSwgdG9FeGl0KTtcbi8vICAgfVxuLy8gfVxuXG4vLyBmdW5jdGlvbiBidWlsZEtleShsb2M6IExvY2F0aW9ufG51bGwsXG4vLyAgICAgICAgICAgICAgICAgICBbcG9zLCB0eXBdOiByZWFkb25seSBbUG9zLCBDb25uZWN0aW9uVHlwZSwgLi4udW5rbm93bltdXSk6IHN0cmluZyB7XG4vLyAgIHJldHVybiAoKGxvYyA/IGxvYy5pZCA8PCA4IDogMCkgfCBwb3MpLnRvU3RyaW5nKDE2KSArICcgJyArIHR5cDtcbi8vIH1cblxuXG4vLyBjbGFzcyBFeGl0TWFwIHtcbi8vICAgZXhpdHMgPSBuZXcgTWFwPHN0cmluZywgRXhpdD4oKTtcblxuLy8gICBsb2NhdGlvbnMgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuLy8gICBleGl0c0J5TG9jYXRpb24gPSBuZXcgRGVmYXVsdE1hcDxzdHJpbmcsIFNldDxzdHJpbmc+PigoKSA9PiBuZXcgU2V0KCkpO1xuLy8gICBvcHBvc2l0ZXMgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuXG4vLyAgIHNwbGl0TG9jYXRpb24obG9jOiBMb2NhdGlvbiwgLi4uZmluZGVyczogRXhpdEZpbmRlcltdKSB7XG4vLyAgICAgY29uc3QgbWF0Y2hlcnMgPSBmaW5kZXJzLm1hcChtYXRjaEV4aXQpO1xuLy8gICAgIGxldCBrZXk6IHN0cmluZ3x1bmRlZmluZWQ7XG4vLyAgICAgZm9yIChjb25zdCBleGl0IG9mIGxvYy5tZXRhLmV4aXRzKCkpIHtcbi8vICAgICAgIGZvciAoY29uc3QgbWF0Y2hlciBvZiBtYXRjaGVycykge1xuLy8gICAgICAgICBpZiAoIW1hdGNoZXIoZXhpdCkpIGNvbnRpbnVlO1xuLy8gICAgICAgICBsZXQgZXhpdEtleSA9IGJ1aWxkS2V5KGxvYywgZXhpdCk7XG4vLyAgICAgICAgIGlmIChrZXkgPT0gdW5kZWZpbmVkKSBrZXkgPSBleGl0S2V5O1xuLy8gICAgICAgICB0aGlzLmxvY2F0aW9ucy5zZXQoZXhpdEtleSwga2V5KTtcbi8vICAgICAgICAgYnJlYWs7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICB9XG5cbi8vICAgbG9jYXRpb25LZXkobG9jOiBMb2NhdGlvbiwgZXhpdDogRXhpdERlc2NyaXB0b3IpOiBzdHJpbmcge1xuLy8gICAgIGNvbnN0IGtleSA9IGJ1aWxkS2V5KGxvYywgZXhpdCk7XG4vLyAgICAgbGV0IHZhbHVlID0gdGhpcy5sb2NhdGlvbnMuZ2V0KGtleSk7XG4vLyAgICAgaWYgKCF2YWx1ZSkgdGhpcy5sb2NhdGlvbnMuc2V0KGtleSwgdmFsdWUgPSBsb2MuaWQudG9TdHJpbmcoMTYpKTtcblxuLy8gICAgIC8vIFRPRE8gLSB0aGlzLmV4aXRzQnlMb2NhdGlvblxuXG4vLyAgICAgcmV0dXJuIHZhbHVlO1xuLy8gICB9XG5cbi8vICAgcHJpdmF0ZSBhZGRFeGl0SW50ZXJuYWwoZnJvbUtleTogc3RyaW5nLCB0b0tleTogc3RyaW5nKTogdm9pZCB7XG4gICAgXG4vLyAgIH1cblxuLy8gICBhZGRFeGl0KGxvYzogTG9jYXRpb24sIGNvbm46IEFyZWFDb25uZWN0aW9uLCBleGl0PzogRXhpdEZpbmRlcik6IHZvaWQge1xuICAgIFxuLy8gICB9XG4vLyAgIGFkZEV4aXRzKGxvYzogTG9jYXRpb24sIC4uLmV4aXRzOiBFeGl0RmluZGVyW10pOiB2b2lkIHtcblxuLy8gICB9XG4vLyAgIGFkZEFsbEV4aXRzKGxvYzogTG9jYXRpb24pOiB2b2lkIHtcbi8vICAgICBmb3IgKGNvbnN0IGV4aXQgb2YgbG9jLm1ldGEuZXhpdHMoKSkge1xuICAgICAgXG4vLyAgICAgICBjb25zdCBmcm9tS2V5ID0gYnVpbGRLZXkobG9jLCBleGl0KTtcbi8vICAgICAgIGNvbnN0IHRvS2V5ID0gYnVpbGRLZXkobnVsbCwgZXhpdFsyXSk7XG4vLyAgICAgICB0aGlzLmFkZEV4aXRJbnRlcm5hbChmcm9tS2V5LCB0b0tleSk7XG4vLyAgICAgfVxuLy8gICB9XG4gIFxuLy8gICAvLyBhcmVhKGxvYzogTG9jYXRpb24sIGZpbmRlcjogRXhpdEZpbmRlcik6IHN0cmluZyB7XG4vLyAgIC8vICAgLy8gXG4vLyAgIC8vIH1cbi8vIH1cblxuLy8gZnVuY3Rpb24gdW51c2VkKCkge1xuLy8gICBhZGRFeGl0cyhhcmVhLlN0YXJ0LCBsb2MuTGVhZl9PdXRzaWRlU3RhcnQsIFsnVycsIGxvYy5MZWFmLCBhcmVhLkxlYWZdKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5XaW5kVmFsbGV5LCBsb2MuVmFsbGV5T2ZXaW5kLFxuLy8gICAgICAgICAgICBbJ1MnLCBsb2MuTGVhZiwgYXJlYS5MZWFmXSxcbi8vICAgICAgICAgICAgWydDJywgbG9jLlplYnVDYXZlLCBhcmVhLlplYnVdLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuU2VhbGVkQ2F2ZTEsIGFyZWEuU2VhbGVkQ2F2ZV0pO1xuLy8gICBpZiAoZmxhZ3Muc2h1ZmZsZUhvdXNlcygpKSB7XG4vLyAgICAgYWRkRXhpdHMoYXJlYS5XaW5kVmFsbGV5LCBsb2MuVmFsbGV5T2ZXaW5kLCBbJ0MnLCAweDAyLCBhcmVhLldpbmRtaWxsQ2F2ZV0pO1xuLy8gICAgIGFkZEV4aXRzKGFyZWEuV2luZG1pbGwsIGxvYy5WYWxsZXlPZldpbmQsIFsnQycsICdkb29yJywgYXJlYS5XaW5kbWlsbENhdmVdKTtcbi8vICAgfVxuLy8gICBpZiAoZmxhZ3MuYWRkRWFzdENhdmUoKSkge1xuLy8gICAgIGFkZEV4aXRzKGFyZWEuV2luZFZhbGxleSwgbG9jLlZhbGxleU9mV2luZCxcbi8vICAgICAgICAgICAgICBbJ0MnLCBsb2MuRWFzdENhdmUxLCBhcmVhLkVhc3RDYXZlXSk7XG4vLyAgICAgLy8gTk9URTogV2UgY291bGQgcG9zc2libHkgYWRkIGV4aXQxIGFuZCBleGl0MiwgYnV0IGl0J3Ncbi8vICAgICAvLyBoYXJkIHRvIGZpZ3VyZSBvdXQgaWYgKDEpIHRoZXkgZXZlbiBleGlzdCwgYW5kICgyKSBpZlxuLy8gICAgIC8vIHRoZXkgZG8sIHdoaWNoIF9hcmVhXyB0aGV5IGdvIHRvLiAgRm9yIG5vdywgd2UnbGwgdHJlYXRcbi8vICAgICAvLyBpdCBhcyBhIHRlcm1pbmFsLCBzaW5jZSB0aGUgb3RoZXIgZXhpdHMgYXJlIGFscmVhZHlcbi8vICAgICAvLyBzb21ld2hhdCByYW5kb21pemVkLlxuLy8gICB9XG4vLyAgIGFkZEV4aXRzKGFyZWEuQ29yZGVsUGxhaW4sIGxvYy5Db3JkZWxQbGFpbldlc3QsXG4vLyAgICAgICAgICAgIFsnQycsIGxvYy5TZWFsZWRDYXZlOCwgYXJlYS5TZWFsZWRDYXZlXSxcbi8vICAgICAgICAgICAgWydXJywgbG9jLkJyeW5tYWVyLCBhcmVhLkJyeW5tYWVyXSxcbi8vICAgICAgICAgICAgWydXJywgbG9jLk10U2FicmVXZXN0X0xvd2VyLCBhcmVhLlNhYnJlV2VzdF0sXG4vLyAgICAgICAgICAgIFsnTicsIGxvYy5PdXRzaWRlU3RvbUhvdXNlLCBhcmVhLlN0b21Ib3VzZV0sXG4vLyAgICAgICAgICAgIFsnUycsIGxvYy5BbWF6b25lcywgYXJlYS5BbWF6b25lc10pO1xuLy8gICBhZGRFeGl0cyhhcmVhLkNvcmRlbFBsYWluLCBsb2MuQ29yZGVsUGxhaW5FYXN0LFxuLy8gICAgICAgICAgICBbJ0UnLCBsb2MuU3dhbXAsIGFyZWEuU3dhbXBdLFxuLy8gICAgICAgICAgICBbJ04nLCBsb2MuTXRTYWJyZU5vcnRoX01haW4sIGFyZWEuU2FicmVOb3J0aF0pO1xuLy8gICBhZGRFeGl0cyhhcmVhLldhdGVyZmFsbFZhbGxleSwgbG9jLldhdGVyZmFsbFZhbGxleU5vcnRoLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuTXRTYWJyZU5vcnRoX1N1bW1pdENhdmUsIGFyZWEuU2FicmVOb3J0aF0sXG4vLyAgICAgICAgICAgIFsnVycsIGxvYy5Qb3J0b2EsIGFyZWEuUG9ydG9hXSxcbi8vICAgICAgICAgICAgWydDJywgbG9jLldhdGVyZmFsbENhdmUxLCBhcmVhLldhdGVyZmFsbENhdmVdLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuRm9nTGFtcENhdmUxLCBhcmVhLkZvZ0xhbXBDYXZlXSk7XG4vLyAgIGFkZEV4aXRzKGFyZWEuV2F0ZXJmYWxsVmFsbGV5LCBsb2MuV2F0ZXJmYWxsVmFsbGV5U291dGgsXG4vLyAgICAgICAgICAgIFsnQycsIGxvYy5LaXJpc2FQbGFudENhdmUxLCBhcmVhLktpcmlzYUNhdmVdLFxuLy8gICAgICAgICAgICBbJ1cnLCBsb2MuTGltZVRyZWVWYWxsZXksIGFyZWEuTGltZVRyZWVWYWxsZXldKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5LaXJpc2FDYXZlLCBsb2MuS2lyaXNhUGxhbnRDYXZlMyxcbi8vICAgICAgICAgICAgWydYJywgbG9jLktpcmlzYU1lYWRvdywgYXJlYS5LaXJpc2FNZWFkb3ddKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5MaW1lVHJlZUxha2UsIGxvYy5MaW1lVHJlZUxha2UsXG4vLyAgICAgICAgICAgIFsnWCcsIGxvYy5MaW1lVHJlZVZhbGxleSwgYXJlYS5MaW1lVHJlZVZhbGxleV0sXG4vLyAgICAgICAgICAgIFsnQycsIGxvYy5NZXNpYVNocmluZSwgYXJlYS5NZXNpYVNocmluZV0pO1xuLy8gICBhZGRFeGl0cyhhcmVhLkFuZ3J5U2VhLCBsb2MuUG9ydG9hX0Zpc2hlcm1hbklzbGFuZCxcbi8vICAgICAgICAgICAgLy8gVE9ETyAtIGhvdyB0byBtYWtlIHRoaXMgb25lLXdheT9cbi8vICAgICAgICAgICAgWydFJywgbG9jLlBvcnRvYSwgYXJlYS5Qb3J0b2EsIHRydWVdKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5BbmdyeVNlYSwgbG9jLkV2aWxTcGlyaXRJc2xhbmQxLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuRXZpbFNwaXJpdElzbGFuZDIsIGFyZWEuRXZpbFNwaXJpdElzbGFuZF0pO1xuLy8gICBhZGRFeGl0cyhhcmVhLkFuZ3J5U2VhLCBsb2MuQW5ncnlTZWEsXG4vLyAgICAgICAgICAgIFsnQycsIGxvYy5Kb2VsLCBhcmVhLkpvZWxdLFxuLy8gICAgICAgICAgICBbJ04nLCBsb2MuU3dhbiwgYXJlYS5Td2FuXSk7XG4vLyAgIGlmICghZmxhZ3Muc2h1ZmZsZUhvdXNlcygpKSB7XG4vLyAgICAgLy8gVE9ETyAtIHdyb25nIGFyZWEgaWYgd2UgaGF2ZSBob3VzZSBzaHVmZmxlLi4uPyBob3cgdG8gZml4P1xuLy8gICAgIGFkZEV4aXRzKGFyZWEuSm9lbFBhc3NhZ2UsIGxvYy5Kb2VsU2VjcmV0UGFzc2FnZSxcbi8vICAgICAgICAgICAgICBbJ1gnLCBsb2MuSm9lbF9TaGVkLCBhcmVhLkpvZWxdLFxuLy8gICAgICAgICAgICAgIFsnWCcsIGxvYy5BbmdyeVNlYSwgYXJlYS5MaWdodGhvdXNlXSk7XG4vLyAgIH1cbi8vICAgYWRkRXhpdHMoYXJlYS5ab21iaWVUb3duLCBsb2MuWm9tYmllVG93bixcbi8vICAgICAgICAgICAgWydDJywgJ2NhdmUnLCBhcmVhLkV2aWxTcGlyaXRJc2xhbmRdKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5Td2FuLCBsb2MuU3dhbiwgWydXJywgbG9jLlN3YW5HYXRlLCBhcmVhLlN3YW5HYXRlXSk7XG4vLyAgIGFkZEV4aXRzKGFyZWEuR29hVmFsbGV5LCBsb2MuR29hVmFsbGV5LFxuLy8gICAgICAgICAgICBbJ0UnLCBsb2MuU3dhbkdhdGUsIGFyZWEuU3dhbkdhdGVdLFxuLy8gICAgICAgICAgICBbJ1cnLCBsb2MuTXRIeWRyYSwgYXJlYS5IeWRyYV0sXG4vLyAgICAgICAgICAgIFsnUycsIGxvYy5EZXNlcnQxLCBhcmVhLkRlc2VydDFdKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5EZXNlcnQxLCBsb2MuRGVzZXJ0MSxcbi8vICAgICAgICAgICAgWydDJywgbG9jLk9hc2lzQ2F2ZV9FbnRyYW5jZSwgYXJlYS5PYXNpc0NhdmVdLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuRGVzZXJ0Q2F2ZTEsIGFyZWEuRGVzZXJ0Q2F2ZTFdKTtcbi8vICAgYWRkRXhpdHMoYXJlYS5PYXNpc0NhdmUsIGxvYy5PYXNpc0NhdmVNYWluLFxuLy8gICAgICAgICAgICBbJ0MnLCBsb2MuR29hRm9ydHJlc3NCYXNlbWVudCwgYXJlYS5Hb2FCYXNlbWVudF0pO1xuLy8gICBhZGRFeGl0cyhhcmVhLkRlc2VydENhdmUxLCBsb2MuRGVzZXJ0Q2F2ZTEsXG4vLyAgICAgICAgICAgIFsnWCcsIGxvYy5TYWhhcmFNZWFkb3csIGFyZWEuU2FoYXJhXSk7XG4vLyAgIGFkZEV4aXRzKGFyZWEuU2FoYXJhRXhpdCwgbG9jLlNhaGFyYU91dHNpZGVDYXZlLFxuLy8gICAgICAgICAgICBbJ1cnLCBsb2MuU2FoYXJhLCBhcmVhLlNhaGFyYV0sXG4vLyAgICAgICAgICAgIFsnQycsIGxvYy5EZXNlcnRDYXZlMiwgYXJlYS5EZXNlcnRDYXZlMl0pO1xuLy8gICBhZGRFeGl0cyhhcmVhLkVuZCwgbG9jLkRlc2VydDIsIFsnQycsIGxvYy5EZXNlcnRDYXZlMiwgYXJlYS5EZXNlcnRDYXZlMl0pO1xuXG4vLyAgIC8vIFdlJ3ZlIGdvdCB0aGUgd2hvbGUgZ3JhcGggc2V0IHVwLiAgTm93IHdlIG5lZWQgYSBmdW5jdGlvbiB0byB0cmF2ZXJzZSB0aGVcbi8vICAgLy8gZ3JhcGggYW5kIG1ha2Ugc3VyZSBpdCdzIHZhbGlkLlxuLy8gICBjb25zdCBhbGxBcmVhcyA9IE9iamVjdC5rZXlzKGFyZWEpLm1hcChrID0+IGFyZWFbayBhcyBrZXlvZiB0eXBlb2YgYXJlYV0pXG4vLyAgICAgICAuZmlsdGVyKGEgPT4gYS5leGl0cy5zaXplKTtcbi8vICAgZnVuY3Rpb24gdHJhdmVyc2UoKTogQXJyYXk8TWFwPEFyZWFDb25uZWN0aW9uLCBBcmVhRXhpdFtdPj4ge1xuLy8gICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG4vLyAgICAgY29uc3Qgb3V0ID0gW107XG4vLyAgICAgZm9yIChjb25zdCBhIG9mIFthcmVhLlN0YXJ0LCAuLi5hbGxBcmVhc10pIHtcbi8vICAgICAgIGlmIChzZWVuLmhhcyhhKSkgY29udGludWU7XG4vLyAgICAgICBjb25zdCBxdWV1ZSA9IG5ldyBTZXQoW2FdKTtcbi8vICAgICAgIGNvbnN0IG1hcCA9IG5ldyBEZWZhdWx0TWFwPEFyZWFDb25uZWN0aW9uLCBBcmVhRXhpdFtdPigoKSA9PiBbXSk7XG4vLyAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgcXVldWUpIHtcbi8vICAgICAgICAgZm9yIChjb25zdCBleGl0IG9mIG5leHQuZXhpdHMudmFsdWVzKCkpIHtcbi8vICAgICAgICAgICBpZiAoc2Vlbi5oYXMoZXhpdC5kZXN0KSkgY29udGludWU7XG4vLyAgICAgICAgICAgc2Vlbi5hZGQoZXhpdC5kZXN0KTtcbi8vICAgICAgICAgICBxdWV1ZS5hZGQoZXhpdC5kZXN0KTtcbi8vICAgICAgICAgICBtYXAuZ2V0KGV4aXQuY29ubikucHVzaChleGl0KTtcbi8vICAgICAgICAgICBjb25zdCByZXZlcnNlID0gZXhpdC5kZXN0LmV4aXRzLmdldChleGl0LmRlc3RLZXkpO1xuLy8gICAgICAgICAgIGlmIChyZXZlcnNlKSBtYXAuZ2V0KHJldmVyc2UuY29ubikucHVzaChyZXZlcnNlKTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgfVxuLy8gICAgICAgb3V0LnB1c2gobWFwKTtcbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIG91dDtcbi8vICAgfVxuXG4vLyAgIC8vIEJhc2ljIHBsYW46IHBpY2sgdHdvIHJhbmRvbSBleGl0cyBvZiB0aGUgc2FtZSB0eXBlLlxuLy8gICBsZXQgaXRlcnMgPSAxMDA7XG4vLyAgIGxldCB0cmF2ZXJzYWwgPSB0cmF2ZXJzZSgpO1xuLy8gICB3aGlsZSAoaXRlcnMtLSA+IDAgfHwgdHJhdmVyc2FsLmxlbmd0aCA+IDEpIHtcbi8vICAgICBpZiAodHJhdmVyc2FsLmxlbmd0aCA+IDIpIHJhbmRvbS5zaHVmZmxlKHRyYXZlcnNhbCk7XG4vLyAgICAgaWYgKHRyYXZlcnNhbC5sZW5ndGggPiAxKSB7XG4vLyAgICAgICAvLyBwaWNrIGFuIGNvbm4gdHlwZSB0aGF0J3MgcHJlc2VudCBpbiBib3RoIHNldHNcbi8vICAgICB9XG4vLyAgICAgdHJhdmVyc2FsID0gdHJhdmVyc2UoKTtcbi8vICAgfVxuLy8gfVxuIl19