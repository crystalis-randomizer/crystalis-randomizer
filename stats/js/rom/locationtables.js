import { DataTuple, hex } from './util.js';
export class Entrance extends DataTuple {
    constructor() {
        super(...arguments);
        this.x = this.prop([0], [1, 0xff, -8]);
        this.y = this.prop([2], [3, 0xff, -8]);
        this.screen = this.prop([3, 0x0f, -4], [1, 0x0f]);
        this.tile = this.prop([2, 0xf0], [0, 0xf0, 4]);
        this.coord = this.prop([2, 0xff, -8], [0, 0xff]);
    }
    get used() {
        return this.data[1] < 0x08;
    }
    ;
    toString() {
        return `Entrance ${this.hex()}: (${hex(this.y)}, ${hex(this.x)})`;
    }
}
Entrance.size = 4;
export class Exit extends DataTuple {
    constructor() {
        super(...arguments);
        this.x = this.prop([0, 0xff, -4]);
        this.xt = this.prop([0]);
        this.y = this.prop([1, 0xff, -4]);
        this.yt = this.prop([1]);
        this.screen = this.prop([1, 0xf0], [0, 0xf0, 4]);
        this.tile = this.prop([1, 0x0f, -4], [0, 0x0f]);
        this.coord = this.prop([1, 0x0f, -12], [0, 0x0f, -4]);
        this.dest = this.prop([2]);
        this.entrance = this.prop([3]);
    }
    isSeamless() {
        return Boolean(this.entrance & 0x20);
    }
    toString() {
        return `Exit ${this.hex()}: (${hex(this.y)}, ${hex(this.x)}) => ${this.dest}:${this.entrance}`;
    }
}
Exit.size = 4;
export class Flag extends DataTuple {
    constructor() {
        super(...arguments);
        this.x = this.prop([1, 0x07, -8]);
        this.xs = this.prop([1, 0x07]);
        this.y = this.prop([1, 0xf0, -4]);
        this.ys = this.prop([1, 0xf0, 4]);
        this.screen = this.prop([1]);
    }
    get flag() {
        return this.data[0] | 0x200;
    }
    set flag(f) {
        if ((f & ~0xff) !== 0x200)
            throw new Error(`bad flag: ${hex(f)}`);
        this.data[0] = f & 0xff;
    }
    toString() {
        return `Flag ${this.hex()}: ${hex(this.screen)} @ ${hex(this.flag)}`;
    }
}
Flag.size = 2;
export class Pit extends DataTuple {
    constructor() {
        super(...arguments);
        this.fromXs = this.prop([1, 0x70, 4]);
        this.toXs = this.prop([1, 0x07]);
        this.fromYs = this.prop([3, 0xf0, 4]);
        this.toYs = this.prop([3, 0x0f]);
        this.fromScreen = this.prop([3, 0xf0], [1, 0x70, 4]);
        this.toScreen = this.prop([3, 0x0f, -4], [1, 0x07]);
        this.dest = this.prop([0]);
    }
    toString() {
        return `Pit ${this.hex()}: (${hex(this.fromXs)}, ${hex(this.fromYs)}) => ${hex(this.dest)}:(${hex(this.toXs)}, ${hex(this.toYs)})`;
    }
}
Pit.size = 4;
export class Spawn extends DataTuple {
    constructor() {
        super(...arguments);
        this.y = this.prop([0, 0xff, -4]);
        this.yt = this.prop([0]);
        this.x = this.prop([1, 0x7f, -4], [2, 0x40, 3]);
        this.xt = this.prop([1, 0x7f]);
        this.timed = this.booleanProp(1, 7);
        this.screen = this.prop([0, 0xf0], [1, 0x70, 4]);
        this.tile = this.prop([0, 0x0f, -4], [1, 0x0f]);
        this.coord = this.prop([0, 0x0f, -12], [1, 0x0f, -4], [2, 0x40, 3]);
        this.type = this.prop([2, 0x07]);
        this.id = this.prop([3]);
        this.patternBank = this.prop([2, 0x80, 7]);
    }
    get used() {
        return this.data[0] !== 0xfe;
    }
    set used(used) {
        this.data[0] = used ? 0 : 0xfe;
    }
    [Symbol.iterator]() {
        if (this.used)
            return super[Symbol.iterator]();
        return [0xfe, 0, 0, 0][Symbol.iterator]();
    }
    get monsterId() {
        return (this.id + 0x50) & 0xff;
    }
    set monsterId(id) {
        this.id = (id - 0x50) & 0xff;
    }
    isChest() { return this.type === 2 && this.id < 0x80; }
    isInvisible() {
        return this.isChest() && Boolean(this.data[2] & 0x20);
    }
    isTrigger() { return this.type === 2 && this.id >= 0x80; }
    isNpc() { return this.type === 1 && this.id < 0xc0; }
    isBoss() { return this.type === 1 && this.id >= 0xc0; }
    isMonster() { return this.type === 0; }
    isGeneric() { return this.type === 4; }
    isWall() {
        return Boolean(this.type === 3 && (this.id < 4 || (this.data[2] & 0x20)));
    }
    isShootingWall(location) {
        return this.isWall() &&
            !!(this.data[2] & 0x20 ? this.data[2] & 0x10 :
                location.id === 0x8f || location.id === 0xa8);
    }
    wallType() {
        if (this.type !== 3)
            return '';
        const obj = this.data[2] & 0x20 ? this.id >>> 4 : this.id;
        if (obj >= 4)
            return '';
        return obj === 2 ? 'bridge' : 'wall';
    }
    wallElement() {
        if (!this.isWall())
            return -1;
        return this.id & 3;
    }
    toString() {
        return `Spawn ${this.hex()}: (${hex(this.x)}, ${hex(this.y)}) ${this.timed ? 'timed' : 'fixed'} ${this.type}:${hex(this.id)}`;
    }
}
Spawn.size = 4;
export function ytDiff(yt1, yt0) {
    let dy = yt1 - yt0;
    dy -= (yt1 >>> 4) - (yt0 >>> 4);
    return dy;
}
export function ytAdd(yt, ...dys) {
    for (const dy of dys) {
        const subscreen = dy % 15;
        const screens = (dy - subscreen) / 15;
        let ys1 = (yt >> 4) + screens;
        let yt1 = (yt & 0xf) + subscreen;
        if (yt1 < 0) {
            ys1--;
            yt1 = 0xf + yt1;
        }
        else if (yt1 >= 0xf) {
            ys1++;
            yt1 = yt1 - 0xf;
        }
        yt = ys1 << 4 | yt1;
    }
    return yt;
}
//# sourceMappingURL=data:application/json;base64,