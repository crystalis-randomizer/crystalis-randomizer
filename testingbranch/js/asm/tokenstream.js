const MAX_DEPTH = 100;
export class TokenStream {
    constructor() {
        this.stack = [];
    }
    next() {
        while (this.stack.length) {
            const [tok, front] = this.stack[this.stack.length - 1];
            if (front.length)
                return front.pop();
            const line = tok === null || tok === void 0 ? void 0 : tok.next();
            if (line)
                return line;
            this.stack.pop();
        }
        return undefined;
    }
    unshift(...lines) {
        if (!this.stack.length)
            throw new Error(`Cannot unshift after EOF`);
        const front = this.stack[this.stack.length - 1][1];
        for (let i = lines.length - 1; i >= 0; i--) {
            front.push(lines[i]);
        }
    }
    enter(tokens) {
        const frame = [undefined, []];
        if (tokens)
            frame[0] = tokens;
        this.stack.push(frame);
        if (this.stack.length > MAX_DEPTH)
            throw new Error(`Stack overflow`);
    }
    exit() {
        this.stack.pop();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvYXNtL3Rva2Vuc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQztBQUV0QixNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUNVLFVBQUssR0FBWSxFQUFFLENBQUM7SUF3QzlCLENBQUM7SUF0Q0MsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDeEIsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELElBQUksS0FBSyxDQUFDLE1BQU07Z0JBQUUsT0FBTyxLQUFLLENBQUMsR0FBRyxFQUFHLENBQUM7WUFDdEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLElBQUksRUFBRSxDQUFDO1lBQ3pCLElBQUksSUFBSTtnQkFBRSxPQUFPLElBQUksQ0FBQztZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFHLEtBQWdCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDcEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFPRCxLQUFLLENBQUMsTUFBb0I7UUFDeEIsTUFBTSxLQUFLLEdBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxNQUFNO1lBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUdELElBQUk7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FJRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VG9rZW4sIFRva2VuU291cmNlfSBmcm9tICcuL3Rva2VuLmpzJztcblxudHlwZSBGcmFtZSA9IFtUb2tlblNvdXJjZXx1bmRlZmluZWQsIFRva2VuW11bXV07XG5cbmNvbnN0IE1BWF9ERVBUSCA9IDEwMDtcblxuZXhwb3J0IGNsYXNzIFRva2VuU3RyZWFtIGltcGxlbWVudHMgVG9rZW5Tb3VyY2Uge1xuICBwcml2YXRlIHN0YWNrOiBGcmFtZVtdID0gW107XG5cbiAgbmV4dCgpOiBUb2tlbltdfHVuZGVmaW5lZCB7XG4gICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICBjb25zdCBbdG9rLCBmcm9udF0gPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAoZnJvbnQubGVuZ3RoKSByZXR1cm4gZnJvbnQucG9wKCkhO1xuICAgICAgY29uc3QgbGluZSA9IHRvaz8ubmV4dCgpO1xuICAgICAgaWYgKGxpbmUpIHJldHVybiBsaW5lO1xuICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHVuc2hpZnQoLi4ubGluZXM6IFRva2VuW11bXSkge1xuICAgIGlmICghdGhpcy5zdGFjay5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHVuc2hpZnQgYWZ0ZXIgRU9GYCk7XG4gICAgY29uc3QgZnJvbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1bMV07XG4gICAgZm9yIChsZXQgaSA9IGxpbmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBmcm9udC5wdXNoKGxpbmVzW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBhc3luYyBpbmNsdWRlKGZpbGU6IHN0cmluZykge1xuICAvLyAgIGNvbnN0IGNvZGUgPSBhd2FpdCB0aGlzLnRhc2sucGFyZW50LnJlYWRGaWxlKGZpbGUpO1xuICAvLyAgIHRoaXMuc3RhY2sucHVzaChbbmV3IFRva2VuaXplcihjb2RlLCBmaWxlLCB0aGlzLnRhc2sub3B0cyksICBbXV0pO1xuICAvLyB9XG4gIC8vIEVudGVyIGEgbWFjcm8gc2NvcGUuXG4gIGVudGVyKHRva2Vucz86IFRva2VuU291cmNlKSB7XG4gICAgY29uc3QgZnJhbWU6IEZyYW1lID0gW3VuZGVmaW5lZCwgW11dO1xuICAgIGlmICh0b2tlbnMpIGZyYW1lWzBdID0gdG9rZW5zO1xuICAgIHRoaXMuc3RhY2sucHVzaChmcmFtZSk7XG4gICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoID4gTUFYX0RFUFRIKSB0aHJvdyBuZXcgRXJyb3IoYFN0YWNrIG92ZXJmbG93YCk7XG4gIH1cblxuICAvLyBFeGl0IGEgbWFjcm8gc2NvcGUgcHJlbWF0dXJlbHkuXG4gIGV4aXQoKSB7XG4gICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgfVxuICAvLyBvcHRpb25zKCk6IFRva2VuaXplci5PcHRpb25zIHtcbiAgLy8gICByZXR1cm4gdGhpcy50YXNrLm9wdHM7XG4gIC8vIH1cbn1cblxuXG4vLyBUT0RPIC0gcHJvYmFibHkgbm8gbmVlZCBmb3IgYW55dGhpbmcgdGhhdCBkZWxlZ2F0ZXMgdG8gYW4gQXN5bmNUUy4uLj9cbiJdfQ==