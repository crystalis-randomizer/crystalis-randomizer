import { Graphics } from './graphics.js';
export class Context {
    constructor(rom) {
        this.rom = rom;
        this.data = {
            location: undefined,
            tileset: 0x80,
            patterns: [0, 0, 0, 0, 0, 0],
            palettes: [0, 0, 0, 0x7f, 0, 0, 0, 0],
            flag: false,
        };
        this.listeners = new Set();
        this.graphics = new Graphics(rom);
    }
    set location(x) {
        const update = { graphics: true, location: true };
        this.data.location = x;
        const l = x && this.rom.locations[x];
        if (l && l.used) {
            Object.assign(update, { tileset: true, patterns: true, palettes: true,
                tilePattern: true, tilePalette: true,
                spritePattern: true, spritePalette: true });
            this.data.tileset = l.tileset;
            this.data.patterns.splice(0, 2, ...l.tilePatterns);
            this.data.palettes.splice(0, 3, ...l.tilePalettes);
            this.data.patterns.splice(4, 2, ...l.spritePatterns);
            this.data.palettes.splice(6, 2, ...l.spritePalettes);
        }
        this.update(update);
    }
    get location() { return this.data.location; }
    set tileset(x) {
        if ((x & 3) !== 0 || x < 0x80 || x >= 0xaf)
            return;
        this.data.tileset = x;
        this.update({ graphics: true, tileset: true });
    }
    get tileset() { return this.data.tileset; }
    set tilePatterns(x) {
        if (x.length !== 2)
            throw new Error(`invalid tilePatterns: ${x.join(',')}`);
        this.data.patterns.splice(0, 2, ...x);
        this.update({ graphics: true, patterns: true, tilePattern: true });
    }
    get tilePatterns() { return this.data.patterns.slice(0, 2); }
    set tilePalettes(x) {
        if (x.length !== 3)
            throw new Error(`invalid tilePalettes: ${x.join(',')}`);
        this.data.palettes.splice(0, 3, ...x);
        this.update({ graphics: true, palettes: true, tilePalette: true });
    }
    get tilePalettes() { return this.data.palettes.slice(0, 3); }
    set flag(x) {
        this.data.flag = x;
        this.update({ graphics: true, flag: true });
    }
    get flag() {
        return this.data.flag;
    }
    setPattern(id, value) {
        this.data.patterns[id] = value;
        const update = { graphics: true, patterns: true };
        if (id < 2)
            update.tilePattern = true;
        else
            update.spritePattern = true;
        this.update(update);
    }
    setPalette(id, value) {
        this.data.palettes[id] = value;
        const update = { graphics: true, palettes: true };
        if (id < 4)
            update.tilePalette = true;
        else
            update.spritePalette = true;
        this.update(update);
    }
    update(update) {
        for (const listener of this.listeners) {
            listener(update);
        }
    }
    updates() {
        const updates = [];
        const resolvers = [];
        const listener = (update) => {
            if (resolvers.length) {
                resolvers.shift()({ value: update, done: false });
            }
            else {
                updates.push(update);
            }
        };
        this.listeners.add(listener);
        const next = () => {
            if (updates.length) {
                return Promise.resolve({ value: updates.shift(), done: false });
            }
            return new Promise(resolve => resolvers.push(resolve));
        };
        const cleanup = (result) => {
            this.listeners.delete(listener);
            return result;
        };
        const iter = {
            next,
            return: (result) => cleanup(Promise.resolve({ done: true, value: result })),
            throw: (ex) => cleanup(Promise.reject(ex)),
            [Symbol.asyncIterator]: () => iter,
        };
        return iter;
    }
    static pattern(id) {
        return {
            get(context) { return context.data.patterns[id]; },
            set(context, value) { context.setPattern(id, value); },
        };
    }
    static palette(id) {
        return {
            get(context) { return context.data.palettes[id]; },
            set(context, value) { context.setPalette(id, value); },
        };
    }
}
Context.LOCATION = {
    get(context) { return context.location; },
    set(context, value) { context.location = value; },
};
Context.TILESET = {
    get(context) { return context.tileset; },
    set(context, value) { context.tileset = value; },
};
//# sourceMappingURL=data:application/json;base64,