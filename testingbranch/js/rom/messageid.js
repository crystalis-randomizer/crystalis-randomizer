import { DataTuple, hex } from './util.js';
export class MessageId extends DataTuple {
    constructor() {
        super(...arguments);
        this.action = this.prop([0, 0xf8, 3]);
        this.part = this.prop([0, 0x07, -3], [1, 0xe0, 5]);
        this.index = this.prop([1, 0x1f]);
    }
    toString() {
        const action = this.action ? ` (action ${hex(this.action)})` : '';
        return `MessageId ${this.hex()}: (${hex(this.part)}:${hex(this.index)}${action}`;
    }
    get mid() {
        return `${hex(this.part)}:${hex(this.index)}`;
    }
    set mid(mid) {
        const split = mid.split(':');
        if (split.length !== 2)
            throw new Error(`oops: ${mid}`);
        this.part = Number.parseInt(split[0], 16);
        this.index = Number.parseInt(split[1], 16);
        if (isNaN(this.part) || isNaN(this.index))
            throw new Error(`oops: ${mid}`);
    }
    nonzero() {
        return !!(this.part || this.index);
    }
}
MessageId.size = 2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZWlkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2pzL3JvbS9tZXNzYWdlaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFFekMsTUFBTSxPQUFPLFNBQVUsU0FBUSxTQUFTO0lBQXhDOztRQVVFLFdBQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLFNBQUksR0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hELFVBQUssR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUEwQmhDLENBQUM7SUF4QkMsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEUsT0FBTyxhQUFhLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQzdELE1BQU0sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFJRCxJQUFJLEdBQUc7UUFDTCxPQUFPLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksR0FBRyxDQUFDLEdBQVc7UUFDakIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMzQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBR0QsT0FBTztRQUNMLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7QUFwQ00sY0FBSSxHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YVR1cGxlLCBoZXh9IGZyb20gJy4vdXRpbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWQgZXh0ZW5kcyBEYXRhVHVwbGUge1xuICBzdGF0aWMgc2l6ZSA9IDI7XG5cbiAgLy8gVE9ETyAtIGNvbnNpZGVyIGp1c3QgbGlzdGluZyBiaXRzPyAgKGhhcmRlciB0byBtYXAgdG8gY29kZSlcbiAgLy8gICAgICAgIHByb2JhYmx5IHRoZSB3YXkgdG8gbWFwIGlzIHRvIGJ1Y2tldCBieSBieXRlOnNoaWZ0LCB0aGVuXG4gIC8vICAgICAgICBPUiB0b2dldGhlciBldmVyeXRoaW5nIHdpdGggdGhlIHNhbWUgc2hpZnQuLi5cbiAgLy8gYWN0aW9uID0gdGhpcy5iaXRzKDExLCAxMiwgMTMsIDE0LCAxNSkgPSB0aGlzLmJpdHMoWzExLCAxNl0pO1xuICAvLyBwYXJ0ICAgPSB0aGlzLmJpdHMoNSwgNiwgNywgOCwgOSwgMTApICA9IHRoaXMuYml0cyhbNSwgMTFdKTtcbiAgLy8gaW5kZXggID0gdGhpcy5iaXRzKDAsIDEsIDIsIDMsIDQpICAgICAgPSB0aGlzLmJpdHMoWzAsIDVdKTtcblxuICBhY3Rpb24gPSB0aGlzLnByb3AoWzAsIDB4ZjgsIDNdKTtcbiAgcGFydCAgID0gdGhpcy5wcm9wKFswLCAweDA3LCAtM10sIFsxLCAweGUwLCA1XSk7XG4gIGluZGV4ICA9IHRoaXMucHJvcChbMSwgMHgxZl0pO1xuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb24gPyBgIChhY3Rpb24gJHtoZXgodGhpcy5hY3Rpb24pfSlgIDogJyc7XG4gICAgcmV0dXJuIGBNZXNzYWdlSWQgJHt0aGlzLmhleCgpfTogKCR7aGV4KHRoaXMucGFydCl9OiR7aGV4KHRoaXMuaW5kZXgpfSR7XG4gICAgICAgICAgICBhY3Rpb259YDtcbiAgfVxuXG4gIC8vIFVuaXF1ZSBzdHJpbmcgSUQgZm9yIHRoZSBtZXNzYWdlIHBhcnQgb25seSAobm8gYWN0aW9uKS5cbiAgLy8gU3VpdGFibGUgZm9yIGtleWluZyBhIG1hcC5cbiAgZ2V0IG1pZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtoZXgodGhpcy5wYXJ0KX06JHtoZXgodGhpcy5pbmRleCl9YDtcbiAgfVxuXG4gIHNldCBtaWQobWlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzcGxpdCA9IG1pZC5zcGxpdCgnOicpO1xuICAgIGlmIChzcGxpdC5sZW5ndGggIT09IDIpIHRocm93IG5ldyBFcnJvcihgb29wczogJHttaWR9YCk7XG4gICAgdGhpcy5wYXJ0ID0gTnVtYmVyLnBhcnNlSW50KHNwbGl0WzBdLCAxNik7XG4gICAgdGhpcy5pbmRleCA9IE51bWJlci5wYXJzZUludChzcGxpdFsxXSwgMTYpO1xuICAgIGlmIChpc05hTih0aGlzLnBhcnQpIHx8IGlzTmFOKHRoaXMuaW5kZXgpKSB0aHJvdyBuZXcgRXJyb3IoYG9vcHM6ICR7bWlkfWApO1xuICB9XG5cbiAgLy8gV2hldGhlciB0aGUgbWlkIGlzIG5vbnplcm8uXG4gIG5vbnplcm8oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHRoaXMucGFydCB8fCB0aGlzLmluZGV4KTtcbiAgfVxufVxuIl19