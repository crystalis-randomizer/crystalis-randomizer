export class Metatile {
    constructor(tileset, id) {
        this.tileset = tileset;
        this.id = id;
        this.copiedFrom = -1;
    }
    get tiles() {
        return [0, 1, 2, 3].map(i => this.tileset.tiles[i][this.id]);
    }
    setTiles(tiles) {
        for (let i = 0; i < 4; i++) {
            const tile = tiles[i];
            if (tile != null)
                this.tileset.tiles[i][this.id] = tile;
        }
        return this;
    }
    get alternative() {
        const alt = this.id < 0x20 ? this.tileset.alternates[this.id] : this.id;
        return alt !== this.id ? alt : null;
    }
    setAlternative(tile) {
        if (this.id >= 0x20)
            return this;
        this.tileset.alternates[this.id] = tile != null ? tile : this.id;
        this.tileset.effects().effects[this.id] |= 0x08;
        return this;
    }
    get attrs() {
        return this.tileset.attrs[this.id];
    }
    setAttrs(attrs) {
        this.tileset.attrs[this.id] = attrs;
        return this;
    }
    get effects() {
        return this.tileset.effects().effects[this.id];
    }
    setEffects(effects) {
        this.tileset.effects().effects[this.id] = effects;
        return this;
    }
    copyFrom(other, ...screens) {
        const that = new Metatile(this.tileset, other);
        this.copiedFrom = other;
        this.setTiles(that.tiles);
        if ((this.id | that.id) < 0x20) {
            this.setAlternative(that.alternative);
        }
        this.setAttrs(that.attrs);
        this.setEffects(that.effects);
        return this;
    }
    replaceIn(...screens) {
        if (this.copiedFrom < 0)
            throw new Error(`Must copyFrom first.`);
        for (const screen of screens) {
            screen.replace(this.copiedFrom, this.id);
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YXRpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanMvcm9tL21ldGF0aWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU0sT0FBTyxRQUFRO0lBRW5CLFlBQXFCLE9BQWdCLEVBQVcsRUFBVTtRQUFyQyxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQVcsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQURsRCxlQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcUMsQ0FBQztJQWdCOUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFDRCxRQUFRLENBQUMsS0FBc0M7UUFDN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxJQUFJLElBQUksSUFBSTtnQkFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUN4RSxPQUFPLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBQ0QsY0FBYyxDQUFDLElBQWlCO1FBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsSUFBSSxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ2hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFDRCxVQUFVLENBQUMsT0FBZTtRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhLEVBQUUsR0FBRyxPQUFxQjtRQUM5QyxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBRyxPQUFxQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQztZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNqRSxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUM1QixNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01ldGFzY3JlZW59IGZyb20gJy4vbWV0YXNjcmVlbi5qcyc7XG5pbXBvcnQge1RpbGVzZXR9IGZyb20gJy4vdGlsZXNldC5qcyc7XG5cbi8qKlxuICogQSBzaW5nbGUgbWFwIHRpbGUsIGNvbXBvc2VkIG9mIGZvdXIgQ0hSIHRpbGVzLCB0aGF0IGNhbiBiZVxuICogbWFuaXB1bGF0ZWQgYXMgYSB1bml0LiAgQSBNZXRhdGlsZSBjYW4gYmUgZ290dGVuIGZyb20gYSBUaWxlc2V0XG4gKiAobm90IGEgTWV0YXRpbGVzZXQpIHNpbmNlIGl0IGNvcnJlc3BvbmRzIHRvIGEgcGh5c2ljYWwgZW50aXR5IGluXG4gKiB0aGUgcm9tLCByYXRoZXIgdGhhbiBhIGxvZ2ljYWwgc3Vic2V0IG9mIHRoZSB0aWxlc2V0ICh3aGljaCBpc1xuICogd2hhdCB0aGUgTWV0YXRpbGVzZXQgcmVwcmVzZW50cykuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRhdGlsZSB7XG4gIHByaXZhdGUgY29waWVkRnJvbSA9IC0xO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSB0aWxlc2V0OiBUaWxlc2V0LCByZWFkb25seSBpZDogbnVtYmVyKSB7fVxuXG4gIC8vIGdldCB0b3BMZWZ0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1swXVt0aGlzLmlkXTsgfVxuICAvLyBzZXQgdG9wTGVmdCh4OiBudW1iZXIpIHsgdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbMF1bdGhpcy5pZF0gPSB4OyB9XG5cbiAgLy8gZ2V0IHRvcFJpZ2h0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1sxXVt0aGlzLmlkXTsgfVxuICAvLyBzZXQgdG9wUmlnaHQoeDogbnVtYmVyKSB7IHRoaXMudGlsZXNldC50aWxlc2V0LnRpbGVzWzFdW3RoaXMuaWRdID0geDsgfVxuXG4gIC8vIGdldCBib3R0b21MZWZ0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1syXVt0aGlzLmlkXTsgfVxuICAvLyBzZXQgYm90dG9tTGVmdCh4OiBudW1iZXIpIHsgdGhpcy50aWxlc2V0LnRpbGVzZXQudGlsZXNbMl1bdGhpcy5pZF0gPSB4OyB9XG5cbiAgLy8gZ2V0IGJvdHRvbVJpZ2h0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRpbGVzZXQudGlsZXNldC50aWxlc1szXVt0aGlzLmlkXTsgfVxuICAvLyBzZXQgYm90dG9tUmlnaHQoeDogbnVtYmVyKSB7IHRoaXMudGlsZXNldC50aWxlc2V0LnRpbGVzWzNdW3RoaXMuaWRdID0geDsgfVxuXG4gIC8vIFRPRE8gLSBnZXR0ZXJzP1xuXG4gIGdldCB0aWxlcygpOiByZWFkb25seSBudW1iZXJbXSB7XG4gICAgcmV0dXJuIFswLCAxLCAyLCAzXS5tYXAoaSA9PiB0aGlzLnRpbGVzZXQudGlsZXNbaV1bdGhpcy5pZF0pO1xuICB9XG4gIHNldFRpbGVzKHRpbGVzOiBSZWFkb25seUFycmF5PG51bWJlcnx1bmRlZmluZWQ+KTogdGhpcyB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGNvbnN0IHRpbGUgPSB0aWxlc1tpXTtcbiAgICAgIGlmICh0aWxlICE9IG51bGwpIHRoaXMudGlsZXNldC50aWxlc1tpXVt0aGlzLmlkXSA9IHRpbGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IGFsdGVybmF0aXZlKCk6IG51bWJlcnxudWxsIHtcbiAgICBjb25zdCBhbHQgPSB0aGlzLmlkIDwgMHgyMCA/IHRoaXMudGlsZXNldC5hbHRlcm5hdGVzW3RoaXMuaWRdIDogdGhpcy5pZDtcbiAgICByZXR1cm4gYWx0ICE9PSB0aGlzLmlkID8gYWx0IDogbnVsbDtcbiAgfVxuICBzZXRBbHRlcm5hdGl2ZSh0aWxlOiBudW1iZXJ8bnVsbCk6IHRoaXMge1xuICAgIGlmICh0aGlzLmlkID49IDB4MjApIHJldHVybiB0aGlzO1xuICAgIHRoaXMudGlsZXNldC5hbHRlcm5hdGVzW3RoaXMuaWRdID0gdGlsZSAhPSBudWxsID8gdGlsZSA6IHRoaXMuaWQ7XG4gICAgdGhpcy50aWxlc2V0LmVmZmVjdHMoKS5lZmZlY3RzW3RoaXMuaWRdIHw9IDB4MDg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgYXR0cnMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50aWxlc2V0LmF0dHJzW3RoaXMuaWRdO1xuICB9XG4gIHNldEF0dHJzKGF0dHJzOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLnRpbGVzZXQuYXR0cnNbdGhpcy5pZF0gPSBhdHRycztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBlZmZlY3RzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudGlsZXNldC5lZmZlY3RzKCkuZWZmZWN0c1t0aGlzLmlkXTtcbiAgfVxuICBzZXRFZmZlY3RzKGVmZmVjdHM6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMudGlsZXNldC5lZmZlY3RzKCkuZWZmZWN0c1t0aGlzLmlkXSA9IGVmZmVjdHM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb3B5RnJvbShvdGhlcjogbnVtYmVyLCAuLi5zY3JlZW5zOiBNZXRhc2NyZWVuW10pOiB0aGlzIHtcbiAgICBjb25zdCB0aGF0ID0gbmV3IE1ldGF0aWxlKHRoaXMudGlsZXNldCwgb3RoZXIpO1xuICAgIHRoaXMuY29waWVkRnJvbSA9IG90aGVyO1xuICAgIHRoaXMuc2V0VGlsZXModGhhdC50aWxlcyk7XG4gICAgaWYgKCh0aGlzLmlkIHwgdGhhdC5pZCkgPCAweDIwKSB7XG4gICAgICB0aGlzLnNldEFsdGVybmF0aXZlKHRoYXQuYWx0ZXJuYXRpdmUpO1xuICAgIH1cbiAgICB0aGlzLnNldEF0dHJzKHRoYXQuYXR0cnMpO1xuICAgIHRoaXMuc2V0RWZmZWN0cyh0aGF0LmVmZmVjdHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVwbGFjZUluKC4uLnNjcmVlbnM6IE1ldGFzY3JlZW5bXSk6IHRoaXMge1xuICAgIGlmICh0aGlzLmNvcGllZEZyb20gPCAwKSB0aHJvdyBuZXcgRXJyb3IoYE11c3QgY29weUZyb20gZmlyc3QuYCk7XG4gICAgZm9yIChjb25zdCBzY3JlZW4gb2Ygc2NyZWVucykge1xuICAgICAgc2NyZWVuLnJlcGxhY2UodGhpcy5jb3BpZWRGcm9tLCB0aGlzLmlkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==